#!/usr/bin/make -f
# Makefile used by dpkg-buildpackage

# dh-virtualenv options
# https://dh-virtualenv.readthedocs.io/en/1.0/usage.html
DH_VIRTUALENV_ARGS = \
	--python='/usr/bin/python2' \
	--extra-pip-arg='--progress-bar=off' \
	--extra-pip-arg='--quiet'

# Directory where venvs for dh-virtualenv packages are built
VENV_BUILD_DIR = '$(PWD)/debian/portal/opt/venvs'


override_dh_virtualenv:
	# lines preceding `dh_virtualenv` occur before venv creation and pip install

	# Build front-end files
	find / -name "*.whl" -print
	# work around virtualenv/pip/urllib3 bug
	# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=880472
	# https://bugs.launchpad.net/ubuntu/+source/python-pip/+bug/1743886
	python -m pip install --user --upgrade pip
	bin/build-frontend-files.sh

	# Build front-end translations (JSON) from gettext files (PO)
	bin/build-frontend-translations.sh

	dh_virtualenv $(DH_VIRTUALENV_ARGS)

override_dh_builddeb:
	# lines preceding `dh_builddeb` occur after venv creation && `pip install`
	# but before debian package creation

	# Manually fix paths erroneously pointing to build environment
	find \
		'$(VENV_BUILD_DIR)/portal/lib/' \
		-name easy-install.pth \
		-exec \
			sed \
				--in-place \
				--expression 's|$(VENV_BUILD_DIR)/|/opt/venvs/|g' \
				{} \; \
		-print


	# change directory to something other than the original checkout
	# `flask` commands will ignore given entrypoint (FLASK_APP) otherwise
	# Todo: figure out underlying cause

	# compile all back-end PO files to MO files
	# run flask from new virtual environment
	# avoid calling `flask` script directly
	# import paths are relative to venv *after* .deb installation
	cd / && \
	FLASK_APP='$(VENV_BUILD_DIR)/portal/bin/manage.py' \
	SECRET_KEY='' \
	PATH='$(VENV_BUILD_DIR)/portal/bin' \
		python -m flask compile-po-files


	dh_builddeb

%:
	dh $@ --with python-virtualenv
