/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./static/js/src/admin.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./static/js/src/admin.js":
/*!********************************!*\
  !*** ./static/js/src/admin.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/TnthAjax.js */ \"./static/js/src/modules/TnthAjax.js\");\n/* harmony import */ var _modules_TnthDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/TnthDate.js */ \"./static/js/src/modules/TnthDate.js\");\n/* harmony import */ var _modules_Utility_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/Utility.js */ \"./static/js/src/modules/Utility.js\");\n/* harmony import */ var _modules_OrgTool_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/OrgTool.js */ \"./static/js/src/modules/OrgTool.js\");\n\n\n\n\n\n(function () {\n  /*global Vue DELAY_LOADING i18next $ */\n  var DELAY_LOADING = true; //a workaround for hiding of loading indicator upon completion of loading of portal wrapper - loading indicator needs to continue displaying until patients list has finished loading\n\n  $.ajaxSetup({\n    contentType: \"application/json; charset=utf-8\"\n  });\n  var AdminObj = window.AdminObj = new Vue({\n    el: \"#adminTableContainer\",\n    errorCaptured: function errorCaptured(Error, Component, info) {\n      console.error(\"Error: \", Error, \" Component: \", Component, \" Message: \", info);\n      /* console global */\n\n      return false;\n    },\n    errorHandler: function errorHandler(err, vm) {\n      this.dataError = true;\n      var errorElement = document.getElementById(\"admin-table-error-message\");\n\n      if (errorElement) {\n        errorElement.innerHTML = \"Error occurred initializing Admin Vue instance.\";\n      }\n\n      console.warn(\"Admin Vue instance threw an error: \", vm, this);\n      console.error(\"Error thrown: \", err);\n    },\n    created: function created() {\n      this.injectDependencies();\n      this.getOrgTool();\n    },\n    mounted: function mounted() {\n      var self = this;\n      _modules_Utility_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].VueErrorHandling();\n      /* global VueErrorHandling */\n\n      this.preConfig(function () {\n        if ($(\"#adminTable\").length > 0) {\n          self.rowLinkEvent();\n          self.setColumnSelections();\n          self.setTableFilters(self.userId); //set user's preference for filter(s)\n\n          self.initTableEvents();\n          self.initOrgsList();\n          self.handleDisableFields();\n          self.handleDeletedUsersVis();\n          self.setRowItemEvent();\n          self.handleAffiliatedUIVis();\n          self.addFilterPlaceHolders();\n        } else {\n          self.initOrgsList();\n          self.handleDownloadModal();\n        }\n\n        setTimeout(function () {\n          self.fadeLoader();\n        }, 350);\n      });\n    },\n    data: {\n      dataError: false,\n      configured: false,\n      initIntervalId: 0,\n      sortFilterEnabled: false,\n      showDeletedUsers: false,\n      isAdmin: false,\n      userId: null,\n      userRoles: [],\n      userOrgs: [],\n      topLevelOrgs: [],\n      orgTool: null,\n      orgsSelector: {\n        selectAll: false,\n        clearAll: false,\n        close: false\n      },\n      ROW_ID_PREFIX: \"data_row_\",\n      tableIdentifier: \"adminList\",\n      popoverEventInitiated: false,\n      dependencies: {},\n      tableConfig: {\n        formatShowingRows: function formatShowingRows(pageFrom, pageTo, totalRows) {\n          var rowInfo;\n          setTimeout(function () {\n            rowInfo = i18next.t(\"Showing {pageFrom} to {pageTo} of {totalRows} users\").replace(\"{pageFrom}\", pageFrom).replace(\"{pageTo}\", pageTo).replace(\"{totalRows}\", totalRows);\n            $(\".pagination-detail .pagination-info\").html(rowInfo);\n          }, 10);\n          return rowInfo;\n        },\n        formatRecordsPerPage: function formatRecordsPerPage(pageNumber) {\n          return i18next.t(\"{pageNumber} records per page\").replace(\"{pageNumber}\", pageNumber);\n        },\n        formatToggle: function formatToggle() {\n          return i18next.t(\"Toggle\");\n        },\n        formatColumns: function formatColumns() {\n          return i18next.t(\"Columns\");\n        },\n        formatAllRows: function formatAllRows() {\n          return i18next.t(\"All rows\");\n        },\n        formatSearch: function formatSearch() {\n          return i18next.t(\"Search\");\n        },\n        formatNoMatches: function formatNoMatches() {\n          return i18next.t(\"No matching records found\");\n        },\n        formatExport: function formatExport() {\n          return i18next.t(\"Export data\");\n        }\n      },\n      currentTablePreference: null,\n      errorCollection: {\n        orgs: \"\",\n        demo: \"\"\n      },\n      instruments: {\n        list: [],\n        dataType: \"csv\",\n        selected: \"\",\n        message: \"\"\n      },\n      patientReports: {\n        data: [],\n        message: \"\",\n        loading: false\n      }\n    },\n    methods: {\n      injectDependencies: function injectDependencies() {\n        var self = this;\n        window.portalModules = window.portalModules || {};\n        /*eslint security/detect-object-injection: off */\n\n        window.portalModules[\"tnthAjax\"] = _modules_TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        window.portalModules[\"tnthDates\"] = _modules_TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        window.portalModules[\"OrgTool\"] = _modules_OrgTool_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n\n        for (var key in window.portalModules) {\n          if ({}.hasOwnProperty.call(window.portalModules, key)) {\n            self.dependencies[key] = window.portalModules[key];\n          }\n        }\n      },\n      getDependency: function getDependency(key) {\n        if (key && this.dependencies.hasOwnProperty(key)) {\n          return this.dependencies[key];\n        } else {\n          throw Error(\"Dependency \" + key + \" not found.\"); //throw error ? should be visible in console\n        }\n      },\n      showMain: function showMain() {\n        $(\"#mainHolder\").css({\n          \"visibility\": \"visible\",\n          \"-ms-filter\": \"progid:DXImageTransform.Microsoft.Alpha(Opacity=100)\",\n          \"filter\": \"alpha(opacity=100)\",\n          \"-moz-opacity\": 1,\n          \"-khtml-opacity\": 1,\n          \"opacity\": 1\n        });\n      },\n      setOrgsMenuHeight: function setOrgsMenuHeight(padding) {\n        padding = padding || 85;\n        var h = parseInt($(\"#fillOrgs\").height());\n\n        if (h > 0) {\n          var adminTable = $(\"div.admin-table\"),\n              orgMenu = $(\"#org-menu\");\n          var calculatedHeight = h + padding;\n          $(\"#org-menu\").height(calculatedHeight);\n\n          if (adminTable.height() < orgMenu.height()) {\n            setTimeout(function () {\n              adminTable.height(orgMenu.height() + calculatedHeight);\n            }, 0);\n          }\n        }\n      },\n      clearFilterButtons: function clearFilterButtons() {\n        this.setOrgsSelector({\n          selectAll: false,\n          clearAll: false,\n          close: false\n        });\n      },\n      fadeLoader: function fadeLoader() {\n        DELAY_LOADING = false;\n        var self = this;\n        setTimeout(function () {\n          self.showMain();\n        }, 250);\n        setTimeout(function () {\n          $(\"#loadingIndicator\").fadeOut();\n        }, 300);\n      },\n      showLoader: function showLoader() {\n        $(\"#loadingIndicator\").show();\n      },\n      preConfig: function preConfig(callback) {\n        var self = this,\n            tnthAjax = this.getDependency(\"tnthAjax\");\n\n        callback = callback || function () {};\n\n        tnthAjax.getCurrentUser(function (data) {\n          if (data) {\n            self.userId = data.id;\n            self.setIdentifier();\n            self.setSortFilterProp();\n            self.configTable();\n            self.configured = true;\n            setTimeout(function () {\n              callback();\n            }, 50);\n          } else {\n            alert(i18next.t(\"User Id is required\"));\n            /* global i18next */\n\n            self.configured = true;\n            return false;\n          }\n        }, {\n          sync: true\n        });\n      },\n      setIdentifier: function setIdentifier() {\n        var adminTableContainer = $(\"#adminTableContainer\");\n\n        if (adminTableContainer.hasClass(\"patient-view\")) {\n          this.tableIdentifier = \"patientList\";\n        }\n\n        if (adminTableContainer.hasClass(\"staff-view\")) {\n          this.tableIdentifier = \"staffList\";\n        }\n      },\n      setOrgsSelector: function setOrgsSelector(obj) {\n        if (!obj) {\n          return false;\n        }\n\n        var self = this;\n\n        for (var prop in obj) {\n          if (self.orgsSelector.hasOwnProperty(prop)) {\n            self.orgsSelector[prop] = obj[prop];\n          }\n        }\n      },\n      setSortFilterProp: function setSortFilterProp() {\n        this.sortFilterEnabled = this.tableIdentifier === \"patientList\";\n      },\n      configTable: function configTable() {\n        var options = {};\n        var sortObj = this.getTablePreference(this.userId, this.tableIdentifier);\n        sortObj = sortObj || this.getDefaultTablePreference();\n        options.sortName = sortObj.sort_field;\n        options.sortOrder = sortObj.sort_order;\n        options.filterBy = sortObj;\n        options.exportOptions = {\n          /* global  Utility getExportFileName*/\n          fileName: _modules_Utility_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getExportFileName($(\"#adminTableContainer\").attr(\"data-export-prefix\"))\n        };\n        $(\"#adminTable\").bootstrapTable(this.getTableConfigOptions(options));\n      },\n      getTableConfigOptions: function getTableConfigOptions(options) {\n        if (!options) {\n          return this.tableConfig;\n        }\n\n        return $.extend({}, this.tableConfig, options);\n      },\n      initTableEvents: function initTableEvents() {\n        var self = this;\n        $(\"#adminTable\").on(\"reset-view.bs.table\", function () {\n          self.addFilterPlaceHolders();\n          self.resetRowVisByActivationStatus();\n          self.setRowItemEvent();\n        });\n        $(\"#adminTable\").on(\"search.bs.table\", function () {\n          self.resetRowVisByActivationStatus();\n          self.setRowItemEvent();\n        });\n        $(\"#adminTable\").on(\"page-change.bs.table\", function () {\n          if (!$(\"#patientList .tnth-headline\").isOnScreen()) {\n            /*global isOnScreen */\n            $(\"html, body\").animate({\n              scrollTop: $(\".fixed-table-toolbar\").offset().top\n            }, 2000);\n          }\n        });\n        $(window).bind(\"scroll mousedown mousewheel keyup\", function () {\n          if ($(\"html, body\").is(\":animated\")) {\n            $(\"html, body\").stop(true, true);\n          }\n        });\n        $(\"#chkDeletedUsersFilter\").on(\"click\", function () {\n          self.handleDeletedUsersVis();\n        });\n\n        if (this.sortFilterEnabled) {\n          $(\"#adminTable\").on(\"sort.bs.table\", function (e, name, order) {\n            setTimeout(function () {\n              self.setTablePreference(self.userId, self.tableIdentifier, name, order);\n            }, 10);\n          }).on(\"column-search.bs.table\", function () {\n            setTimeout(function () {\n              self.setTablePreference(self.userId);\n            }, 10);\n          }).on(\"column-switch.bs.table\", function () {\n            setTimeout(function () {\n              self.setTablePreference(self.userId);\n            }, 10);\n          });\n        }\n\n        $(\"#adminTableToolbar .orgs-filter-warning\").popover();\n      },\n      setShowDeletedUsersFlag: function setShowDeletedUsersFlag() {\n        if (!$(\"#chkDeletedUsersFilter\").length) {\n          return;\n        }\n\n        this.showDeletedUsers = $(\"#chkDeletedUsersFilter\").is(\":checked\");\n      },\n      handleDeletedUsersVis: function handleDeletedUsersVis() {\n        this.setShowDeletedUsersFlag();\n\n        if (this.showDeletedUsers) {\n          $(\"#adminTable\").bootstrapTable(\"filterBy\", {\n            activationstatus: \"deactivated\"\n          });\n        } else {\n          $(\"#adminTable\").bootstrapTable(\"filterBy\", {\n            activationstatus: \"activated\"\n          });\n        }\n      },\n      handleAffiliatedUIVis: function handleAffiliatedUIVis() {\n        $(\"#adminTableContainer input[data-field='id']:checkbox, #adminTableContainer input[data-field='deactivate']:checkbox, #adminTableContainer input[data-field='activationstatus']:checkbox\").closest(\"label\").hide(); //hide checkbox for hidden id field and deactivate account field from side menu\n\n        $(\"#patientReportModal\").modal({\n          \"show\": false\n        });\n      },\n      setRowItemEvent: function setRowItemEvent() {\n        var self = this;\n        $(\"#adminTableContainer .btn-report\").off(\"click\").on(\"click\", function (e) {\n          e.stopPropagation();\n\n          if ($(this).closest(\".deleted-user-row\").length) {\n            //prevent viewing of report for deleted users\n            return false;\n          }\n\n          self.getReportModal($(this).attr(\"data-patient-id\"), {\n            documentDataType: $(this).attr(\"data-document-type\")\n          });\n        });\n        $(\"#adminTableContainer [name='chkRole']\").each(function () {\n          $(this).off(\"click\").on(\"click\", function (e) {\n            e.stopPropagation();\n            var userId = $(this).attr(\"data-user-id\");\n\n            if (!userId) {\n              return false;\n            }\n\n            var role = $(this).attr(\"data-role\"),\n                checked = $(this).is(\":checked\"),\n                tnthAjax = self.getDependency(\"tnthAjax\");\n            $(\"#loadingIndicator_\" + userId).show();\n            $(\"#\" + self.ROW_ID_PREFIX + userId).addClass(\"loading\");\n            tnthAjax.getRoles(userId, function (data) {\n              if (!data || data.error) {\n                $(\"#loadingIndicator_\" + userId).hide();\n                $(\"#\" + self.ROW_ID_PREFIX + userId).removeClass(\"loading\");\n                alert(i18next.t(\"Error occurred retrieving roles for user\"));\n                return false;\n              }\n\n              var arrRoles = data.roles;\n              arrRoles = $.grep(arrRoles, function (item) {\n                return String(item.name).toLowerCase() !== String(role).toLowerCase();\n              });\n\n              if (checked) {\n                arrRoles = arrRoles.concat([{\n                  name: role\n                }]);\n              }\n\n              tnthAjax.putRoles(userId, {\n                roles: arrRoles\n              }, \"\", function (data) {\n                $(\"#loadingIndicator_\" + userId).hide();\n                $(\"#\" + self.ROW_ID_PREFIX + userId).removeClass(\"loading\");\n\n                if (data.error) {\n                  alert(i18next.t(\"Error occurred updating user roles\"));\n                  return false;\n                }\n              });\n            });\n          });\n        });\n        $(\"#adminTableContainer .btn-delete-user\").each(function () {\n          $(this).popover({\n            container: \"#adminTable\",\n            html: true,\n            content: [\"<div>{title}</div>\", \"<div class='buttons-container'>\", \"<button class='btn btn-small btn-default popover-btn-deactivate' data-user-id='{userid}'>{yes}</button>&nbsp;\", \"<button class='btn btn-small btn-default popover-btn-cancel'>{no}</button>\", \"</div>\"].join(\"\").replace(\"{title}\", i18next.t(\"Are you sure you want to deactivate this account?\")).replace(/\\{userid\\}/g, $(this).attr(\"data-user-id\")).replace(\"{yes}\", i18next.t(\"Yes\")).replace(\"{no}\", i18next.t(\"No\")),\n            placement: \"top\"\n          });\n          $(this).off(\"click\").on(\"click\", function (e) {\n            e.stopPropagation();\n            $(this).popover(\"show\");\n            var userId = $(this).attr(\"data-user-id\");\n\n            if (!$(\"#data-delete-loader-\" + userId).length) {\n              $(this).parent().append(\"<i id=\\\"data-delete-loader-{userid}\\\" class=\\\"fa fa-spinner tnth-hide\\\"></i>\".replace(\"{userid}\", userId));\n            }\n          });\n        });\n        $(document).undelegate(\".popover-btn-deactivate\", \"click\").on(\"click\", \".popover-btn-deactivate\", function (e) {\n          e.stopPropagation();\n          var userId = $(this).attr(\"data-user-id\");\n          var loader = $(\"#data-delete-loader-\" + userId);\n          loader.show();\n          $(\"#btnDeleted\" + userId).hide();\n          $(this).closest(\".popover\").popover(\"hide\");\n          setTimeout(function () {\n            self.deactivateUser(userId, !self.showDeletedUsers, function () {\n              loader.hide();\n              $(\"#btnDeleted\" + userId).show();\n            });\n          }, 150);\n        });\n        $(\"#adminTable .reactivate-icon\").off(\"click\").on(\"click\", function (e) {\n          e.stopPropagation();\n          self.reactivateUser($(this).attr(\"data-user-id\"));\n        });\n        $(document).undelegate(\".popover-btn-cancel\", \"click\").on(\"click\", \".popover-btn-cancel\", function (e) {\n          e.stopPropagation();\n          $(this).closest(\".popover\").popover(\"hide\");\n        });\n        $(document).on(\"click\", function () {\n          $(\"#adminTable .popover\").popover(\"hide\");\n        });\n      },\n      addFilterPlaceHolders: function addFilterPlaceHolders() {\n        $(\"#adminTable .filterControl input\").attr(\"placeholder\", i18next.t(\"Enter Text\"));\n        $(\"#adminTable .filterControl select option[value='']\").text(i18next.t(\"Select\"));\n      },\n      handleMedidataRave: function handleMedidataRave(params) {\n        if (!$(\"#adminTableContainer\").hasClass(\"patient-view\")) {\n          //check if this is a patients list\n          return false;\n        }\n\n        var self = this,\n            tnthAjax = this.getDependency(\"tnthAjax\");\n        params = params || {};\n        tnthAjax.sendRequest(\"/api/settings\", \"GET\", this.userId, params, function (data) {\n          if (!data || data.error || !data.MEDIDATA_RAVE_ORG) {\n            return false;\n          }\n\n          var match = $.grep(self.topLevelOrgs, function (org) {\n            return data.MEDIDATA_RAVE_ORG === org;\n          });\n\n          if (match.length === 0) {\n            return false;\n          }\n\n          self.setCreateAccountVis(true);\n          self.checkAdmin();\n        });\n      },\n      setCreateAccountVis: function setCreateAccountVis(hide) {\n        var createAccountElements = $(\"#patientListOptions .or, #createUserLink\");\n\n        if (hide) {\n          createAccountElements.css(\"display\", \"none\");\n          return;\n        }\n\n        createAccountElements.css(\"display\", \"block\");\n      },\n      getUserRoles: function getUserRoles(callback) {\n        callback = callback || function () {};\n\n        if (this.userRoles.length > 0) {\n          callback(this.userRoles);\n          return;\n        }\n\n        this.setUserRoles(callback);\n      },\n      setUserRoles: function setUserRoles(callback) {\n        callback = callback || function () {};\n\n        var self = this,\n            tnthAjax = this.getDependency(\"tnthAjax\");\n        tnthAjax.getRoles(this.userId, function (data) {\n          if (!data || data.error) {\n            callback({\n              \"error\": i18next.t(\"Error occurred setting user roles\")\n            });\n            return false;\n          }\n\n          self.userRoles = data.roles.map(function (item) {\n            return item.name;\n          });\n          self.isAdmin = self.userRoles.indexOf(\"admin\") !== -1;\n          callback();\n        });\n      },\n      checkAdmin: function checkAdmin() {\n        var self = this;\n        this.getUserRoles(function () {\n          if (self.isAdmin) {\n            self.setCreateAccountVis(); //allow admin user to create account\n          }\n        });\n      },\n      handleDisableFields: function handleDisableFields() {\n        this.handleMedidataRave(); //a function specifically created to handle MedidataRave related stuff\n        //can do other things related to disabling fields here if need be\n      },\n      setUserOrgs: function setUserOrgs() {\n        if (!this.userId) {\n          return false;\n        }\n\n        var self = this;\n        $.ajax({\n          type: \"GET\",\n          async: false,\n          url: \"/api/demographics/\" + this.userId\n        }).done(function (data) {\n          if (data && data.careProvider) {\n            self.userOrgs = data.careProvider.map(function (val) {\n              var orgID = val.reference.split(\"/\").pop();\n\n              if (parseInt(orgID) === 0) {\n                $(\"#createUserLink\").attr(\"disabled\", true);\n              }\n\n              return orgID;\n            });\n\n            if (self.userOrgs.length === 0) {\n              $(\"#createUserLink\").attr(\"disabled\", true);\n            }\n          }\n        }).fail(function () {\n          alert(i18next.t(\"Error occurred setting user organizations\"));\n        });\n      },\n      getUserOrgs: function getUserOrgs() {\n        if (this.userOrgs.length === 0) {\n          this.setUserOrgs(this.userId);\n        }\n\n        return this.userOrgs;\n      },\n      getOrgTool: function getOrgTool() {\n        if (!this.orgTool) {\n          this.orgTool = new (this.getDependency(\"OrgTool\"))();\n        }\n\n        return this.orgTool;\n      },\n      setTopLevelOrgs: function setTopLevelOrgs() {\n        var self = this;\n        this.topLevelOrgs = this.userOrgs.map(function (orgId) {\n          return self.orgTool.getOrgName(self.orgTool.getTopLevelParentOrg(orgId));\n        });\n      },\n      initOrgsList: function initOrgsList() {\n        if ($(\"#orglistSelector\").length === 0) {\n          return false;\n        }\n\n        var self = this;\n        this.setUserOrgs();\n        this.orgTool.init(function (data) {\n          if (data.error) {\n            self.errorCollection.orgs = i18next.t(\"Error occurred retrieving data from server.\");\n            self.fadeLoader();\n            return false;\n          } else {\n            self.errorCollection.orgs = \"\";\n          }\n\n          self.setTopLevelOrgs();\n          self.orgTool.populateUI(); //populate orgs dropdown UI\n\n          var hbOrgs = self.orgTool.getHereBelowOrgs(self.getUserOrgs()); //filter orgs UI based on user's orgs\n\n          self.orgTool.filterOrgs(hbOrgs);\n          self.initOrgsFilter();\n          self.initOrgsEvent();\n          self.fadeLoader();\n        });\n      },\n      siteFilterApplied: function siteFilterApplied() {\n        return this.currentTablePreference && this.currentTablePreference.filters && this.currentTablePreference.filters.orgs_filter_control && this.currentTablePreference.filters.orgs_filter_control.length;\n      },\n      initOrgsFilter: function initOrgsFilter() {\n        var orgFields = $(\"#userOrgs input[name='organization']\");\n        var fi = this.currentTablePreference ? this.currentTablePreference.filters : {};\n        var fa = fi && fi.orgs_filter_control ? fi.orgs_filter_control.split(\",\") : null;\n        orgFields.each(function () {\n          $(this).prop(\"checked\", false);\n\n          if (!fa) {\n            return true;\n          }\n\n          var oself = $(this),\n              val = oself.val();\n          fa = fa.map(function (item) {\n            return String(item);\n          });\n          oself.prop(\"checked\", fa.indexOf(String(val)) !== -1);\n        });\n\n        if (this.orgTool.getHereBelowOrgs(this.getUserOrgs()).length === 1) {\n          orgFields.prop(\"checked\", true);\n        }\n      },\n      initOrgsEvent: function initOrgsEvent() {\n        var ofields = $(\"#userOrgs input[name='organization']\");\n\n        if (ofields.length === 0) {\n          return false;\n        }\n\n        var self = this;\n        $(\"#orglistSelector .orgs-filter-warning\").popover();\n        $(\"body\").on(\"click\", function (e) {\n          if ($(e.target).closest(\"#orglistSelector\").length === 0) {\n            $(\"#orglistSelector\").removeClass(\"open\");\n          }\n        });\n        $(\"#orglist-dropdown\").on(\"click touchstart\", function () {\n          $(this).find(\".glyphicon-menu-up, .glyphicon-menu-down\").toggleClass(\"tnth-hide\"); //toggle menu up/down button\n\n          setTimeout(function () {\n            self.setOrgsMenuHeight(95);\n            self.clearFilterButtons();\n          }, 100);\n        });\n        /* attach orgs related events to UI components */\n\n        ofields.each(function () {\n          $(this).on(\"click touchstart\", function (e) {\n            e.stopPropagation();\n            var isChecked = $(this).is(\":checked\");\n            var childOrgs = self.orgTool.getHereBelowOrgs([$(this).val()]);\n\n            if (childOrgs && childOrgs.length) {\n              childOrgs.forEach(function (org) {\n                $(\"#userOrgs input[name='organization'][value='\" + org + \"']\").prop(\"checked\", isChecked);\n              });\n            }\n\n            self.setOrgsSelector({\n              selectAll: false,\n              clearAll: false,\n              close: false\n            });\n            self.setTablePreference(self.userId, self.tableIdentifier);\n            setTimeout(function () {\n              self.showLoader();\n              location.reload();\n            }, 150);\n          });\n        });\n        $(\"#orglist-selectall-ckbox\").on(\"click touchstart\", function (e) {\n          e.stopPropagation();\n          var orgsList = [];\n          self.setOrgsSelector({\n            selectAll: true,\n            clearAll: false,\n            close: false\n          });\n          $(\"#userOrgs input[name='organization']\").filter(\":visible\").each(function () {\n            if ($(this).css(\"display\") !== \"none\") {\n              $(this).prop(\"checked\", true);\n              orgsList.push($(this).val());\n            }\n          });\n          self.setTablePreference(self.userId, self.tableIdentifier); //pre-set user preference for filtering\n\n          if (orgsList.length > 0) {\n            setTimeout(function () {\n              self.showLoader();\n              location.reload();\n            }, 150);\n          }\n        });\n        $(\"#orglist-clearall-ckbox\").on(\"click touchstart\", function (e) {\n          e.stopPropagation();\n          self.clearOrgsSelection();\n          self.setOrgsSelector({\n            selectAll: false,\n            clearAll: true,\n            close: false\n          });\n          self.setTablePreference(self.userId, self.tableIdentifier);\n          setTimeout(function () {\n            self.showLoader();\n            location.reload();\n          }, 150);\n        });\n        $(\"#orglist-close-ckbox\").on(\"click touchstart\", function (e) {\n          e.stopPropagation();\n          self.setOrgsSelector({\n            selectAll: false,\n            clearAll: false,\n            close: true\n          });\n          $(\"#orglistSelector\").trigger(\"click\");\n          return false;\n        });\n      },\n      getInstrumentList: function getInstrumentList(callback) {\n        var self = this;\n\n        callback = callback || function () {};\n\n        _modules_TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstrumentsList(true, function (data) {\n          if (!data || data.error) {\n            callback({\n              error: true\n            });\n            return false;\n          }\n\n          var instrumentList = data;\n          var parentOrgList = self.orgTool.getUserTopLevelParentOrgs(self.getUserOrgs());\n\n          if (instrumentList && parentOrgList && parentOrgList.length > 0) {\n            var instrumentItems = [];\n            parentOrgList.forEach(function (o) {\n              if (instrumentList.hasOwnProperty(o)) {\n                instrumentList[o].forEach(function (n) {\n                  instrumentItems.push(n);\n                });\n              }\n            });\n            self.instruments.data = instrumentItems;\n\n            if (instrumentItems.length > 0) {\n              $(\".instrument-container\").hide();\n              var found = false;\n              instrumentItems.forEach(function (item) {\n                var instrumentContainer = $(\"#\" + item + \"_container\");\n                found = instrumentContainer.length > 0;\n\n                if (found) {\n                  instrumentContainer.show();\n                }\n              });\n\n              if (!found) {\n                $(\".instrument-container\").show();\n              }\n            }\n          }\n\n          callback();\n        });\n      },\n      setInstruments: function setInstruments(event) {\n        if (event.target.value && $(event.target).is(\":checked\")) {\n          this.instruments.selected = this.instruments.selected + (this.instruments.selected !== \"\" ? \"&\" : \"\") + \"instrument_id=\" + event.target.value;\n          return;\n        }\n\n        if ($(\"input[name=instrument]:checked\").length === 0) {\n          this.instruments.selected = \"\";\n        }\n      },\n      setDataType: function setDataType(event) {\n        this.instruments.showMessage = false;\n        this.instruments.dataType = event.target.value;\n      },\n      hasInstrumentsSelection: function hasInstrumentsSelection() {\n        return this.instruments.selected !== \"\" && this.instruments.dataType !== \"\";\n      },\n      handleDownloadModal: function handleDownloadModal() {\n        if ($(\"#dataDownloadModal\").length === 0) {\n          return false;\n        }\n\n        var self = this;\n        this.getInstrumentList(function () {\n          $(\"#dataDownloadModal\").on(\"shown.bs.modal\", function () {\n            //populate instruments list based on user's parent org\n            self.instruments.selected = \"\";\n            self.instruments.dataType = \"csv\";\n            $(\"#patientsInstrumentList\").addClass(\"ready\");\n            $(this).find(\"[name='instrument']\").prop(\"checked\", false);\n          });\n        });\n      },\n      clearOrgsSelection: function clearOrgsSelection() {\n        $(\"#userOrgs input[name='organization']\").prop(\"checked\", false);\n        this.clearFilterButtons();\n      },\n      getDefaultTablePreference: function getDefaultTablePreference() {\n        return {\n          sort_field: \"id\",\n          sort_order: \"desc\"\n        };\n      },\n      getTablePreference: function getTablePreference(userId, tableName, setFilter, setColumnSelections) {\n        if (this.currentTablePreference) {\n          return this.currentTablePreference;\n        }\n\n        var prefData = null,\n            self = this,\n            uid = userId || self.userId;\n        var tableIdentifier = tableName || self.tableIdentifier;\n        var tnthAjax = self.getDependency(\"tnthAjax\");\n        tnthAjax.getTablePreference(uid, tableIdentifier, {\n          \"sync\": true\n        }, function (data) {\n          if (!data || data.error) {\n            return false;\n          }\n\n          prefData = data || self.getDefaultTablePreference();\n          self.currentTablePreference = prefData;\n\n          if (setFilter) {\n            //set filter values\n            self.setTableFilters(uid);\n          }\n\n          if (setColumnSelections) {\n            //set column selection(s)\n            self.setColumnSelections();\n          }\n        });\n        return prefData;\n      },\n      setColumnSelections: function setColumnSelections() {\n        if (!this.sortFilterEnabled) {\n          return false;\n        }\n\n        var prefData = this.getTablePreference(this.userId, this.tableIdentifier);\n        var hasColumnSelections = prefData && prefData.filters && prefData.filters.column_selections;\n\n        if (!hasColumnSelections) {\n          return false;\n        }\n\n        var visibleColumns = $(\"#adminTable\").bootstrapTable(\"getVisibleColumns\");\n        visibleColumns.forEach(function (c) {\n          //hide visible columns\n          if (String(c.class).toLowerCase() === \"always-visible\") {\n            return true;\n          }\n\n          $(\"#adminTable\").bootstrapTable(\"hideColumn\", c.field);\n        });\n        prefData.filters.column_selections.forEach(function (column) {\n          //show column(s) based on preference\n          $(\".fixed-table-toolbar input[type='checkbox'][data-field='\" + column + \"']\").prop(\"checked\", true);\n          $(\"#adminTable\").bootstrapTable(\"showColumn\", column);\n        });\n      },\n      setTableFilters: function setTableFilters(userId) {\n        var prefData = this.currentTablePreference,\n            tnthAjax = this.getDependency(\"tnthAjax\");\n\n        if (!prefData) {\n          tnthAjax.getTablePreference(userId || this.userId, this.tableIdentifier, {\n            \"sync\": true\n          }, function (data) {\n            if (!data || data.error) {\n              return false;\n            }\n\n            prefData = data;\n          });\n        }\n\n        if (prefData && prefData.filters) {\n          //set filter values\n          var fname = \"\";\n\n          for (var item in prefData.filters) {\n            fname = \"#adminTable .bootstrap-table-filter-control-\" + item;\n\n            if ($(fname).length === 0) {\n              continue;\n            } //note this is based on the trigger event for filtering specify in the plugin\n\n\n            $(fname).val(prefData.filters[item]);\n            $(fname).trigger($(fname).get(0).tagName === \"INPUT\" ? \"keyup\" : \"change\");\n          }\n        }\n      },\n      setTablePreference: function setTablePreference(userId, tableName, sortField, sortOrder, filters) {\n        var tnthAjax = this.getDependency(\"tnthAjax\");\n        tableName = tableName || this.tableIdentifier;\n\n        if (!tableName) {\n          return false;\n        }\n\n        userId = userId || this.userId;\n        var data = this.getDefaultTablePreference();\n\n        if (sortField && sortOrder) {\n          data[\"sort_field\"] = sortField;\n          data[\"sort_order\"] = sortOrder;\n        } else {\n          //get selected sorted field information on UI\n          var sortedField = $(\"#adminTable th[data-field]\").has(\".sortable.desc, .sortable.asc\");\n\n          if (sortedField.length > 0) {\n            data[\"sort_field\"] = sortedField.attr(\"data-field\");\n            var sortedOrder = \"desc\";\n            sortedField.find(\".sortable\").each(function () {\n              if ($(this).hasClass(\"desc\")) {\n                sortedOrder = \"desc\";\n              } else if ($(this).hasClass(\"asc\")) {\n                sortedOrder = \"asc\";\n              }\n            });\n            data[\"sort_order\"] = sortedOrder;\n          }\n        }\n\n        var __filters = filters || {}; //get fields\n\n\n        if (Object.keys(__filters).length === 0) {\n          $(\"#adminTable .filterControl select, #adminTable .filterControl input\").each(function () {\n            if ($(this).val()) {\n              var field = $(this).closest(\"th\").attr(\"data-field\");\n              __filters[field] = $(this).get(0).nodeName.toLowerCase() === \"select\" ? $(this).find(\"option:selected\").text() : $(this).val();\n            }\n          });\n        } //get selected orgs from the filter list by site control\n\n\n        var selectedOrgs = \"\";\n        $(\"#userOrgs input[name='organization']\").each(function () {\n          if ($(this).is(\":checked\") && $(this).css(\"display\") !== \"none\") {\n            selectedOrgs += (selectedOrgs ? \",\" : \"\") + $(this).val();\n          }\n        });\n        __filters[\"orgs_filter_control\"] = selectedOrgs; //get column selections\n\n        __filters[\"column_selections\"] = [];\n        $(\".fixed-table-toolbar input[type='checkbox'][data-field]:checked\").each(function () {\n          __filters[\"column_selections\"].push($(this).attr(\"data-field\"));\n        });\n        data[\"filters\"] = __filters;\n\n        if (Object.keys(data).length > 0) {\n          tnthAjax.setTablePreference(userId, this.tableIdentifier, {\n            \"data\": JSON.stringify(data)\n          });\n          this.currentTablePreference = data;\n        }\n      },\n      getReportModal: function getReportModal(patientId, options) {\n        $(\"#patientReportModal\").modal(\"show\");\n        this.patientReports.loading = true;\n        var self = this,\n            tnthDates = self.getDependency(\"tnthDates\"),\n            tnthAjax = self.getDependency(\"tnthAjax\");\n        options = options || {};\n        tnthAjax.patientReport(patientId, options, function (data) {\n          self.patientReports.data = [];\n\n          if (!data || data.error) {\n            self.patientReports.message = i18next.t(\"Error occurred retrieving patient report\");\n            return false;\n          }\n\n          if (data[\"user_documents\"] && data[\"user_documents\"].length > 0) {\n            var existingItems = {},\n                count = 0;\n            var documents = data[\"user_documents\"].sort(function (a, b) {\n              //sort to get the latest first\n              return new Date(b.uploaded_at) - new Date(a.uploaded_at);\n            });\n            documents.forEach(function (item) {\n              var c = item[\"contributor\"];\n\n              if (c && !existingItems[c]) {\n                //only draw the most recent, same report won't be displayed\n                if (options.documentDataType && String(options.documentDataType).toLowerCase() !== String(c).toLowerCase()) {\n                  return false;\n                }\n\n                self.patientReports.data.push({\n                  contributor: item.contributor,\n                  fileName: item.filename,\n                  date: tnthDates.formatDateString(item.uploaded_at, \"iso\"),\n                  download: \"<a title='\" + i18next.t(\"Download\") + \"' href='\" + \"/api/user/\" + item[\"user_id\"] + \"/user_documents/\" + item[\"id\"] + \"'><i class='fa fa-download'></i></a>\"\n                });\n                existingItems[c] = true;\n                count++;\n              }\n            });\n\n            if (count > 1) {\n              $(\"#patientReportModal .modal-title\").text(i18next.t(\"Patient Reports\"));\n            } else {\n              $(\"#patientReportModal .modal-title\").text(i18next.t(\"Patient Report\"));\n            }\n\n            self.patientReports.message = \"\";\n            $(\"#patientReportContent .btn-all\").attr(\"href\", \"patient_profile/\" + patientId + \"#profilePatientReportTable\");\n          } else {\n            self.patientReports.message = i18next.t(\"No report data found.\");\n          }\n\n          setTimeout(function () {\n            self.patientReports.loading = false;\n          }, 550);\n        });\n      },\n      rowLinkEvent: function rowLinkEvent() {\n        $(\"#admin-table-body.data-link\").delegate(\"tr\", \"click\", function (e) {\n          if (e.target && e.target.tagName.toLowerCase() !== \"td\") {\n            if (e.target.tagName.toLowerCase() === \"a\" && e.target.click) {\n              return;\n            }\n          }\n\n          e.preventDefault();\n          e.stopPropagation();\n          var row = $(this).closest(\"tr\");\n\n          if (row.hasClass(\"deleted-user-row\") || row.hasClass(\"loading\")) {\n            return false;\n          }\n\n          if (!row.hasClass(\"no-records-found\")) {\n            $(\"#adminTable .popover\").popover(\"hide\");\n            document.location = $(this).closest(\"tr\").attr(\"data-link\");\n          }\n        });\n      },\n      deactivationEnabled: function deactivationEnabled() {\n        return $(\"#chkDeletedUsersFilter\").length > 0;\n      },\n      reactivateUser: function reactivateUser(userId) {\n        var tnthAjax = this.getDependency(\"tnthAjax\"),\n            self = this;\n\n        if (!this.isDeactivatedRow(userId)) {\n          return false;\n        }\n\n        $(\"#\" + self.ROW_ID_PREFIX + userId).addClass(\"loading\");\n        tnthAjax.reactivateUser(userId, {\n          \"async\": true\n        }, function (data) {\n          $(\"#\" + self.ROW_ID_PREFIX + userId).removeClass(\"loading\");\n\n          if (data.error) {\n            alert(data.error);\n            return;\n          }\n\n          self.handleReactivatedRow(userId);\n          setTimeout(function () {\n            self.handleDeletedUsersVis(); //reset rows displayed\n          }, 150);\n        });\n      },\n      deactivateUser: function deactivateUser(userId, hideRow, callback) {\n        callback = callback || function () {};\n\n        if (!userId) {\n          callback({\n            error: i18next.t(\"User id is required.\")\n          });\n          return false;\n        }\n\n        if (this.isDeactivatedRow(userId)) {\n          callback();\n          return false;\n        }\n\n        var tnthAjax = this.getDependency(\"tnthAjax\"),\n            self = this;\n        $(\"#\" + self.ROW_ID_PREFIX + userId).addClass(\"loading\");\n        tnthAjax.deactivateUser(userId, {\n          \"async\": true\n        }, function (data) {\n          $(\"#\" + self.ROW_ID_PREFIX + userId).removeClass(\"loading\");\n\n          if (data.error) {\n            callback({\n              error: data.error\n            });\n            alert(data.error);\n            return;\n          }\n\n          callback();\n\n          if (hideRow) {\n            $(\"#\" + self.ROW_ID_PREFIX + userId).fadeOut();\n          }\n\n          self.handleDeactivatedRow(userId);\n          setTimeout(function () {\n            self.handleDeletedUsersVis(); //reset rows displayed\n          }, 150);\n        });\n      },\n      getRowData: function getRowData(userId) {\n        if (!userId) {\n          return false;\n        }\n\n        return $(\"#adminTable\").bootstrapTable(\"getRowByUniqueId\", userId);\n      },\n      isDeactivatedRow: function isDeactivatedRow(userId) {\n        var rowData = this.getRowData(userId);\n        return rowData && String(rowData.activationstatus).toLowerCase() === \"deactivated\";\n      },\n      resetRowVisByActivationStatus: function resetRowVisByActivationStatus() {\n        var self = this;\n        $(\"#adminTable [data-index]\").each(function () {\n          var userId = $(this).attr(\"data-uniqueid\");\n\n          if (self.isDeactivatedRow(userId)) {\n            self.handleDeactivatedRowVis(userId);\n          } else {\n            self.handleReactivatedRowVis(userId);\n          }\n        });\n      },\n      updateFieldData: function updateFieldData(userId, data) {\n        if (!userId || !data) {\n          return false;\n        }\n\n        $(\"#adminTable\").bootstrapTable(\"updateCell\", data);\n      },\n      getRowIndex: function getRowIndex(userId) {\n        if (!userId) {\n          return false;\n        }\n\n        return $(\"#\" + this.ROW_ID_PREFIX + userId).attr(\"data-index\");\n      },\n      handleDeactivatedRow: function handleDeactivatedRow(userId) {\n        this.updateFieldData(userId, {\n          index: this.getRowIndex(userId),\n          field: \"activationstatus\",\n          value: \"deactivated\",\n          reinit: true\n        });\n        this.handleDeactivatedRowVis(userId);\n      },\n      handleDeactivatedRowVis: function handleDeactivatedRowVis(userId) {\n        if (!userId) {\n          return false;\n        }\n\n        var allowReactivate = $(\"#adminTable\").attr(\"data-allow-reactivate\");\n        $(\"#\" + this.ROW_ID_PREFIX + userId).addClass(\"deleted-user-row\").addClass(\"rowlink-skip\").find(\".deleted-button-cell\").html('<span class=\"text-display\">{inactivetext}</span><i data-user-id=\"{userid}\" aria-hidden=\"true\" title=\"Reactivate account\" class=\"fa fa-undo reactivate-icon {class}\"></i>'.replace(\"{class}\", allowReactivate ? \"\" : \"tnth-hide\").replace(\"{userid}\", userId).replace(\"{inactivetext}\", i18next.t(\"Inactive\"))).find(\"a.profile-link\").remove();\n\n        if (!this.showDeletedUsers) {\n          $(\"#\" + this.ROW_ID_PREFIX + userId).hide();\n        }\n      },\n      handleReactivatedRow: function handleReactivatedRow(userId) {\n        if (!userId) {\n          return false;\n        }\n\n        this.updateFieldData(userId, {\n          index: this.getRowIndex(userId),\n          field: \"activationstatus\",\n          value: \"activated\",\n          reinit: true\n        });\n        this.handleReactivatedRowVis(userId);\n      },\n      handleReactivatedRowVis: function handleReactivatedRowVis(userId) {\n        if (!userId) {\n          return false;\n        }\n\n        $(\"#data_row_\" + userId).removeClass(\"deleted-user-row\").removeClass(\"rowlink-skip\").find(\".deleted-button-cell\").html('<button id=\"btnDeleted{userid}\" data-user-id=\"{userid}\" type=\"button\" class=\"btn btn-default btn-delete-user\" data-original-title=\"\" title=\"\"><em>{buttontext}</em></button>'.replace(/\\{userid\\}/g, userId).replace(\"{buttontext}\", i18next.t(\"Deactivate\"))).append(\"<a class='profile-link'></a>\");\n\n        if (this.showDeletedUsers) {\n          $(\"#\" + this.ROW_ID_PREFIX + userId).hide();\n        }\n      }\n    }\n  });\n})();\n\n//# sourceURL=webpack:///./static/js/src/admin.js?");

/***/ }),

/***/ "./static/js/src/modules/CLINICAL_CODE_ENUM.js":
/*!*****************************************************!*\
  !*** ./static/js/src/modules/CLINICAL_CODE_ENUM.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  \"biopsy\": {\n    code: \"111\",\n    display: \"biopsy\"\n  },\n  \"pca_diag\": {\n    code: \"121\",\n    display: \"PCa diagnosis\"\n  },\n  \"pca_localized\": {\n    code: \"141\",\n    display: \"PCa localized diagnosis\"\n  }\n});\n\n//# sourceURL=webpack:///./static/js/src/modules/CLINICAL_CODE_ENUM.js?");

/***/ }),

/***/ "./static/js/src/modules/OrgTool.js":
/*!******************************************!*\
  !*** ./static/js/src/modules/OrgTool.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SYSTEM_IDENTIFIER_ENUM.js */ \"./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js\");\n/* harmony import */ var _TnthAjax_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TnthAjax.js */ \"./static/js/src/modules/TnthAjax.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  /*global i18next $ */\n  var OrgObj = function OrgObj(orgId, orgName, parentOrg) {\n    this.id = orgId;\n    this.name = orgName;\n    this.children = [];\n    this.parentOrgId = parentOrg;\n    this.isTopLevel = false;\n    this.language = null;\n    this.extension = [];\n  };\n\n  var OrgTool = function OrgTool() {\n    this.TOP_LEVEL_ORGS = [];\n    this.orgsList = {};\n    this.initialized = false;\n  };\n\n  OrgTool.prototype.init = function (callback) {\n    var self = this;\n\n    callback = callback || function () {};\n\n    if (sessionStorage.orgsData) {\n      var orgsData = JSON.parse(sessionStorage.orgsData);\n      self.populateOrgsList(orgsData);\n      callback(orgsData);\n    } else {\n      $.ajax({\n        type: \"GET\",\n        url: \"/api/organization\",\n        async: false\n      }).done(function (data) {\n        if (data && data.entry) {\n          self.populateOrgsList(data.entry);\n          sessionStorage.setItem(\"orgsData\", JSON.stringify(data.entry));\n          callback(data.entry);\n        }\n      }).fail(function (xhr) {\n        callback({\n          \"error\": xhr.responseText\n        });\n        _TnthAjax_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sendError(xhr, \"/api/organization\");\n      });\n    }\n  };\n\n  OrgTool.prototype.onLoaded = function (userId, doPopulateUI) {\n    if (userId) {\n      this.setUserId(userId);\n    }\n\n    if (doPopulateUI) {\n      this.populateUI();\n    }\n\n    $(\"#userOrgs input[name='organization']\").each(function () {\n      $(this).prop(\"checked\", false);\n    });\n    $(\"#clinics\").attr(\"loaded\", true);\n  };\n\n  OrgTool.prototype.setUserId = function (userId) {\n    $(\"#fillOrgs\").attr(\"userId\", userId);\n  };\n\n  OrgTool.prototype.getUserId = function () {\n    return $(\"#fillOrgs\").attr(\"userId\");\n  };\n\n  OrgTool.prototype.inArray = function (n, array) {\n    if (!n || !array || !Array.isArray(array)) {\n      return false;\n    }\n\n    var found = false;\n\n    for (var index = 0; !found && index < array.length; index++) {\n      found = String(array[index]) === String(n);\n    }\n\n    return found;\n  };\n\n  OrgTool.prototype.getElementParentOrg = function (o) {\n    var parentOrg;\n\n    if (!o) {\n      return false;\n    }\n\n    parentOrg = $(o).attr(\"data-parent-id\");\n\n    if (!parentOrg) {\n      parentOrg = $(o).closest(\".org-container[data-parent-id]\").attr(\"data-parent-id\");\n    }\n\n    return parentOrg;\n  };\n\n  OrgTool.prototype.getTopLevelOrgs = function () {\n    var ml = this.getOrgsList(),\n        orgList = [];\n\n    for (var org in ml) {\n      if (ml[org].isTopLevel) {\n        orgList.push(org);\n      }\n    }\n\n    return orgList;\n  };\n\n  OrgTool.prototype.getOrgsList = function () {\n    return this.orgsList;\n  };\n\n  OrgTool.prototype.getOrgName = function (orgId) {\n    var orgsList = this.getOrgsList();\n\n    if (orgId && orgsList.hasOwnProperty(orgId)) {\n      return orgsList[orgId].name;\n    }\n\n    return \"\";\n  };\n\n  OrgTool.prototype.filterOrgs = function (leafOrgs) {\n    leafOrgs = leafOrgs || [];\n\n    if (leafOrgs.length === 0) {\n      return false;\n    }\n\n    var self = this;\n    $(\"#fillOrgs input[name='organization']\").each(function () {\n      if (!self.inArray($(this).val(), leafOrgs)) {\n        $(this).hide();\n\n        if (self.orgsList[$(this).val()]) {\n          var l = $(this).closest(\"label\");\n\n          if (self.orgsList[$(this).val()].children.length === 0) {\n            l.hide();\n          } else {\n            l.addClass(\"data-display-only\");\n          }\n        }\n      }\n    });\n    var topList = self.getTopLevelOrgs();\n    topList.forEach(function (orgId) {\n      var allChildrenHidden = true;\n      $(\"#fillOrgs .org-container[data-parent-id='\" + orgId + \"']\").each(function () {\n        var subOrgs = $(this).find(\".org-container\");\n\n        if (subOrgs.length > 0) {\n          var allSubOrgsHidden = true;\n          subOrgs.each(function () {\n            var isVisible = false;\n            $(this).find(\"input[name='organization']\").each(function () {\n              if ($(this).is(\":visible\") || String($(this).css(\"display\")) !== \"none\") {\n                isVisible = true;\n                allChildrenHidden = false;\n              }\n            });\n\n            if (!isVisible) {\n              $(this).hide();\n            } else {\n              allSubOrgsHidden = false;\n            }\n          });\n\n          if (allSubOrgsHidden) {\n            $(this).children(\"label\").hide();\n          }\n        } else {\n          var ip = $(this).find(\"input[name='organization']\");\n\n          if (ip.length > 0) {\n            ip.each(function () {\n              if ($(this).is(\":visible\") || String($(this).css(\"display\")) !== \"none\") {\n                allChildrenHidden = false;\n              }\n            });\n          }\n        }\n      });\n\n      if (allChildrenHidden) {\n        $(\"#fillOrgs\").find(\"legend[orgid='\" + orgId + \"']\").hide();\n      }\n    });\n  };\n\n  OrgTool.prototype.findOrg = function (entry, orgId) {\n    var org;\n\n    if (!entry || !orgId) {\n      return false;\n    }\n\n    entry.forEach(function (item) {\n      if (!org) {\n        if (parseInt(item.id) === parseInt(orgId)) {\n          org = item;\n        }\n      }\n    });\n    return org;\n  };\n\n  OrgTool.prototype.getOrgName = function (orgId) {\n    var org = this.orgsList[orgId];\n\n    if (!org) {\n      return \"\";\n    }\n\n    return org.name;\n  };\n\n  OrgTool.prototype.populateOrgsList = function (items) {\n    if (Object.keys(this.orgsList).length > 0) {\n      return this.orgsList;\n    }\n\n    var entry = items,\n        self = this,\n        parentId,\n        orgsList = {};\n\n    if (!items) {\n      return false;\n    }\n\n    items.forEach(function (item) {\n      if (item.partOf) {\n        parentId = item.partOf.reference.split(\"/\").pop();\n\n        if (!orgsList[parentId]) {\n          var o = self.findOrg(entry, parentId);\n          orgsList[parentId] = new OrgObj(o.id, o.name);\n        }\n\n        orgsList[parentId].children.push(new OrgObj(item.id, item.name, parentId));\n\n        if (orgsList[item.id]) {\n          orgsList[item.id].parentOrgId = parentId;\n        } else {\n          orgsList[item.id] = new OrgObj(item.id, item.name, parentId);\n        }\n      } else {\n        if (!orgsList[item.id]) {\n          orgsList[item.id] = new OrgObj(item.id, item.name);\n        }\n\n        if (parseInt(item.id) !== 0) {\n          orgsList[item.id].isTopLevel = true;\n          self.TOP_LEVEL_ORGS.push(item.id);\n        }\n      }\n\n      if (item.extension) {\n        orgsList[item.id].extension = item.extension;\n      }\n\n      if (item.language) {\n        orgsList[item.id].language = item.language;\n      }\n\n      if (item.identifier) {\n        orgsList[item.id].identifier = item.identifier;\n        item.identifier.forEach(function (identifier) {\n          if (identifier.system === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shortname) {\n            orgsList[item.id].shortname = identifier.value;\n          }\n        });\n      }\n    });\n    items.forEach(function (item) {\n      if (item.partOf) {\n        parentId = item.partOf.reference.split(\"/\").pop();\n\n        if (orgsList[item.id]) {\n          orgsList[item.id].parentOrgId = parentId;\n        }\n      }\n    });\n\n    if (items.length > 0) {\n      this.initialized = true;\n    }\n\n    this.orgsList = orgsList;\n    return orgsList;\n  };\n\n  OrgTool.prototype.getShortName = function (orgId) {\n    var shortName = \"\";\n\n    if (!orgId) {\n      return shortName;\n    }\n\n    var orgsList = this.getOrgsList();\n    var orgItem = orgsList.hasOwnProperty(orgId) ? orgsList[orgId] : {};\n\n    if (orgItem.shortname) {\n      shortName = orgItem.shortname;\n    }\n\n    return shortName;\n  };\n\n  OrgTool.prototype.populateUI = function () {\n    if (sessionStorage.orgsHTML) {\n      $(\"#fillOrgs\").html(sessionStorage.orgsHTML);\n      return true;\n    }\n\n    var self = this,\n        container = $(\"#fillOrgs\"),\n        orgsList = this.orgsList,\n        parentContent = \"\";\n\n    var getState = function getState(item) {\n      if (!item.identifier) {\n        return \"\";\n      }\n\n      var s = \"\",\n          found = false;\n      item.identifier.forEach(function (i) {\n        if (!found && i.system === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].practice_region && i.value) {\n          s = i.value.split(\":\")[1];\n          found = true;\n        }\n      });\n      return s;\n    };\n\n    var keys = Object.keys(orgsList),\n        parentOrgsArray = [];\n    keys = keys.sort();\n    keys.forEach(function (org) {\n      //draw parent orgs first\n      if (orgsList[org].isTopLevel) {\n        parentOrgsArray.push(org);\n      }\n    });\n    parentOrgsArray = parentOrgsArray.sort(function (a, b) {\n      //sort parent orgs by name\n      var orgA = orgsList[a],\n          orgB = orgsList[b];\n\n      if (orgA.name < orgB.name) {\n        return -1;\n      }\n\n      if (orgA.name > orgB.name) {\n        return 1;\n      }\n\n      return 0;\n    });\n    var parentFragment = document.createDocumentFragment(),\n        parentDiv;\n    parentOrgsArray.forEach(function (org) {\n      parentDiv = document.createElement(\"div\");\n      parentDiv.setAttribute(\"id\", org + \"_container\");\n      var parentOrgItem = orgsList[org];\n      var orgShortName = parentOrgItem.shortname || parentOrgItem.name;\n      var parentState = getState(parentOrgItem);\n      var parentOrgName = parentOrgItem.name;\n\n      if (parentOrgItem.children.length) {\n        if ($(\"#userOrgs legend[orgId='\" + org + \"']\").length === 0) {\n          parentDiv.classList.add(\"parent-org-container\");\n          parentContent = \"<legend orgId=\\\"\".concat(org, \"\\\">\").concat(parentOrgName, \"</legend>\\n                        <input class=\\\"tnth-hide\\\" type=\\\"checkbox\\\" name=\\\"organization\\\" parent_org=\\\"true\\\" data-org-name=\\\"\").concat(parentOrgName, \"\\\" data-short-name=\\\"\").concat(orgShortName, \"\\\" id=\\\"\").concat(org, \"_org\\\" state=\\\"\").concat(parentState, \"\\\" value=\\\"\").concat(org, \"\\\" /></div>\");\n        }\n      } else {\n        if ($(\"#userOrgs label[id='org-label-\" + org + \"']\").length === 0) {\n          parentDiv.classList.add(\"parent-org-container\", \"parent-singleton\");\n          parentContent = \"<label id=\\\"org-label-\".concat(org, \"\\\" class=\\\"org-label\\\">\\n                        <input class=\\\"clinic\\\" type=\\\"checkbox\\\" name=\\\"organization\\\" parent_org=\\\"true\\\" id=\\\"\").concat(org, \"_org\\\" state=\\\"\").concat(parentState, \"\\\" value=\\\"\").concat(org, \"\\\"\\n                        data-parent-id=\\\"\").concat(org, \"\\\"  data-org-name=\\\"\").concat(parentOrgName, \"\\\" data-short-name=\\\"\").concat(orgShortName, \"\\\" data-parent-name=\\\"\").concat(parentOrgName, \"\\\"/><span>\").concat(parentOrgName, \"</span></label></div>\");\n        }\n      }\n\n      parentDiv.innerHTML = parentContent;\n      parentFragment.appendChild(parentDiv);\n    });\n    container.get(0).appendChild(parentFragment);\n    keys.forEach(function (org) {\n      //draw child orgs\n      if (orgsList[org].children.length > 0) {\n        // Fill in each child clinic\n        var childClinic = \"\";\n        var items = orgsList[org].children.sort(function (a, b) {\n          // sort child clinic in alphabetical order\n          if (a.name < b.name) {\n            return -1;\n          }\n\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          return 0;\n        });\n        items.forEach(function (item) {\n          var _parentOrgId = item.parentOrgId,\n              _parentOrg = orgsList[_parentOrgId];\n\n          var _isTopLevel = _parentOrg ? _parentOrg.isTopLevel : false;\n\n          var state = getState(orgsList[_parentOrgId]);\n          var topLevelOrgId = self.getTopLevelParentOrg(item.id);\n\n          if ($(\"#fillOrgs input[name='organization'][value='\" + item.id + \"']\").length > 0) {\n            return true;\n          }\n\n          var attrObj = {\n            dataAttributes: ' data-parent-id=\"' + topLevelOrgId + '\"  data-parent-name=\"' + orgsList[topLevelOrgId].name + '\" ',\n            containerClass: \"\",\n            textClass: \"\"\n          };\n\n          if (_isTopLevel) {\n            attrObj.dataAttributes = ' data-parent-id=\"' + _parentOrgId + '\"  data-parent-name=\"' + _parentOrg.name + '\" ';\n          }\n\n          if (orgsList[item.id].children.length > 0) {\n            if (_isTopLevel) {\n              attrObj.containerClass = \"sub-org-container\";\n              attrObj.textClass = \"text-muted\";\n            } else {\n              attrObj.textClass = \"text-muter\";\n            }\n          } else {\n            if (_isTopLevel) {\n              attrObj.textClass = \"text-muted singleton\";\n            }\n          }\n\n          childClinic = \"<div id=\\\"\".concat(item.id, \"_container\\\" \").concat(attrObj.dataAttributes, \" class=\\\"indent org-container \").concat(attrObj.containerClass, \"\\\">\\n                        <label id=\\\"org-label-\").concat(item.id, \"\\\" class=\\\"org-label \").concat(attrObj.textClass, \"\\\">\\n                        <input class=\\\"clinic\\\" type=\\\"checkbox\\\" name=\\\"organization\\\" id=\\\"\").concat(item.id, \"_org\\\" data-org-name=\\\"\").concat(item.name, \"\\\" data-short-name=\\\"\").concat(item.shortname || item.name, \"\\\" state=\\\"\").concat(state ? state : '', \"\\\" value=\\\"\").concat(item.id, \"\\\" \").concat(attrObj.dataAttributes, \" />\\n                        <span>\").concat(item.name, \"</span></label></div>\");\n          var parentOrgContainer = $(\"#\" + _parentOrgId + \"_container\");\n\n          if (parentOrgContainer.length > 0) {\n            parentOrgContainer.append(childClinic);\n          } else {\n            container.append(childClinic);\n          }\n        });\n      }\n    });\n    sessionStorage.setItem(\"orgsHTML\", container.html());\n\n    if (!container.text()) {\n      container.html(i18next.t(\"No organizations available\"));\n    }\n  };\n\n  OrgTool.prototype.getSelectedOrgTopLevelParentOrg = function () {\n    return this.getTopLevelParentOrg(this.getSelectedOrg().val());\n  };\n\n  OrgTool.prototype.getSelectedOrg = function () {\n    return $(\"#userOrgs input[name='organization']:checked\");\n  };\n\n  OrgTool.prototype.getUserTopLevelParentOrgs = function (uo) {\n    var parentList = [],\n        self = this;\n\n    if (!uo) {\n      return false;\n    }\n\n    if (uo.parentList) {\n      return uo.parentList;\n    }\n\n    uo.forEach(function (o) {\n      var p = self.getTopLevelParentOrg(o);\n\n      if (p && !self.inArray(p, parentList)) {\n        parentList.push(p);\n      }\n    });\n    uo.parentList = parentList;\n    return parentList;\n  };\n\n  OrgTool.prototype.getTopLevelParentOrg = function (currentOrg) {\n    var ml = this.getOrgsList(),\n        currentOrgItem = ml[currentOrg],\n        self = this;\n\n    if (!currentOrgItem) {\n      return false;\n    }\n\n    if (currentOrgItem.isTopLevel) {\n      return currentOrg;\n    }\n\n    if (currentOrgItem.parentOrgId) {\n      return self.getTopLevelParentOrg(currentOrgItem.parentOrgId);\n    }\n\n    return currentOrg;\n  };\n\n  OrgTool.prototype.getChildOrgs = function (orgs, orgList) {\n    orgList = orgList || [];\n\n    if (!orgs || !orgs.length) {\n      return orgList;\n    }\n\n    var mainOrgsList = this.getOrgsList(),\n        childOrgs = [];\n    orgs.forEach(function (org) {\n      var o = mainOrgsList[org.id];\n\n      if (!o) {\n        return true;\n      }\n\n      orgList.push(org.id);\n      var c = o.children ? o.children : null;\n\n      if (c && c.length) {\n        c.forEach(function (i) {\n          childOrgs.push(i);\n        });\n      }\n    });\n    return this.getChildOrgs(childOrgs, orgList);\n  };\n\n  OrgTool.prototype.getHereBelowOrgs = function (userOrgs) {\n    var mainOrgsList = this.getOrgsList(),\n        self = this,\n        here_below_orgs = [];\n\n    if (!userOrgs) {\n      var selectedOrg = this.getSelectedOrg();\n\n      if (selectedOrg.length > 0) {\n        userOrgs = [];\n        selectedOrg.each(function () {\n          userOrgs.push($(this).val());\n        });\n      }\n    }\n\n    userOrgs = userOrgs || [];\n    userOrgs.forEach(function (orgId) {\n      here_below_orgs.push(orgId);\n      var co = mainOrgsList[orgId],\n          cOrgs = self.getChildOrgs(co && co.children ? co.children : []);\n\n      if (cOrgs.length) {\n        here_below_orgs = here_below_orgs.concat(cOrgs);\n      }\n    });\n    return here_below_orgs;\n  };\n\n  OrgTool.prototype.morphPatientOrgs = function () {\n    var checkedOrgs = {},\n        orgs = $(\"#userOrgs input[name='organization']\");\n    orgs.each(function () {\n      $(this).closest(\"label\").addClass(\"radio-label\");\n\n      if ($(this).prop(\"checked\")) {\n        checkedOrgs[$(this).val()] = true;\n      }\n\n      $(this).attr(\"type\", \"radio\");\n\n      if (checkedOrgs[$(this).val()]) {\n        $(this).prop(\"checked\", true);\n      }\n    });\n    $(\"#userOrgs .noOrg-container\").hide();\n  };\n\n  return OrgTool;\n})());\n\n//# sourceURL=webpack:///./static/js/src/modules/OrgTool.js?");

/***/ }),

/***/ "./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js":
/*!*********************************************************!*\
  !*** ./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  \"external_study_id\": \"http://us.truenth.org/identity-codes/external-study-id\",\n  \"external_site_id\": \"http://us.truenth.org/identity-codes/external-site-id\",\n  \"practice_region\": \"http://us.truenth.org/identity-codes/practice-region\",\n  \"race\": \"http://hl7.org/fhir/StructureDefinition/us-core-race\",\n  \"race_system\": \"http://hl7.org/fhir/v3/Race\",\n  \"ethnicity\": \"http://hl7.org/fhir/StructureDefinition/us-core-ethnicity\",\n  \"ethnicity_system\": \"http://hl7.org/fhir/v3/Ethnicity\",\n  \"indigenous\": \"http://us.truenth.org/fhir/StructureDefinition/AU-NHHD-METeOR-id-291036\",\n  \"timezone\": \"http://hl7.org/fhir/StructureDefinition/user-timezone\",\n  \"language\": \"http://hl7.org/fhir/valueset/languages\",\n  \"language_system\": \"urn:ietf:bcp:47\",\n  \"shortname\": \"http://us.truenth.org/identity-codes/shortname\",\n  SNOMED_SYS_URL: \"http://snomed.info/sct\",\n  CLINICAL_SYS_URL: \"http://us.truenth.org/clinical-codes\",\n  CANCER_TREATMENT_CODE: \"118877007\",\n  NONE_TREATMENT_CODE: \"999\"\n});\n\n//# sourceURL=webpack:///./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js?");

/***/ }),

/***/ "./static/js/src/modules/TnthAjax.js":
/*!*******************************************!*\
  !*** ./static/js/src/modules/TnthAjax.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ \"./static/js/src/modules/Utility.js\");\n/* harmony import */ var _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TnthDate.js */ \"./static/js/src/modules/TnthDate.js\");\n/* harmony import */ var _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SYSTEM_IDENTIFIER_ENUM.js */ \"./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js\");\n/* harmony import */ var _CLINICAL_CODE_ENUM_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CLINICAL_CODE_ENUM.js */ \"./static/js/src/modules/CLINICAL_CODE_ENUM.js\");\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  /*global $ */\n  \"beforeSend\": function beforeSend() {\n    $.ajaxSetup({\n      beforeSend: function beforeSend(xhr, settings) {\n        if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {\n          xhr.setRequestHeader(\"X-CSRFToken\", $(\"#__CRSF_TOKEN\").val());\n        }\n      }\n    });\n  },\n  \"sendRequest\": function sendRequest(url, method, userId, params, callback) {\n    if (!url) {\n      return false;\n    }\n\n    var defaultParams = {\n      type: method ? method : \"GET\",\n      url: url,\n      attempts: 0,\n      max_attempts: 3,\n      contentType: \"application/json; charset=utf-8\",\n      dataType: \"json\",\n      sync: false,\n      timeout: 5000,\n      data: null,\n      useWorker: false,\n      async: true\n    };\n    params = params || defaultParams;\n    params = $.extend({}, defaultParams, params);\n    params.async = params.sync ? false : params.async;\n    var self = this;\n    var fieldHelper = this.FieldLoaderHelper,\n        targetField = params.targetField || null;\n\n    callback = callback || function () {};\n\n    params.attempts++;\n    fieldHelper.showLoader(targetField);\n\n    if (params.useWorker && window.Worker && !_Utility_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTouchDevice()) {\n      /*global isTouchDevice()*/\n      _Utility_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].initWorker(url, params, function (result) {\n        /*global initWorker*/\n        var data;\n\n        try {\n          data = JSON.parse(result);\n        } catch (e) {\n          callback({\n            error: \"Error occurred parsing data for \" + url\n          });\n          return false;\n        }\n\n        if (!data) {\n          callback({\n            \"error\": true,\n            \"data\": \"no data returned\"\n          });\n          fieldHelper.showError(targetField);\n        } else if (data.error) {\n          callback({\n            \"error\": true,\n            \"data\": data\n          });\n          self.sendError(data, url, userId, params);\n          fieldHelper.showError(targetField);\n        } else {\n          callback(data);\n          fieldHelper.showUpdate(targetField);\n        }\n      });\n      return true;\n    }\n\n    if (!params.cache) {\n      params.headers = {\n        \"cache-control\": \"no-cache\",\n        \"expires\": \"-1\",\n        \"pragma\": \"no-cache\"\n      };\n    }\n\n    $.ajax(params).done(function (data) {\n      params.attempts = 0;\n\n      if (data) {\n        fieldHelper.showUpdate(targetField);\n        callback(data);\n      } else {\n        fieldHelper.showError(targetField);\n        callback({\n          \"error\": true,\n          \"data\": \"no data returned\"\n        });\n      }\n    }).fail(function (xhr) {\n      if (params.attempts < params.max_attempts) {\n        (function (self, url, method, userId, params, callback) {\n          setTimeout(function () {\n            self.sendRequest(url, method, userId, params, callback);\n          }, 3000); //retry after 3 seconds\n        })(self, url, method, userId, params, callback);\n      } else {\n        params.attempts = 0;\n        fieldHelper.showError(targetField);\n        callback({\n          \"error\": true,\n          \"data\": xhr\n        });\n        self.sendError(xhr, url, userId, params);\n      }\n    });\n  },\n  \"sendError\": function sendError(xhr, url, userId, params) {\n    if (!xhr) {\n      return false;\n    }\n\n    var errorMessage = \"[Error occurred processing request]  status - \" + (parseInt(xhr.status) === 0 ? \"request timed out/network error\" : xhr.status) + \", response text - \" + (xhr.responseText ? xhr.responseText : \"no response text returned from server\");\n\n    if (params) {\n      try {\n        errorMessage += \" [data sent]: \" + JSON.stringify(params); //error can happen if for some reason the params are malformed\n      } catch (e) {\n        errorMessage += \" Error occurred transforming sent data: \" + e.message;\n      }\n    }\n\n    this.reportError(userId ? userId : \"Not available\", url, errorMessage, true);\n  },\n  \"reportError\": function reportError(userId, page_url, message, sync) {\n    //params need to contain the following: subject_id: User on which action is being attempted message: Details of the error event page_url: The page requested resulting in the error\n    var params = {};\n    page_url = page_url || window.location.href;\n    params.subject_id = userId || 0;\n    params.page_url = page_url;\n    params.message = \"Error generated in JS - \" + (message ? message.replace(/[\"']/g, \"\") : \"no detail available\"); //don't think we want to translate message sent back to the server here\n\n    console.log(\"Errors occurred.....\");\n    /*eslint no-console: off */\n\n    console.log(params);\n    /*global console*/\n\n    $.ajax({\n      type: \"GET\",\n      url: \"/report-error\",\n      contentType: \"application/json; charset=utf-8\",\n      cache: false,\n      async: sync ? false : true,\n      data: params\n    }).done(function () {}).fail(function () {});\n  },\n  \"FieldLoaderHelper\": {\n    delayDuration: 300,\n    showLoader: function showLoader(targetField) {\n      if (!targetField || targetField.length === 0) {\n        return false;\n      }\n\n      var el = $(\"#\" + (targetField.attr(\"data-save-container-id\") || targetField.attr(\"id\")) + \"_load\");\n      el.css(\"opacity\", 1);\n      el.addClass(\"loading\");\n    },\n    showUpdate: function showUpdate(targetField) {\n      var __timeout = this.delayDuration;\n\n      if (!targetField || targetField.length === 0) {\n        return false;\n      }\n\n      setTimeout(function () {\n        (function (targetField) {\n          var containerId = targetField.attr(\"data-save-container-id\") || targetField.attr(\"id\");\n          var errorField = $(\"#\" + containerId + \"_error\");\n          var successField = $(\"#\" + containerId + \"_success\");\n          var loadingField = $(\"#\" + containerId + \"_load\");\n          loadingField.removeClass(\"loading\");\n          errorField.text(\"\").css(\"opacity\", 0);\n          successField.text(i18next.t(\"success\"));\n          loadingField.animate({\n            \"opacity\": 0\n          }, __timeout, function () {\n            successField.animate({\n              \"opacity\": 1\n            }, __timeout, function () {\n              setTimeout(function () {\n                successField.animate({\n                  \"opacity\": 0\n                }, __timeout * 2);\n              }, __timeout * 2);\n            });\n          });\n        })(targetField);\n      }, __timeout);\n    },\n    showError: function showError(targetField) {\n      targetField = targetField || $(targetField);\n      var __timeout = this.delayDuration;\n\n      if (!targetField || targetField.length === 0) {\n        return false;\n      }\n\n      setTimeout(function () {\n        (function (targetField) {\n          var containerId = targetField.attr(\"data-save-container-id\") || targetField.attr(\"id\");\n          var errorField = $(\"#\" + containerId + \"_error\");\n          var successField = $(\"#\" + containerId + \"_success\");\n          var loadingField = $(\"#\" + containerId + \"_load\");\n          loadingField.removeClass(\"loading\");\n          errorField.text(i18next.t(\"Unable to update. System/Server Error.\"));\n          successField.text(\"\").css(\"opacity\", 0);\n          loadingField.animate({\n            \"opacity\": 0\n          }, __timeout, function () {\n            errorField.animate({\n              \"opacity\": 1\n            }, __timeout, function () {\n              setTimeout(function () {\n                errorField.animate({\n                  \"opacity\": 0\n                }, __timeout * 2);\n              }, __timeout * 2);\n            });\n          });\n        })(targetField);\n      }, __timeout);\n    }\n  },\n  \"getCurrentUser\": function getCurrentUser(callback, params) {\n    callback = callback || function () {};\n\n    if (sessionStorage.currentUser) {\n      callback(JSON.parse(sessionStorage.currentUser));\n    } else {\n      this.sendRequest(\"/api/me\", \"GET\", \"\", params, function (data) {\n        if (data && data.id) {\n          //make sure the necessary data is there before setting session\n          sessionStorage.setItem(\"currentUser\", JSON.stringify(data));\n        }\n\n        callback(data);\n      });\n    }\n  },\n  \"getStillNeededCoreData\": function getStillNeededCoreData(userId, sync, callback, entry_method) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User Id is required\")\n      });\n      return false;\n    }\n\n    var __url = \"/api/coredata/user/\" + userId + \"/still_needed\" + (entry_method ? \"?entry_method=\" + entry_method.replace(/\\_/g, \" \") : \"\");\n\n    this.sendRequest(__url, \"GET\", userId, {\n      sync: sync,\n      cache: true\n    }, function (data) {\n      if (!data) {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n        return false;\n      }\n\n      if (data.error) {\n        callback({\n          \"error\": i18next.t(\"unable to get needed core data\")\n        });\n        return false;\n      }\n\n      callback(data);\n    });\n  },\n  \"getRequiredCoreData\": function getRequiredCoreData(userId, sync, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User Id is required\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/coredata/user/\" + userId + \"/required\", \"GET\", userId, {\n      sync: sync,\n      cache: true\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          if (data.required) {\n            callback(data.required);\n          } else {\n            callback({\n              \"error\": i18next.t(\"no data returned\")\n            });\n          }\n        } else {\n          callback({\n            \"error\": i18next.t(\"unable to get required core data\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"getOptionalCoreData\": function getOptionalCoreData(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User Id is required\")\n      });\n      return false;\n    }\n\n    var __url = \"/api/coredata/user/\" + userId + \"/optional\",\n        sessionStorageKey = \"optionalCoreData_\" + userId;\n\n    if (sessionStorage.getItem(sessionStorageKey)) {\n      callback(JSON.parse(sessionStorage.getItem(sessionStorageKey)));\n    } else {\n      this.sendRequest(__url, \"GET\", userId, params, function (data) {\n        if (data) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"no data found\")\n          });\n        }\n      });\n    }\n  },\n  \"getPortalFooter\": function getPortalFooter(userId, sync, containerId, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback(\"<div class='error-message'>\" + i18next.t(\"User Id is required\") + \"</div>\");\n      return false;\n    }\n\n    this.sendRequest(\"/api/portal-footer-html/\", \"GET\", userId, {\n      sync: sync,\n      cache: true,\n      \"dataType\": \"html\"\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          if (containerId) {\n            $(\"#\" + containerId).html(data);\n          }\n\n          callback(data);\n        } else {\n          callback(\"<div class='error-message'>\" + i18next.t(\"Unable to retrieve portal footer html\") + \"</div>\");\n        }\n      } else {\n        callback(\"<div class='error-message'>\" + i18next.t(\"No data found\") + \"</div>\");\n      }\n    });\n  },\n  \"getOrgs\": function getOrgs(userId, params, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/organization\", \"GET\", userId, params, function (data) {\n      if (sessionStorage.demoOrgsData) {\n        callback(JSON.parse(sessionStorage.demoOrgsData));\n        return true;\n      }\n\n      if (!data.error) {\n        $(\".get-orgs-error\").html(\"\");\n        sessionStorage.setItem(\"demoOrgsData\", JSON.stringify(data));\n        callback(data);\n      } else {\n        var errorMessage = i18next.t(\"Server error occurred retrieving organization/clinic information.\");\n        $(\".get-orgs-error\").html(errorMessage);\n        callback({\n          \"error\": errorMessage\n        });\n      }\n    });\n  },\n  \"getConsent\": function getConsent(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/consent\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          $(\".get-consent-error\").html(\"\");\n          callback(data);\n          return true;\n        } else {\n          var errorMessage = i18next.t(\"Server error occurred retrieving consent information.\");\n          callback({\n            \"error\": errorMessage\n          });\n          $(\".get-consent-error\").html(errorMessage);\n          return false;\n        }\n      }\n    });\n  },\n  \"setConsent\": function setConsent(userId, params, status, sync, callback) {\n    callback = callback || function () {};\n\n    if (!userId && !params) {\n      callback({\n        \"error\": i18next.t(\"User id and parameters are required\")\n      });\n      return false;\n    }\n\n    var consented = this.hasConsent(userId, params.org, status);\n\n    var __url = \"/api/user/\" + userId + \"/consent\";\n\n    if (consented && !params.testPatient) {\n      callback({\n        \"error\": false\n      });\n      return;\n    }\n\n    var data = {};\n    data.user_id = userId;\n    data.organization_id = params.org;\n    data.agreement_url = params.agreementUrl;\n    data.staff_editable = String(params.staff_editable) !== \"null\" && String(params.staff_editable) !== \"undefined\" ? params.staff_editable : false;\n    data.include_in_reports = String(params.include_in_reports) !== \"null\" && String(params.include_in_reports) !== \"undefined\" ? params.include_in_reports : false;\n    data.send_reminders = String(params.send_reminders) !== \"null\" && String(params.send_reminders) !== \"undefined\" ? params.send_reminders : false;\n\n    if (params.acceptance_date) {\n      data.acceptance_date = params.acceptance_date;\n    }\n\n    this.sendRequest(__url, \"POST\", userId, {\n      sync: sync,\n      data: JSON.stringify(data)\n    }, function (data) {\n      if (!data.error) {\n        $(\".set-consent-error\").html(\"\");\n        callback(data);\n      } else {\n        var errorMessage = i18next.t(\"Server error occurred setting consent status.\");\n        callback({\n          \"error\": errorMessage\n        });\n        $(\".set-consent-error\").html(errorMessage);\n      }\n    });\n  },\n  deleteConsent: function deleteConsent(userId, params) {\n    if (!userId) {\n      return false;\n    }\n\n    params = params || {};\n    var consented = this.getAllValidConsent(userId, params.org);\n\n    if (!consented) {\n      return false;\n    }\n\n    var arrExcludedOrgIds = params.exclude ? params.exclude.split(\",\") : [];\n    var arrConsents = $.grep(consented, function (orgId) {\n      var inArray = $.grep(arrExcludedOrgIds, function (eOrg) {\n        return String(eOrg) === String(orgId);\n      });\n      return !inArray.length; //filter out org Id(s) that are in the array of org Ids to be excluded;\n    });\n    var self = this;\n    arrConsents.forEach(function (orgId) {\n      //delete all consents for the org\n      self.sendRequest(\"/api/user/\" + userId + \"/consent\", \"DELETE\", userId, {\n        data: JSON.stringify({\n          \"organization_id\": parseInt(orgId)\n        })\n      }, function (data) {\n        if (!data) {\n          return false;\n        }\n\n        if (!data.error) {\n          $(\".delete-consent-error\").html(\"\");\n        } else {\n          $(\".delete-consent-error\").html(i18next.t(\"Server error occurred removing consent.\"));\n        }\n      });\n    });\n  },\n  withdrawConsent: function withdrawConsent(userId, orgId, params, callback) {\n    callback = callback || function () {};\n\n    params = params || {};\n\n    if (!userId || !orgId) {\n      callback({\n        \"error\": i18next.t(\"User id and organization id are required.\")\n      });\n      return false;\n    }\n\n    var self = this,\n        arrConsent = [];\n    this.sendRequest(\"/api/user/\" + userId + \"/consent\", \"GET\", userId, params, function (data) {\n      if (data && data.consent_agreements && data.consent_agreements.length) {\n        arrConsent = $.grep(data.consent_agreements, function (item) {\n          var expired = _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDateDiff(String(item.expires));\n          /*global tnthDates */\n\n          return String(orgId) === String(item.organization_id) && !item.deleted && !(expired > 0) && String(item.status) === \"suspended\";\n        });\n      }\n\n      if (arrConsent.length) {\n        //don't send request if suspended consent already existed\n        callback({\n          \"data\": \"success\"\n        });\n        return false;\n      }\n\n      self.sendRequest(\"/api/user/\" + userId + \"/consent/withdraw\", \"POST\", userId, {\n        sync: params.sync,\n        data: JSON.stringify({\n          organization_id: orgId\n        })\n      }, function (data) {\n        if (data.error) {\n          callback({\n            \"error\": i18next.t(\"Error occurred setting suspended consent status.\")\n          });\n          return false;\n        }\n\n        callback(data);\n      });\n    });\n  },\n  getAllValidConsent: function getAllValidConsent(userId, orgId) {\n    if (!userId || !orgId) {\n      return false;\n    }\n\n    var consentedOrgIds = [];\n    this.sendRequest(\"/api/user/\" + userId + \"/consent\", \"GET\", userId, {\n      sync: true\n    }, function (data) {\n      if (!data || data.error || !data.consent_agreements || !data.consent_agreements.length) {\n        return consentedOrgIds;\n      }\n\n      consentedOrgIds = $.grep(data.consent_agreements, function (item) {\n        var expired = _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDateDiff(String(item.expires));\n        return !item.deleted && !(expired > 0) && (String(orgId).toLowerCase() === \"all\" || String(orgId) === String(item.organization_id));\n      });\n      consentedOrgIds = consentedOrgIds.map(function (item) {\n        return item.organization_id;\n      });\n      return consentedOrgIds;\n    });\n    return consentedOrgIds;\n  },\n  hasConsent: function hasConsent(userId, orgId, filterStatus) {\n    /****** NOTE - this will return the latest updated consent entry *******/\n    if (!userId || !orgId || String(filterStatus) === \"default\") {\n      return false;\n    }\n\n    var consentedOrgIds = [];\n\n    var __url = \"/api/user/\" + userId + \"/consent\",\n        self = this;\n\n    self.sendRequest(__url, \"GET\", userId, {\n      sync: true\n    }, function (data) {\n      if (!data || data.error || data.consent_agreements && data.consent_agreements.length === 0) {\n        return false;\n      }\n\n      consentedOrgIds = $.grep(data.consent_agreements, function (item) {\n        var expired = item.expires ? _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDateDiff(String(item.expires)) : 0;\n        /*global tnthDates */\n\n        return String(orgId) === String(item.organization_id) && !item.deleted && !(expired > 0) && item.staff_editable && item.send_reminders && item.include_in_reports;\n      });\n    });\n    return consentedOrgIds.length;\n  },\n  \"getDemo\": function getDemo(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    params = params || {};\n    var demoDataKey = \"demoData_\" + userId;\n\n    if (sessionStorage.getItem(demoDataKey)) {\n      callback(JSON.parse(sessionStorage.getItem(demoDataKey)));\n      return;\n    }\n\n    this.sendRequest(\"/api/demographics/\" + userId, \"GET\", userId, params, function (data) {\n      var errorMessage = \"\";\n\n      if (data.error) {\n        errorMessage = i18next.t(\"Server error occurred retrieving demographics information.\");\n        $(\".get-demo-error\").html(errorMessage);\n        callback({\n          \"error\": errorMessage\n        });\n        return false;\n      }\n\n      $(\".get-demo-error\").html(errorMessage);\n      sessionStorage.setItem(demoDataKey, JSON.stringify(data));\n      callback(data);\n    });\n  },\n  \"clearDemoSessionData\": function clearDemoSessionData(userId) {\n    sessionStorage.removeItem(\"demoData_\" + userId);\n  },\n  \"putDemo\": function putDemo(userId, toSend, targetField, sync, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User Id is required\")\n      });\n      return false;\n    }\n\n    this.clearDemoSessionData(userId);\n    this.sendRequest(\"/api/demographics/\" + userId, \"PUT\", userId, {\n      sync: sync,\n      data: JSON.stringify(toSend),\n      targetField: targetField\n    }, function (data) {\n      if (!data.error) {\n        $(\".put-demo-error\").html(\"\");\n      } else {\n        $(\".put-demo-error\").html(i18next.t(\"Server error occurred setting demographics information.\"));\n      }\n\n      callback(data);\n    });\n  },\n  \"getLocale\": function getLocale(userId) {\n    this.sendRequest(\"/api/demographics/\" + userId, \"GET\", userId, null, function (data) {\n      if (data) {\n        if (!data.error) {\n          if (data.communication) {\n            $(\"#profileLocaleTimezoneContainer .get-locale-error\").html(\"\");\n          }\n        } else {\n          $(\"#profileLocaleTimezoneContainer .get-locale-error\").html(i18next.t(\"Server error occurred retrieving locale information.\"));\n        }\n      }\n    });\n  },\n  \"hasTreatment\": function hasTreatment(data) {\n    if (!data || !data.entry || data.entry.length === 0) {\n      return false;\n    }\n\n    var sortedArray = data.entry.sort(function (a, b) {\n      // sort from newest to oldest based on lsat updated date\n      return new Date(b.resource.meta.lastUpdated) - new Date(a.resource.meta.lastUpdated);\n    });\n    var found = false;\n    sortedArray.forEach(function (item) {\n      if (found) {\n        return true;\n      }\n\n      var resourceItemCode = String(item.resource.code.coding[0].code);\n      var system = String(item.resource.code.coding[0].system);\n      var procId = item.resource.id;\n\n      if (resourceItemCode === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANCER_TREATMENT_CODE && system === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SNOMED_SYS_URL || resourceItemCode === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NONE_TREATMENT_CODE && system === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CLINICAL_SYS_URL) {\n        found = {\n          \"code\": resourceItemCode,\n          \"id\": procId\n        };\n      }\n    });\n    return found;\n  },\n  \"getTreatment\": function getTreatment(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/procedure\", \"GET\", userId, params, function (data) {\n      if (data.error) {\n        $(\"#userProcedures\").html(\"<span class='error-message'>\" + i18next.t(\"Error retrieving data from server\") + \"</span>\");\n      }\n\n      callback(data);\n    });\n  },\n  \"postTreatment\": function postTreatment(userId, started, treatmentDate, targetField) {\n    if (!userId) {\n      return false;\n    }\n\n    this.deleteTreatment(userId, targetField);\n    var code = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NONE_TREATMENT_CODE,\n        display = \"None\",\n        system = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CLINICAL_SYS_URL;\n\n    if (started) {\n      code = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANCER_TREATMENT_CODE;\n      display = \"Procedure on prostate\";\n      system = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SNOMED_SYS_URL;\n    }\n\n    if (!treatmentDate) {\n      var date = new Date();\n      treatmentDate = date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate(); //in yyyy-mm-dd format\n    }\n\n    var procID = [{\n      \"code\": code,\n      \"display\": display,\n      \"system\": system\n    }];\n    var procArray = {};\n    procArray.resourceType = \"Procedure\";\n    procArray.subject = {\n      \"reference\": \"Patient/\" + userId\n    };\n    procArray.code = {\n      \"coding\": procID\n    };\n    procArray.performedDateTime = treatmentDate ? treatmentDate : \"\";\n    this.postProc(userId, procArray, targetField);\n  },\n  deleteTreatment: function deleteTreatment(userId, targetField) {\n    var self = this;\n    this.sendRequest(\"/api/patient/\" + userId + \"/procedure\", \"GET\", userId, {\n      sync: true\n    }, function (data) {\n      if (!data || data.error) {\n        return false;\n      }\n\n      var treatmentData = self.hasTreatment(data);\n\n      if (!treatmentData) {\n        return false;\n      }\n\n      if (String(treatmentData.code) === String(_SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANCER_TREATMENT_CODE)) {\n        self.deleteProc(treatmentData.id, targetField, true);\n        return true;\n      }\n\n      self.deleteProc(treatmentData.id, targetField, true);\n    });\n  },\n  \"getProc\": function getProc(userId, newEntry, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/procedure\", \"GET\", userId, null, function (data) {\n      callback(data);\n    });\n  },\n  \"postProc\": function postProc(userId, toSend, targetField, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/procedure\", \"POST\", userId, {\n      data: JSON.stringify(toSend),\n      targetField: targetField\n    }, function (data) {\n      if (!data) {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n        return false;\n      }\n\n      if (data.error) {\n        var errorMessage = i18next.t(\"Server error occurred saving procedure/treatment information.\");\n        $(\"#userProcuedures .get-procs-error\").html(errorMessage);\n        callback({\n          error: errorMessage\n        });\n        return false;\n      }\n\n      $(\".get-procs-error\").html(\"\");\n      callback(data);\n    });\n  },\n  \"deleteProc\": function deleteProc(procedureId, targetField, sync) {\n    this.sendRequest(\"/api/procedure/\" + procedureId, \"DELETE\", null, {\n      sync: sync,\n      targetField: targetField\n    }, function (data) {\n      if (!data.error) {\n        $(\".del-procs-error\").html(\"\");\n      } else {\n        $(\".del-procs-error\").html(i18next.t(\"Server error occurred removing procedure/treatment information.\"));\n      }\n    });\n  },\n  \"getRoleList\": function getRoleList(params, callback) {\n    this.sendRequest(\"/api/roles\", \"GET\", null, params, function (data) {\n      callback = callback || function () {};\n\n      if (!data.error) {\n        callback(data);\n      } else {\n        var errorMessage = i18next.t(\"Server error occurred retrieving roles information.\");\n        $(\".get-roles-error\").html(errorMessage);\n        callback({\n          \"error\": errorMessage\n        });\n      }\n    });\n  },\n  \"getRoles\": function getRoles(userId, callback, params) {\n    callback = callback || function () {};\n\n    var sessionStorageKey = \"userRole_\" + userId;\n\n    if (sessionStorage.getItem(sessionStorageKey)) {\n      var data = JSON.parse(sessionStorage.getItem(sessionStorageKey));\n      callback(data);\n    } else {\n      this.sendRequest(\"/api/user/\" + userId + \"/roles\", \"GET\", userId, params, function (data) {\n        if (data) {\n          if (!data.error) {\n            $(\".get-roles-error\").html(\"\");\n            sessionStorage.setItem(sessionStorageKey, JSON.stringify(data));\n            callback(data);\n          } else {\n            var errorMessage = i18next.t(\"Server error occurred retrieving user role information.\");\n            $(\".get-roles-error\").html(errorMessage);\n            callback({\n              \"error\": errorMessage\n            });\n          }\n        }\n      });\n    }\n  },\n  \"removeCachedRoles\": function removeCachedRoles(userId) {\n    sessionStorage.removeItem(\"userRole_\" + userId);\n  },\n  \"putRoles\": function putRoles(userId, toSend, targetField, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User Id is required.\")\n      });\n      return false;\n    }\n\n    this.removeCachedRoles(userId);\n    this.sendRequest(\"/api/user/\" + userId + \"/roles\", \"PUT\", userId, {\n      data: JSON.stringify(toSend),\n      targetField: targetField\n    }, function (data) {\n      if (!data || data.error) {\n        var errorMessage = i18next.t(\"Server error occurred setting user role information.\");\n        $(\".put-roles-error\").html(errorMessage);\n        callback({\n          error: errorMessage\n        });\n        return;\n      }\n\n      $(\".put-roles-error\").html(\"\");\n      sessionStorage.setItem(\"userRole_\" + userId, \"\");\n      callback(data);\n    });\n  },\n  \"deleteRoles\": function deleteRoles(userId, toSend) {\n    if (!userId) {\n      return false;\n    }\n\n    this.removeCachedRoles(userId);\n    this.sendRequest(\"/api/user/\" + userId, \"GET\", userId, {\n      data: JSON.stringify(toSend)\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          $(\".delete-roles-error\").html(\"\");\n        } else {\n          $(\".delete-roles-error\").html(i18next.t(\"Server error occurred deleting user role.\"));\n        }\n      }\n    });\n  },\n  \"getClinical\": function getClinical(userId, params, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/clinical\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          $(\".get-clinical-error\").html(\"\");\n          callback(data);\n        } else {\n          var errorMessage = i18next.t(\"Server error occurred retrieving clinical data.\");\n          $(\".get-clinical-error\").html(errorMessage);\n          callback({\n            \"error\": errorMessage\n          });\n        }\n      }\n    });\n  },\n  \"getObservationId\": function getObservationId(userId, code) {\n    if (!userId) {\n      return false;\n    }\n\n    var obId = \"\",\n        _code = \"\";\n    this.sendRequest(\"/api/patient/\" + userId + \"/clinical\", \"GET\", userId, {\n      sync: true\n    }, function (data) {\n      if (!data || data.error || !data.entry) {\n        return obId;\n      }\n\n      data.entry.forEach(function (item) {\n        if (!obId) {\n          _code = item.content.code.coding[0].code;\n\n          if (String(_code) === String(code)) {\n            obId = item.content.id;\n          }\n        }\n      });\n    });\n    return obId;\n  },\n  \"postClinical\": function postClinical(userId, toCall, toSend, status, targetField, params, callback) {\n    if (!userId) {\n      return false;\n    }\n\n    params = params || {};\n    var code = \"\",\n        display = \"\";\n\n    if (_CLINICAL_CODE_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].hasOwnProperty(String(toCall).toLowerCase())) {\n      var match = _CLINICAL_CODE_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"][toCall];\n      code = match.code;\n      display = match.display;\n    }\n\n    if (!code) {\n      return false;\n    }\n\n    var self = this;\n    var system = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CLINICAL_SYS_URL;\n    var method = \"POST\";\n    var url = \"/api/patient/\" + userId + \"/clinical\";\n    var obsCode = [{\n      \"code\": code,\n      \"display\": display,\n      \"system\": system\n    }];\n    var obsArray = {};\n    obsArray.resourceType = \"Observation\";\n    obsArray.code = {\n      \"coding\": obsCode\n    };\n    obsArray.issued = params.issuedDate ? params.issuedDate : \"\";\n    obsArray.status = status ? status : \"\";\n    obsArray.valueQuantity = {\n      \"units\": \"boolean\",\n      \"value\": toSend\n    };\n\n    if (params.performer) {\n      obsArray.performer = params.performer;\n    }\n\n    var obsId = self.getObservationId(userId, code);\n\n    if (obsId) {\n      method = \"PUT\";\n      url = url + \"/\" + obsId;\n    }\n\n    callback = callback || function () {};\n\n    this.sendRequest(url, method, userId, {\n      data: JSON.stringify(obsArray),\n      targetField: targetField\n    }, function (data) {\n      if (!data || data.error) {\n        var errorMessage = i18next.t(\"Server error occurred updating clinical data.\");\n        $(\".post-clinical-error\").html(errorMessage).show();\n        callback({\n          error: errorMessage\n        });\n        return;\n      }\n\n      $(\".post-clinical-error\").html(\"\").hide();\n      callback(data);\n    });\n  },\n  \"getTermsUrl\": function getTermsUrl(sync, callback) {\n    /*global i18next */\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/tou\", \"GET\", null, {\n      sync: sync\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          $(\".get-tou-error\").html(\"\");\n\n          if (data.url) {\n            $(\"#termsURL\").attr(\"data-url\", data.url);\n            $(\"#termsCheckbox_default .terms-url\").attr(\"href\", data.url);\n            callback({\n              \"url\": data.url\n            });\n          } else {\n            callback({\n              \"error\": i18next.t(\"no url returned\")\n            });\n          }\n        } else {\n          $(\".get-tou-error\").html(i18next.t(\"Server error occurred retrieving tou url.\"));\n          callback({\n            \"error\": i18next.t(\"Server error\")\n          });\n        }\n      }\n    });\n  },\n  \"getInstrumentsList\": function getInstrumentsList(sync, callback) {\n    //return instruments list by organization(s)\n    callback = callback || function () {};\n\n    this.sendRequest(\"api/questionnaire_bank\", \"GET\", null, {\n      sync: sync\n    }, function (data) {\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"error retrieving instruments list\")\n        });\n        return;\n      }\n\n      if (!data.entry || !data.entry.length) {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n        return;\n      }\n\n      var qList = {};\n      data.entry.forEach(function (item) {\n        if (item.organization) {\n          var orgID = item.organization.reference.split(\"/\")[2];\n\n          if (!qList[orgID]) {\n            qList[orgID] = []; //don't assign orgID to object if it was already present\n          }\n\n          if (item.questionnaires) {\n            item.questionnaires.forEach(function (q) {\n              /*\n               * add instrument name to instruments array for the org - will not add if it is already in the array\n               * NOTE: inArray returns -1 if the item is NOT in the array\n               */\n              if ($.inArray(q.questionnaire.display, qList[orgID]) === -1) {\n                qList[orgID].push(q.questionnaire.display);\n              }\n            });\n          }\n        }\n      });\n      callback(qList);\n    });\n  },\n  \"getTerms\": function getTerms(userId, type, sync, callback, params) {\n    callback = callback || function () {};\n\n    params = params || {};\n    var url = \"/api/user/{userId}/tou{type}{all}\".replace(\"{userId}\", userId).replace(\"{type}\", type ? \"/\" + type : \"\").replace(\"{all}\", params.hasOwnProperty(\"all\") ? \"?all=true\" : \"\");\n    this.sendRequest(url, \"GET\", userId, {\n      sync: sync\n    }, function (data) {\n      if (!data || data.error) {\n        var errorMessage = i18next.t(\"Server error occurred retrieving tou data.\");\n        $(\".get-tou-error\").html(errorMessage);\n        callback({\n          \"error\": errorMessage\n        });\n        return;\n      }\n\n      $(\".get-tou-error\").html(\"\");\n      callback(data);\n    });\n  },\n  \"postTermsByUser\": function postTermsByUser(userId, toSend, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/user/\" + userId + \"/tou/accepted\", \"POST\", userId, {\n      data: JSON.stringify(toSend)\n    }, function (data) {\n      if (!data || data.error) {\n        $(\".post-tou-error\").html(i18next.t(\"Server error occurred saving terms of use information.\"));\n        callback(data);\n        return;\n      }\n\n      $(\".post-tou-error\").html(\"\");\n      callback(data);\n    });\n  },\n  \"postTerms\": function postTerms(toSend, targetField, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/tou/accepted\", \"POST\", null, {\n      data: JSON.stringify(toSend),\n      targetField: targetField\n    }, function (data) {\n      if (!data || data.error) {\n        var errorMessage = i18next.t(\"Server error occurred saving terms of use information.\");\n        $(\".post-tou-error\").html(errorMessage);\n        callback({\n          error: errorMessage\n        });\n        return;\n      }\n\n      $(\".post-tou-error\").html(\"\");\n      callback(data);\n    });\n  },\n  \"accessUrl\": function accessUrl(userId, sync, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/access_url\", \"GET\", userId, {\n      sync: sync\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback({\n            url: data.access_url\n          });\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving access url.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"invite\": function invite(userId, data, callback) {\n    callback = callback || function () {};\n\n    if (!data) {\n      callback({\n        \"error\": i18next.t(\"Invite data are required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/invite\", \"POST\", userId, {\n      \"contentType\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n      \"data\": data,\n      \"dataType\": \"html\"\n    }, function (data) {\n      if (data) {\n        callback(data);\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"passwordReset\": function passwordReset(userId, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/password_reset\", \"POST\", userId, {\n      \"contentType\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred sending password reset request.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"assessmentStatus\": function assessmentStatus(userId, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/assessment-status\", \"GET\", userId, null, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving assessment status.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"updateAssessment\": function updateAssessment(userId, data, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    if (!data) {\n      callback({\n        \"error\": i18next.t(\"Questionnaire response data is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/assessment\", \"PUT\", userId, {\n      data: JSON.stringify(data)\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving assessment list.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"assessmentList\": function assessmentList(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/assessment\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving assessment list.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"assessmentReport\": function assessmentReport(userId, instrumentId, callback) {\n    callback = callback || function () {};\n\n    if (!userId || !instrumentId) {\n      callback({\n        error: i18next.t(\"User id and instrument Id are required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/assessment/\" + instrumentId, \"GET\", userId, null, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving assessment report.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"getCurrentQB\": function getCurrentQB(userId, completionDate, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    params = params || {};\n    this.sendRequest(\"/api/user/\" + userId + \"/questionnaire_bank\", \"GET\", userId, {\n      data: {\n        as_of_date: completionDate\n      },\n      sync: params.sync\n    }, function (data) {\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred retrieving current questionnaire bank for user.\")\n        });\n        return false;\n      }\n\n      callback(data);\n    });\n  },\n  \"patientReport\": function patientReport(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/user_documents?document_type=PatientReport\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving patient report.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"setTablePreference\": function setTablePreference(userId, tableName, params, callback) {\n    callback = callback || function () {};\n\n    params = params || {};\n\n    if (!userId || !tableName) {\n      callback({\n        error: \"User Id and table name is required for setting preference.\"\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/table_preferences/\" + tableName, \"PUT\", userId, {\n      \"data\": params.data,\n      \"sync\": params.sync\n    }, function (data) {\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred setting table preference.\")\n        });\n        return false;\n      }\n\n      callback(data);\n    });\n  },\n  \"getTablePreference\": function getTablePreference(userId, tableName, params, callback) {\n    params = params || function () {};\n\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: \"User Id is required for setting preference.\"\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/table_preferences/\" + tableName, \"GET\", userId, params, function (data) {\n      if (data && data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred setting table preference.\")\n        });\n        return;\n      }\n\n      callback(data);\n    });\n  },\n  \"emailLog\": function emailLog(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/messages\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving email audit entries.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"auditLog\": function auditLog(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/audit\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving audit log.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"setting\": function setting(key, userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!key) {\n      callback({\n        \"error\": i18next.t(\"configuration key is required.\")\n      });\n      return false;\n    }\n\n    params = params || {};\n    this.sendRequest(\"/api/settings/\" + key, \"GET\", userId, {\n      \"sync\": params.sync\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving content for configuration key.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"deactivateUser\": function deactivateUser(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId, \"DELETE\", userId, params || {}, function (data) {\n      callback = callback || function () {};\n\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred deactivating user.\")\n        });\n        return;\n      }\n\n      callback(data);\n    });\n  },\n  \"reactivateUser\": function reactivateUser(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/reactivate\", \"POST\", userId, params || {}, function (data) {\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred reactivating user.\")\n        });\n        return;\n      }\n\n      callback(data);\n    });\n  },\n  \"getConfigurationByKey\": function getConfigurationByKey(configVar, params, callback) {\n    callback = callback || function () {};\n\n    if (!configVar) {\n      callback({\n        \"error\": i18next.t(\"configuration variable name is required.\")\n      });\n      return false;\n    }\n\n    var sessionConfigKey = \"config_\" + configVar;\n\n    if (sessionStorage.getItem(sessionConfigKey)) {\n      var data = JSON.parse(sessionStorage.getItem(sessionConfigKey));\n      callback(data);\n      return true;\n    }\n\n    this.sendRequest(\"/api/settings/\" + configVar, \"GET\", null, params || {}, function (data) {\n      if (!data) {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n        return;\n      }\n\n      callback(data);\n      sessionStorage.setItem(sessionConfigKey, JSON.stringify(data));\n    });\n  },\n  \"getConfiguration\": function getConfiguration(userId, params, callback) {\n    callback = callback || function () {};\n\n    var sessionConfigKey = \"settings_\" + userId;\n\n    if (sessionStorage.getItem(sessionConfigKey)) {\n      var data = JSON.parse(sessionStorage.getItem(sessionConfigKey));\n      callback(data);\n      return;\n    }\n\n    this.sendRequest(\"/api/settings\", \"GET\", userId, params || {}, function (data) {\n      if (data) {\n        callback(data);\n        sessionStorage.setItem(sessionConfigKey, JSON.stringify(data));\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"getEmailReady\": function getEmailReady(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/email_ready\", \"GET\", userId, params, function (data) {\n      callback(data);\n    });\n  }\n});\n\n//# sourceURL=webpack:///./static/js/src/modules/TnthAjax.js?");

/***/ }),

/***/ "./static/js/src/modules/TnthDate.js":
/*!*******************************************!*\
  !*** ./static/js/src/modules/TnthDate.js ***!
  \*******************************************/
/*! exports provided: default, validateDateInputFields */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateDateInputFields\", function() { return validateDateInputFields; });\nvar tnthDates = {\n  /*global i18next */\n\n  /** validateDateInputFields  check whether the date is a sensible date in month, day and year fields.\n   ** params: month, day and year fields and error field ID\n   ** NOTE this can replace the custom validation check; hook this up to the onchange/blur event of birthday field\n   ** work better in conjunction with HTML5 native validation check on the field e.g. required, pattern match  ***/\n  \"validateDateInputFields\": function validateDateInputFields(m, d, y, errorFieldId) {\n    if (!m || !d || !y) {\n      return false;\n    }\n\n    m = parseInt(m);\n    d = parseInt(d);\n    y = parseInt(y);\n    var errorField = $(\"#\" + errorFieldId);\n\n    if (!isNaN(m) && !isNaN(d) && !isNaN(y)) {\n      var today = new Date();\n      var date = new Date(y, m - 1, d);\n\n      if (!(date.getFullYear() === y && date.getMonth() + 1 === m && date.getDate() === d)) {\n        // Check to see if this is a real date\n        errorField.html(i18next.t(\"Invalid date. Please try again.\")).show();\n        return false;\n      } else if (date.setHours(0, 0, 0, 0) > today.setHours(0, 0, 0, 0)) {\n        errorField.html(i18next.t(\"Date must not be in the future. Please try again.\")).show();\n        return false; //shouldn't be in the future\n      } else if (y < 1900) {\n        errorField.html(i18next.t(\"Date must not be before 1900. Please try again.\")).show();\n        return false;\n      }\n\n      errorField.html(\"\").hide();\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Simply swaps: a/b/cdef to b/a/cdef (single & double digit permutations accepted...)\n   * Does not check for valid dates on input or output!\n   * @param currentDate string eg 7/4/1976\n   * @returns string eg 4/7/1976\n   */\n  \"swap_mm_dd\": function swap_mm_dd(currentDate) {\n    var splitDate = currentDate.split(\"/\");\n    return splitDate[1] + \"/\" + splitDate[0] + \"/\" + splitDate[2];\n  },\n  \"convertMonthNumeric\": function convertMonthNumeric(month) {\n    //Convert month string to numeric\n    if (!month) {\n      return \"\";\n    } else {\n      var month_map = {\n        \"jan\": 1,\n        \"feb\": 2,\n        \"mar\": 3,\n        \"apr\": 4,\n        \"may\": 5,\n        \"jun\": 6,\n        \"jul\": 7,\n        \"aug\": 8,\n        \"sep\": 9,\n        \"oct\": 10,\n        \"nov\": 11,\n        \"dec\": 12\n      };\n      var m = month_map[month.toLowerCase()];\n      return m ? m : \"\";\n    }\n  },\n  \"convertMonthString\": function convertMonthString(month) {\n    //Convert month string to text\n    if (!month) {\n      return \"\";\n    } else {\n      var numeric_month_map = {\n        1: \"Jan\",\n        2: \"Feb\",\n        3: \"Mar\",\n        4: \"Apr\",\n        5: \"May\",\n        6: \"Jun\",\n        7: \"Jul\",\n        8: \"Aug\",\n        9: \"Sep\",\n        10: \"Oct\",\n        11: \"Nov\",\n        12: \"Dec\"\n      };\n      var m = numeric_month_map[parseInt(month)];\n      return m ? m : \"\";\n    }\n  },\n  \"isDate\": function isDate(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Date]\" && !isNaN(obj.getTime());\n  },\n  \"displayDateString\": function displayDateString(m, d, y) {\n    var s = \"\";\n    s += d ? d : \"\";\n\n    if (m) {\n      s += (s ? \" \" : \"\") + this.convertMonthString(m);\n    }\n\n    if (y) {\n      s += (s ? \" \" : \"\") + y;\n    }\n\n    return s;\n  },\n\n  /***\n   * Calculates number of days between two dates. Used in mPOWEr for surgery/discharge\n   * @param startDate - required. Assumes YYYY-MM-DD. This is typically the date of surgery or discharge\n   * @param dateToCalc - optional. If empty, then assumes today's date\n   * @returns number of days\n   */\n  \"getDateDiff\": function getDateDiff(startDate, dateToCalc) {\n    if (!startDate) {\n      return 0;\n    }\n\n    var a = startDate.split(/[^0-9]/);\n    var dateTime = new Date(a[0], a[1] - 1, a[2]).getTime();\n    var d;\n\n    if (dateToCalc) {\n      var c = dateToCalc.split(/[^0-9]/);\n      d = new Date(c[0], c[1] - 1, c[2]).getTime();\n    } else {\n      // If no baseDate, then use today to find the number of days between dateToCalc and today\n      d = new Date().getTime();\n    }\n\n    return Math.floor((d - dateTime) / (1000 * 60 * 60 * 24)); // Round down to floor so we don't add an extra day if session is 12+ hours into the day\n  },\n  \"isValidDefaultDateFormat\": function isValidDefaultDateFormat(date, errorField) {\n    if (!date || date.length < 10) {\n      return false;\n    }\n\n    var dArray = $.trim(date).split(\" \");\n\n    if (dArray.length < 3) {\n      return false;\n    }\n\n    var day = parseInt(dArray[0]) + \"\",\n        month = dArray[1],\n        year = dArray[2];\n\n    if (day.length < 1 || month.length < 3 || year.length < 4) {\n      return false;\n    }\n\n    if (!/(0)?[1-9]|1\\d|2\\d|3[01]/.test(day)) {\n      return false;\n    }\n\n    if (!/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/i.test(month)) {\n      return false;\n    }\n\n    if (!/(19|20)\\d{2}/.test(year)) {\n      return false;\n    }\n\n    var dt = new Date(date);\n\n    if (!this.isDateObj(dt)) {\n      return false;\n    } else if (!this.isValidDate(year, this.convertMonthNumeric(month), day)) {\n      return false;\n    } else {\n      var today = new Date(),\n          errorMsg = \"\";\n\n      if (dt.getFullYear() < 1900) {\n        errorMsg = \"Year must be after 1900\";\n      } // Only allow if date is before today\n\n\n      if (dt.setHours(0, 0, 0, 0) > today.setHours(0, 0, 0, 0)) {\n        errorMsg = \"The date must not be in the future.\";\n      }\n\n      if (errorMsg) {\n        $(errorField).text(errorMsg);\n        return false;\n      } else {\n        $(errorField).text(\"\");\n        return true;\n      }\n    }\n  },\n  \"isDateObj\": function isDateObj(d) {\n    return Object.prototype.toString.call(d) === \"[object Date]\" && !isNaN(d.getTime());\n  },\n  \"isValidDate\": function isValidDate(y, m, d) {\n    var date = this.getDateObj(y, m, d),\n        convertedDate = this.getConvertedDate(date),\n        givenDate = this.getGivenDate(y, m, d);\n    return String(givenDate) === String(convertedDate);\n  },\n\n  /*\n   * method does not check for valid numbers, will return NaN if conversion failed\n   */\n  \"getDateObj\": function getDateObj(y, m, d, h, mi, s) {\n    h = h || 0;\n    mi = mi || 0;\n    s = s || 0;\n    return new Date(parseInt(y), parseInt(m) - 1, parseInt(d), parseInt(h), parseInt(mi), parseInt(s));\n  },\n  \"getConvertedDate\": function getConvertedDate(dateObj) {\n    if (dateObj && this.isDateObj(dateObj)) {\n      return \"\" + dateObj.getFullYear() + (dateObj.getMonth() + 1) + dateObj.getDate();\n    } else {\n      return \"\";\n    }\n  },\n  \"getGivenDate\": function getGivenDate(y, m, d) {\n    return \"\" + y + m + d;\n  },\n  \"formatDateString\": function formatDateString(dateString, format) {\n    //NB For dateString in ISO-8601 format date as returned from server e.g. '2011-06-29T16:52:48'\n    if (dateString) {\n      /* IOS (8601) date format test */\n      var IOSDateTest = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n      var d = new Date(dateString);\n      var day, month, year, hours, minutes, seconds, nd;\n\n      if (!IOSDateTest && !isNaN(d) && !this.isDateObj(d)) {\n        //note instantiating ios formatted date using Date object resulted in error in IE\n        return \"\";\n      }\n\n      if (IOSDateTest.test(dateString)) {\n        //IOS date, no need to convert again to date object, just parse it as is\n        //issue when passing it into Date object, the output date is inconsistent across from browsers\n        var dArray = $.trim($.trim(dateString).replace(/[\\.TZ:\\-]/gi, \" \")).split(\" \");\n        year = dArray[0];\n        month = dArray[1];\n        day = dArray[2];\n        hours = dArray[3] || \"0\";\n        minutes = dArray[4] || \"0\";\n        seconds = dArray[5] || \"0\";\n      } else {\n        day = d.getDate();\n        month = d.getMonth() + 1;\n        year = d.getFullYear();\n        hours = d.getHours();\n        minutes = d.getMinutes();\n        seconds = d.getSeconds();\n        nd = \"\";\n      }\n\n      var pad = function pad(n) {\n        n = parseInt(n);\n        return n < 10 ? \"0\" + n : n;\n      };\n\n      day = pad(day);\n      month = pad(month);\n      hours = pad(hours);\n      minutes = pad(minutes);\n      seconds = pad(seconds);\n\n      switch (format) {\n        case \"mm/dd/yyyy\":\n          nd = month + \"/\" + day + \"/\" + year;\n          break;\n\n        case \"mm-dd-yyyy\":\n          nd = month + \"-\" + day + \"-\" + year;\n          break;\n\n        case \"mm-dd-yyyy hh:mm:ss\":\n          nd = month + \"-\" + day + \"-\" + year + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"dd/mm/yyyy\":\n          nd = day + \"/\" + month + \"/\" + year;\n          break;\n\n        case \"dd/mm/yyyy hh:mm:ss\":\n          nd = day + \"/\" + month + \"/\" + year + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"dd-mm-yyyy\":\n          nd = day + \"-\" + month + \"-\" + year;\n          break;\n\n        case \"dd-mm-yyyy hh:mm:ss\":\n          nd = day + \"-\" + month + \"-\" + year + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"iso-short\":\n        case \"yyyy-mm-dd\":\n          nd = year + \"-\" + month + \"-\" + day;\n          break;\n\n        case \"iso\":\n        case \"yyyy-mm-dd hh:mm:ss\":\n          nd = year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"system\":\n          nd = year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + minutes + \":\" + seconds + \"Z\";\n          break;\n\n        case \"d M y hh:mm:ss\":\n          nd = this.displayDateString(month, day, year);\n          nd = nd + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"d M y\":\n          nd = this.displayDateString(month, day, year);\n          break;\n\n        default:\n          nd = this.displayDateString(month, day, year);\n          break;\n      }\n\n      return nd;\n    } else {\n      return \"\";\n    }\n  },\n  \"convertToLocalTime\": function convertToLocalTime(dateString) {\n    var convertedDate = \"\";\n\n    if (dateString) {\n      //assuming dateString is UTC date/time\n      var d = new Date(dateString);\n      var newDate = new Date(d.getTime() + d.getTimezoneOffset() * 60 * 1000);\n      var offset = d.getTimezoneOffset() / 60;\n      var hours = d.getHours();\n      newDate.setHours(hours - offset);\n      var options = {\n        year: \"numeric\",\n        day: \"numeric\",\n        month: \"short\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        hour12: false\n      };\n      convertedDate = newDate.toLocaleString(options);\n    }\n\n    return convertedDate;\n  },\n  getDateWithTimeZone: function getDateWithTimeZone(dObj) {\n    /*\n     * param is a date object - calculating UTC date using Date object's timezoneOffset method\n     * the method return offset in minutes, so need to convert it to miliseconds - adding the resulting offset will be the UTC date/time\n     */\n    var utcDate = new Date(dObj.getTime() + dObj.getTimezoneOffset() * 60 * 1000);\n    return this.formatDateString(utcDate, \"yyyy-mm-dd hh:mm:ss\"); //I believe this is a valid python date format, will save it as GMT date/time NOTE, conversion already occurred, so there will be no need for backend to convert it again\n  },\n  getTodayDateObj: function getTodayDateObj() {\n    //return object containing today's date/time information\n    var today = new Date();\n    var td = today.getDate(),\n        tm = today.getMonth() + 1,\n        ty = today.getFullYear();\n    var th = today.getHours(),\n        tmi = today.getMinutes(),\n        ts = today.getSeconds();\n    var gmtToday = this.getDateWithTimeZone(this.getDateObj(ty, tm, td, th, tmi, ts));\n\n    var pad = function pad(n) {\n      n = parseInt(n);\n      return n < 10 ? \"0\" + n : n;\n    };\n\n    return {\n      date: today,\n      day: td,\n      month: tm,\n      year: ty,\n      hour: th,\n      minute: tmi,\n      second: ts,\n      displayDay: pad(td),\n      displayMonth: pad(tm),\n      displayYear: pad(ty),\n      displayHour: pad(th),\n      displayMinute: pad(tmi),\n      displaySecond: pad(ts),\n      gmtDate: gmtToday\n    };\n  },\n  dateValidator: function dateValidator(day, month, year, restrictToPresent) {\n    //parameters: day, month and year values in numeric, boolean value for restrictToPresent, true if the date needs to be before today, false is the default\n    var errorMessage = \"\";\n\n    if (day && month && year) {\n      var iy = parseInt(year),\n          im = parseInt(month),\n          iid = parseInt(day),\n          date = new Date(iy, im - 1, iid);\n\n      if (date.getFullYear() === iy && date.getMonth() + 1 === im && date.getDate() === iid) {\n        // Check to see if this is a real date\n        if (iy < 1900) {\n          errorMessage = i18next.t(\"Year must be after 1900\");\n        }\n\n        if (restrictToPresent) {\n          // Only allow if date is before today\n          var today = new Date();\n\n          if (date.setHours(0, 0, 0, 0) > today.setHours(0, 0, 0, 0)) {\n            errorMessage = i18next.t(\"The date must not be in the future.\");\n          }\n        }\n      } else {\n        errorMessage = i18next.t(\"Invalid Date. Please enter a valid date.\");\n      }\n    } else {\n      errorMessage = i18next.t(\"Missing value.\");\n    }\n\n    return errorMessage;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (tnthDates);\nvar validateDateInputFields = tnthDates.validateDateInputFields;\n/* generic validation function for global use */\n\n//# sourceURL=webpack:///./static/js/src/modules/TnthDate.js?");

/***/ }),

/***/ "./static/js/src/modules/Utility.js":
/*!******************************************!*\
  !*** ./static/js/src/modules/Utility.js ***!
  \******************************************/
/*! exports provided: default, getExportFileName, getUrlParameter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getExportFileName\", function() { return getExportFileName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUrlParameter\", function() { return getUrlParameter; });\nvar Utility = function () {\n  var UtilityObj = function UtilityObj() {\n    /*global $ */\n    this.requestAttempts = 0;\n  };\n\n  UtilityObj.prototype.hasValue = function (val) {\n    return String(val) !== \"null\" && String(val) !== \"\" && String(val) !== \"undefined\";\n  };\n\n  UtilityObj.prototype.showMain = function () {\n    $(\"#mainHolder\").css({\n      \"visibility\": \"visible\",\n      \"-ms-filter\": \"progid:DXImageTransform.Microsoft.Alpha(Opacity=100)\",\n      \"filter\": \"alpha(opacity=100)\",\n      \"-moz-opacity\": 1,\n      \"-khtml-opacity\": 1,\n      \"opacity\": 1\n    });\n  };\n\n  UtilityObj.prototype.hideLoader = function (delay, time) {\n    if (delay) {\n      $(\"#loadingIndicator\").hide();\n      return;\n    }\n\n    setTimeout(function () {\n      $(\"#loadingIndicator\").fadeOut();\n    }, time || 200);\n  };\n\n  UtilityObj.prototype.loader = function (show) {\n    //landing page\n    if (document.getElementById(\"fullSizeContainer\")) {\n      this.hideLoader();\n      this.showMain();\n      return false;\n    }\n\n    if (show) {\n      $(\"#loadingIndicator\").show();\n      return;\n    }\n\n    if (!this.isDelayLoading()) {\n      var self = this;\n      setTimeout(function () {\n        self.showMain();\n      }, 100);\n      this.hideLoader(true, 350);\n    }\n  };\n\n  UtilityObj.prototype.isDelayLoading = function () {\n    /*global DELAY_LOADING*/\n    return typeof DELAY_LOADING !== \"undefined\" && DELAY_LOADING;\n  };\n\n  UtilityObj.prototype.isTouchDevice = function () {\n    return true === (\"ontouchstart\" in window || window.DocumentTouch && document instanceof window.DocumentTouch);\n  };\n\n  UtilityObj.prototype.getIEVersion = function () {\n    var match = navigator.userAgent.match(/(?:MSIE |Trident\\/.*; rv:)(\\d+)/);\n    return match ? parseInt(match[1]) : false;\n  };\n\n  UtilityObj.prototype.newHttpRequest = function (url, params, callBack) {\n    /* note: this function supports older version of IE (version <= 9) - jquery ajax calls errored in older IE version*/\n    this.requestAttempts++;\n    var xmlhttp,\n        self = this;\n\n    callBack = callBack || function () {};\n\n    if (window.XDomainRequest) {\n      /*global XDomainRequest */\n      xmlhttp = new XDomainRequest();\n\n      xmlhttp.onload = function () {\n        callBack(xmlhttp.responseText);\n      };\n    } else if (window.XMLHttpRequest) {\n      xmlhttp = new XMLHttpRequest();\n    } else {\n      xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      /*global ActiveXObject */\n    }\n\n    xmlhttp.onreadystatechange = function () {\n      if (xmlhttp.readyState === 4) {\n        if (xmlhttp.status === 200) {\n          callBack(xmlhttp.responseText);\n          self.requestAttempts = 0;\n          return;\n        }\n\n        if (self.requestAttempts < 3) {\n          setTimeout(function () {\n            self.newHttpRequest(url, params, callBack);\n          }, 3000);\n        } else {\n          callBack({\n            error: xmlhttp.responseText\n          });\n          self.loader();\n          self.requestAttempts = 0;\n        }\n      }\n    };\n\n    params = params || {};\n    xmlhttp.open(\"GET\", url, true);\n\n    for (var param in params) {\n      if (params.hasOwnProperty(param)) {\n        xmlhttp.setRequestHeader(param, params[param]);\n      }\n    }\n\n    if (!params.cache) {\n      xmlhttp.setRequestHeader(\"cache-control\", \"no-cache\");\n      xmlhttp.setRequestHeader(\"expires\", \"-1\");\n      xmlhttp.setRequestHeader(\"pragma\", \"no-cache\"); //legacy HTTP 1.0 servers and IE support\n    }\n\n    xmlhttp.send();\n  };\n\n  UtilityObj.prototype.ajaxRequest = function (url, params, callback) {\n    callback = callback || function () {};\n\n    if (!url) {\n      callback({\n        error: i18next.t(\"Url is required.\")\n      });\n      return false;\n    }\n\n    var defaults = {\n      url: url,\n      type: \"GET\",\n      contentType: \"text/plain\",\n      timeout: 5000,\n      cache: false\n    };\n    params = params || defaults;\n    params = $.extend({}, defaults, params);\n    this.requestAttempts++;\n    var uself = this;\n    $.ajax(params).done(function (data) {\n      callback(data);\n      uself.requestAttempts = 0;\n    }).fail(function () {\n      if (uself.requestAttempts <= 3) {\n        setTimeout(function () {\n          uself.ajaxRequest(url, params, callback);\n        }, 3000);\n      } else {\n        callback({\n          error: i18next.t(\"Error occurred processing request\")\n        });\n        /*global i18next */\n\n        uself.requestAttempts = 0;\n        uself.loader();\n      }\n    }).always(function () {\n      uself.loader();\n    });\n  };\n\n  UtilityObj.prototype.initWorker = function (url, params, callbackFunc) {\n    var worker = new Worker(\"/static/js/ajaxWorker.js\");\n    var self = this;\n    worker.postMessage({\n      url: url,\n      params: params\n    });\n    worker.addEventListener(\"message\", function (e) {\n      callbackFunc.call(self, e.data);\n      worker.terminate();\n    }, false);\n    worker.addEventListener(\"error\", function (e) {\n      console.log(\"Worker runtime error: Line \", e.lineno, \" in \", e.filename, \": \", e.message);\n      worker.terminate();\n    }, false);\n  };\n\n  UtilityObj.prototype.workerAllowed = function () {\n    return window.Worker && !this.isTouchDevice();\n  };\n\n  UtilityObj.prototype.getRequestMethod = function () {\n    return this.getIEVersion() ? this.newHttpRequest : this.ajaxRequest; //NOTE JQuery ajax request does not work for IE <= 9\n  };\n\n  UtilityObj.prototype.sendRequest = function (url, params, callback) {\n    /*generic function for sending GET ajax request, make use of worker if possible */\n    params = params || {};\n\n    if (params.useWorker && this.workerAllowed()) {\n      this.initWorker(url, params, callback);\n      return true;\n    }\n\n    var useFunc = this.getRequestMethod();\n    useFunc.call(this, url, params, function (data) {\n      callback.call(this, data);\n    });\n  };\n\n  UtilityObj.prototype.LRKeyEvent = function () {\n    var LR_INVOKE_KEYCODE = 187;\n\n    if ($(\".button--LR\").length > 0) {\n      $(\"html\").on(\"keydown\", function (e) {\n        if (parseInt(e.keyCode) === parseInt(LR_INVOKE_KEYCODE)) {\n          $(\".button--LR\").toggleClass(\"data-show\");\n        }\n      });\n    }\n  };\n\n  UtilityObj.prototype.getLoaderHTML = function (message) {\n    return \"<div class=\\\"loading-message-indicator\\\"><i class=\\\"fa fa-spinner fa-spin fa-2x\\\"></i>\".concat(message ? \"&nbsp;\" + message : \"\", \"</div>\");\n  };\n\n  UtilityObj.prototype.convertToNumericField = function (field) {\n    if (!field) {\n      return;\n    }\n\n    if (this.isTouchDevice()) {\n      field.each(function () {\n        $(this).prop(\"type\", \"tel\");\n      });\n    }\n  };\n\n  UtilityObj.prototype.isString = function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object String]\";\n  };\n\n  UtilityObj.prototype.disableHeaderFooterLinks = function () {\n    var links = $(\"#tnthNavWrapper a, #homeFooter a\").not(\"a[href*='logout']\").not(\"a.required-link\").not(\"a.home-link\");\n    links.addClass(\"disabled\");\n    links.prop(\"onclick\", null).off(\"click\");\n    links.on(\"click\", function (e) {\n      e.preventDefault();\n      return false;\n    });\n  };\n\n  UtilityObj.prototype.pad = function (n) {\n    n = parseInt(n);\n    return !isNaN(n) && n < 10 ? \"0\" + n : n;\n  };\n\n  UtilityObj.prototype.escapeHtml = function (text) {\n    \"use strict\";\n\n    if (text === null || text !== \"undefined\" || String(text).length === 0) {\n      return text;\n    }\n\n    return text.replace(/[\\\"&'\\/<>]/g, function (a) {\n      return {\n        '\"': \"&quot;\",\n        \"&\": \"&amp;\",\n        \"'\": \"&#39;\",\n        \"/\": \"&#47;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\"\n      }[a];\n    });\n  };\n\n  UtilityObj.prototype.containHtmlTags = function (text) {\n    if (!text) {\n      return false;\n    }\n\n    return /[<>]/.test(text);\n  };\n\n  UtilityObj.prototype.getExportFileName = function (prefix) {\n    var d = new Date();\n    return (prefix ? prefix : \"ExportList_\") + (\"00\" + d.getDate()).slice(-2) + (\"00\" + (d.getMonth() + 1)).slice(-2) + d.getFullYear();\n  };\n\n  UtilityObj.prototype.capitalize = function (str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  };\n\n  UtilityObj.prototype.restoreVis = function () {\n    var loadingElement = document.getElementById(\"loadingIndicator\"),\n        mainElement = document.getElementById(\"mainHolder\");\n\n    if (loadingElement) {\n      loadingElement.setAttribute(\"style\", \"display:none; visibility:hidden;\");\n    }\n\n    if (mainElement) {\n      mainElement.setAttribute(\"style\", \"visibility:visible;-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';filter:alpha(opacity=100); -moz-opacity:1; -khtml-opacity:1; opacity:1\");\n    }\n  };\n\n  UtilityObj.prototype.VueErrorHandling = function () {\n    if (typeof Vue === \"undefined\") {\n      return false;\n    }\n    /*global Vue */\n\n\n    var self = this;\n\n    Vue.config.errorHandler = function (err, vm, info) {\n      var handler,\n          current = vm;\n\n      if (vm.$options.errorHandler) {\n        handler = vm.$options.errorHandler;\n      } else {\n        while (!handler && current.$parent) {\n          current = current.$parent;\n          handler = current.$options.errorHandler;\n        }\n      }\n\n      self.restoreVis();\n\n      if (handler) {\n        handler.call(current, err, vm, info);\n        return;\n      }\n\n      console.log(err);\n    };\n  };\n\n  UtilityObj.prototype.extend = function (obj, extension) {\n    // Extend an object with an extension\n    for (var key in extension) {\n      if (extension.hasOwnProperty(key)) {\n        obj[key] = extension[key];\n      }\n    }\n\n    return obj;\n  };\n\n  UtilityObj.prototype.getUrlParameter = function (name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n    var results = regex.exec(location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1]);\n  };\n\n  UtilityObj.prototype.resetBrowserBackHistory = function (locationUrl, stateObject, title) {\n    var historyDefined = typeof history !== \"undefined\" && history.pushState;\n    locationUrl = locationUrl || location.href;\n\n    if (historyDefined) {\n      history.pushState(stateObject, title, locationUrl);\n    }\n\n    window.addEventListener(\"popstate\", function () {\n      if (historyDefined) {\n        history.pushState(stateObject, title, locationUrl);\n      } else {\n        window.history.forward(1);\n      }\n    });\n  };\n\n  UtilityObj.prototype.handlePostLogout = function () {\n    if (typeof sessionStorage === \"undefined\") {\n      return false;\n    }\n\n    if (sessionStorage.getItem(\"logout\")) {\n      this.resetBrowserBackHistory(location.orgin, \"logout\");\n      /* global resetBrowserBackHistory */\n\n      sessionStorage.removeItem(\"logout\");\n    }\n  };\n\n  UtilityObj.prototype.displaySystemOutageMessage = function (locale) {\n    locale = locale || \"en-us\";\n    locale = locale.replace(\"_\", \"-\");\n    var systemMaintenanceElId = \"systemMaintenanceContainer\";\n\n    if (!document.getElementById(systemMaintenanceElId)) {\n      //check for system outage maintenance message element\n      return;\n    }\n\n    var self = this;\n    this.ajaxRequest(\"api/settings\", {\n      contentType: \"application/json; charset=utf-8\"\n    }, function (data) {\n      if (!data || !(data.MAINTENANCE_MESSAGE || data.MAINTENANCE_WINDOW)) {\n        return false;\n      }\n\n      var messageElement = document.querySelector(\".message-container\");\n\n      if (!messageElement) {\n        messageElement = document.createElement(\"div\");\n        messageElement.classList.add(\"message-container\");\n        document.getElementById(systemMaintenanceElId).appendChild(messageElement);\n      }\n\n      if (data.MAINTENANCE_MESSAGE) {\n        messageElement.innerHTML = self.escapeHtml(data.MAINTENANCE_MESSAGE);\n        return;\n      }\n\n      if (!data.MAINTENANCE_WINDOW || !data.MAINTENANCE_WINDOW.length) {\n        return;\n      } //use maintenance window specified in config to compose the message, assuming in following example format: [\"2018-11-02T12:00:00Z\", \"2018-11-02T18:00:00Z\"], dates in system ISO format\n\n\n      var hoursDiff = function hoursDiff(d1, d2) {\n        if (!d1 || !d2) {\n          return 0;\n        }\n\n        return Math.floor((d2.getTime() - d1.getTime()) / (1000 * 60 * 60) % 24);\n      }; //date object automatically convert iso date/time to local date/time as it assumes a timezone of UTC if date in ISO format\n\n\n      var startDate = new Date(data.MAINTENANCE_WINDOW[0]),\n          endDate = new Date(data.MAINTENANCE_WINDOW[1]);\n      var hoursTil = hoursDiff(new Date(), startDate);\n\n      if (hoursTil < 0 || isNaN(hoursTil)) {\n        //maintenance window has passed\n        document.getElementById(systemMaintenanceElId).classList.add(\"tnth-hide\");\n        return;\n      }\n      /*global i18next */\n      //construct message based on maintenance window\n\n\n      try {\n        var options = {\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\",\n          hour: \"numeric\",\n          minute: \"numeric\",\n          second: \"numeric\",\n          hour12: true,\n          timeZoneName: \"short\"\n        };\n        var displayStartDate = startDate.toLocaleString(locale, options).replace(/[,]/g, \" \"); //display language-sensitive representation of date/time\n\n        var displayEndDate = endDate.toLocaleString(locale, options).replace(/[,]/g, \" \");\n        var message = [\"<div>\" + i18next.t(\"Hi there.\") + \"</div>\", \"<div>\" + i18next.t(\"TrueNTH will be down for website maintenance starting <b>{startdate}</b>. This should last until <b>{enddate}</b>.\".replace(\"{startdate}\", displayStartDate).replace(\"{enddate}\", displayEndDate)) + \"</div>\", \"<div>\" + i18next.t(\"Thanks for your patience while we upgrade our site.\") + \"</div>\"].join(\"\");\n        messageElement.innerHTML = self.escapeHtml(message);\n      } catch (e) {\n        console.log(\"Error occurred converting system outage date/time \", e);\n        /*eslint no-console:off */\n\n        document.getElementById(systemMaintenanceElId).classList.add(\"tnth-hide\");\n      }\n    });\n  };\n\n  return new UtilityObj();\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Utility);\nvar getExportFileName = Utility.getExportFileName;\n/* expose common functions */\n\nvar getUrlParameter = Utility.getUrlParameter;\n\n//# sourceURL=webpack:///./static/js/src/modules/Utility.js?");

/***/ })

/******/ });
//# sourceMappingURL=../../maps/admin.bundle.js.map