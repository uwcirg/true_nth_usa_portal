/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./static/js/src/profile.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./static/js/src/modules/CLINICAL_CODE_ENUM.js":
/*!*****************************************************!*\
  !*** ./static/js/src/modules/CLINICAL_CODE_ENUM.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  \"biopsy\": {\n    code: \"111\",\n    display: \"biopsy\"\n  },\n  \"pca_diag\": {\n    code: \"121\",\n    display: \"PCa diagnosis\"\n  },\n  \"pca_localized\": {\n    code: \"141\",\n    display: \"PCa localized diagnosis\"\n  }\n});\n\n//# sourceURL=webpack:///./static/js/src/modules/CLINICAL_CODE_ENUM.js?");

/***/ }),

/***/ "./static/js/src/modules/ClinicalQuestions.js":
/*!****************************************************!*\
  !*** ./static/js/src/modules/ClinicalQuestions.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TnthAjax.js */ \"./static/js/src/modules/TnthAjax.js\");\n/* harmony import */ var _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TnthDate.js */ \"./static/js/src/modules/TnthDate.js\");\n/* harmony import */ var _SYSTEM_IDENTIFIER_ENUM__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SYSTEM_IDENTIFIER_ENUM */ \"./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js\");\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utility.js */ \"./static/js/src/modules/Utility.js\");\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  /*global $ i18next */\n  update: function update(subjectId, callback) {\n    callback = callback || function () {};\n\n    if (!subjectId) {\n      callback({\n        error: i18next.t(\"Subject id is required\")\n      });\n      return;\n    }\n\n    var self = this;\n    _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTreatment(subjectId, {\n      useWorker: true\n    }, function (data) {\n      self.updateTreatmentElements(data);\n      _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getClinical(subjectId, {\n        useWorker: true,\n        data: {\n          patch_dstu2: true\n        }\n      }, function (data) {\n        self.updateClinical(data.entry);\n        callback();\n      });\n    });\n  },\n  updateClinical: function updateClinical(data) {\n    if (!data) {\n      return false;\n    }\n\n    var sortedArray = data.sort(function (a, b) {\n      return b.resource.id - a.resource.id;\n    });\n\n    for (var i = 0; i < sortedArray.length; i++) {\n      var val = sortedArray[i];\n      var clinicalItem = String(val.resource.code.coding[0].display);\n      var clinicalValue = val.resource.valueQuantity.value;\n      var clinicalUnit = val.resource.valueQuantity.units;\n      var truesyValue = parseInt(clinicalValue) === 1 && !clinicalUnit;\n      var falsyValue = parseInt(clinicalValue) === 0 && !clinicalUnit;\n      var status = val.resource.status;\n\n      if (clinicalItem === \"PCa diagnosis\") {\n        clinicalItem = \"pca_diag\";\n      } else if (clinicalItem === \"PCa localized diagnosis\") {\n        clinicalItem = \"pca_localized\";\n      }\n\n      var ci = $(\"div[data-topic='\" + clinicalItem + \"']\");\n\n      if (ci.length > 0) {\n        ci.fadeIn();\n      }\n\n      var $radios = $(\"input:radio[name='\" + clinicalItem + \"']\");\n\n      if ($radios.length > 0) {\n        if (!$radios.is(\":checked\")) {\n          if (String(status) === \"unknown\") {\n            $radios.filter(\"[data-status='unknown']\").prop(\"checked\", true);\n          } else {\n            $radios.filter(\"[value=\" + clinicalValue + \"]\").not(\"[data-status='unknown']\").prop(\"checked\", true);\n          }\n\n          if (truesyValue) {\n            $radios.filter(\"[value=true]\").prop(\"checked\", true);\n          } else if (falsyValue) {\n            $radios.filter(\"[value=false]\").prop(\"checked\", true);\n          }\n\n          if (clinicalItem === \"biopsy\") {\n            if (String(clinicalValue) === \"true\" || truesyValue) {\n              if (val.resource.issued) {\n                var dString = _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].formatDateString(val.resource.issued, \"iso-short\");\n                var dArray = dString.split(\"-\");\n                $(\"#biopsyDate\").val(dString);\n                $(\"#biopsy_year\").val(dArray[0]);\n                $(\"#biopsy_month\").val(dArray[1]);\n                $(\"#biopsy_day\").val(dArray[2]);\n                $(\"#biopsyDateContainer\").show();\n              }\n            } else {\n              $(\"#biopsyDate\").val(\"\");\n              $(\"#biopsyDateContainer\").hide();\n            }\n          }\n\n          if (String(clinicalValue) === \"true\" || truesyValue) {\n            $radios.parents(\".pat-q\").next().fadeIn(150);\n          }\n        }\n      }\n    }\n  },\n  updateTreatmentElements: function updateTreatmentElements(data) {\n    var treatmentCode = _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hasTreatment(data);\n\n    if (treatmentCode) {\n      var hasCancerTreatment = String(treatmentCode) === String(_SYSTEM_IDENTIFIER_ENUM__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANCER_TREATMENT_CODE);\n      $(\"#tx_yes\").prop(\"checked\", hasCancerTreatment);\n      $(\"#tx_no\").prop(\"checked\", !hasCancerTreatment);\n    }\n  },\n  initFieldEvents: function initFieldEvents(subjectId) {\n    $(\"#patientQ [name='biopsy']\").on(\"click\", function () {\n      var toSend = String($(this).val()),\n          biopsyDate = $(\"#biopsyDate\").val(),\n          thisItem = $(this),\n          userId = subjectId;\n      var toCall = thisItem.attr(\"name\") || thisItem.attr(\"data-name\"),\n          targetField = $(\"#patientQ\");\n      var arrQ = [\"pca_diag\", \"pca_localized\", \"tx\"];\n\n      if (toSend === \"true\") {\n        $(\"#biopsyDateContainer\").show();\n        $(\"#biopsyDate\").attr(\"skipped\", \"false\");\n        arrQ.forEach(function (fieldName) {\n          $(\"#patientQ input[name='\" + fieldName + \"']\").attr(\"skipped\", \"false\");\n        });\n\n        if (biopsyDate) {\n          setTimeout(function () {\n            _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postClinical(userId, toCall, toSend, \"\", targetField, {\n              \"issuedDate\": biopsyDate\n            });\n          }, 50);\n        } else {\n          $(\"#biopsy_day\").focus();\n        }\n      } else {\n        $(\"#biopsyDate\").attr(\"skipped\", \"true\");\n        $(\"#biopsyDate, #biopsy_day, #biopsy_month, #biopsy_year\").val(\"\");\n        $(\"#biopsyDateError\").text(\"\");\n        $(\"#biopsyDateContainer\").hide();\n        arrQ.forEach(function (fieldName) {\n          var field = $(\"#patientQ input[name='\" + fieldName + \"']\");\n          field.prop(\"checked\", false);\n          field.attr(\"skipped\", \"true\");\n        });\n        setTimeout(function () {\n          _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postClinical(userId, toCall, \"false\", thisItem.attr(\"data-status\"), targetField);\n          _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postClinical(userId, \"pca_diag\", \"false\", \"\", targetField);\n          _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postClinical(userId, \"pca_localized\", \"false\", \"\", targetField);\n          _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTreatment(userId);\n        }, 50);\n      }\n    });\n    _Utility_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].convertToNumericField($(\"#biopsy_day, #biopsy_year\"));\n    $(\"#biopsy_day, #biopsy_month, #biopsy_year\").on(\"change\", function () {\n      var d = $(\"#biopsy_day\").val(),\n          m = $(\"#biopsy_month\").val(),\n          y = $(\"#biopsy_year\").val();\n      var isValid = _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].validateDateInputFields(m, d, y, \"biopsyDateError\");\n\n      if (isValid) {\n        $(\"#biopsyDate\").val(y + \"-\" + m + \"-\" + d);\n        $(\"#biopsyDateError\").text(\"\").hide();\n        $(\"#biopsy_yes\").trigger(\"click\");\n      } else {\n        $(\"#biopsyDate\").val(\"\");\n      }\n    });\n    $(\"#patientQ input[name='tx']\").on(\"click\", function () {\n      _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postTreatment(subjectId, String($(this).val()) === \"true\", \"\", $(\"#patientQ\"));\n    });\n    $(\"#patientQ input[name='pca_localized']\").on(\"click\", function () {\n      var o = $(this);\n      setTimeout(function () {\n        _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postClinical(subjectId, o.attr(\"name\"), o.val(), o.attr(\"data-status\"), $(\"#patientQ\"));\n      }, 50);\n    });\n    $(\"#patientQ input[name='pca_diag']\").on(\"click\", function () {\n      var toSend = String($(this).val()),\n          userId = subjectId,\n          o = $(this),\n          targetField = $(\"#patientQ\");\n      setTimeout(function () {\n        _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postClinical(userId, o.attr(\"name\"), toSend, o.attr(\"data-status\"), targetField);\n      }, 50);\n\n      if (toSend !== \"true\") {\n        [\"pca_localized\", \"tx\"].forEach(function (fieldName) {\n          var field = $(\"#patientQ input[name='\" + fieldName + \"']\");\n          field.prop(\"checked\", false);\n          field.attr(\"skipped\", \"true\");\n        });\n        setTimeout(function () {\n          _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postClinical(userId, \"pca_localized\", \"false\", \"\", targetField);\n          _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteTreatment(userId);\n        }, 50);\n      }\n    });\n  }\n});\n\n//# sourceURL=webpack:///./static/js/src/modules/ClinicalQuestions.js?");

/***/ }),

/***/ "./static/js/src/modules/OrgTool.js":
/*!******************************************!*\
  !*** ./static/js/src/modules/OrgTool.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SYSTEM_IDENTIFIER_ENUM.js */ \"./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js\");\n/* harmony import */ var _TnthAjax_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TnthAjax.js */ \"./static/js/src/modules/TnthAjax.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  /*global i18next $ */\n  var OrgObj = function OrgObj(orgId, orgName, parentOrg) {\n    this.id = orgId;\n    this.name = orgName;\n    this.children = [];\n    this.parentOrgId = parentOrg;\n    this.isTopLevel = false;\n    this.language = null;\n    this.extension = [];\n  };\n\n  var OrgTool = function OrgTool() {\n    this.TOP_LEVEL_ORGS = [];\n    this.orgsList = {};\n    this.orgsData = [];\n    this.initialized = false;\n  };\n\n  OrgTool.prototype.init = function (callback) {\n    var self = this;\n\n    callback = callback || function () {};\n\n    if (sessionStorage.orgsData) {\n      var orgsData = JSON.parse(sessionStorage.orgsData);\n      self.populateOrgsList(orgsData);\n      callback(orgsData);\n    } else {\n      $.ajax({\n        type: \"GET\",\n        url: \"/api/organization\",\n        async: false\n      }).done(function (data) {\n        if (data && data.entry) {\n          self.orgsData = data.entry;\n          self.populateOrgsList(data.entry);\n          sessionStorage.setItem(\"orgsData\", JSON.stringify(data.entry));\n          callback(data.entry);\n        }\n      }).fail(function (xhr) {\n        callback({\n          \"error\": xhr.responseText\n        });\n        _TnthAjax_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].sendError(xhr, \"/api/organization\");\n      });\n    }\n  };\n\n  OrgTool.prototype.onLoaded = function (userId, doPopulateUI) {\n    if (userId) {\n      this.setUserId(userId);\n    }\n\n    if (doPopulateUI) {\n      this.populateUI();\n    }\n\n    $(\"#userOrgs input[name='organization']\").each(function () {\n      $(this).prop(\"checked\", false);\n    });\n    $(\"#clinics\").attr(\"loaded\", true);\n  };\n\n  OrgTool.prototype.setUserId = function (userId) {\n    $(\"#fillOrgs\").attr(\"userId\", userId);\n  };\n\n  OrgTool.prototype.getUserId = function () {\n    return $(\"#fillOrgs\").attr(\"userId\");\n  };\n\n  OrgTool.prototype.inArray = function (n, array) {\n    if (!n || !array || !Array.isArray(array)) {\n      return false;\n    }\n\n    var found = false;\n\n    for (var index = 0; !found && index < array.length; index++) {\n      found = String(array[index]) === String(n);\n    }\n\n    return found;\n  };\n\n  OrgTool.prototype.getElementParentOrg = function (o) {\n    var parentOrg;\n\n    if (!o) {\n      return false;\n    }\n\n    parentOrg = $(o).attr(\"data-parent-id\");\n\n    if (!parentOrg) {\n      parentOrg = $(o).closest(\".org-container[data-parent-id]\").attr(\"data-parent-id\");\n    }\n\n    return parentOrg;\n  };\n\n  OrgTool.prototype.getTopLevelOrgs = function () {\n    var ml = this.getOrgsList(),\n        orgList = [];\n\n    for (var org in ml) {\n      if (ml[org].isTopLevel) {\n        orgList.push(org);\n      }\n    }\n\n    return orgList;\n  };\n\n  OrgTool.prototype.getOrgsList = function () {\n    return this.orgsList;\n  };\n\n  OrgTool.prototype.getOrgName = function (orgId) {\n    var orgsList = this.getOrgsList();\n\n    if (orgId && orgsList.hasOwnProperty(orgId)) {\n      return orgsList[orgId].name;\n    }\n\n    return \"\";\n  };\n\n  OrgTool.prototype.filterOrgs = function (leafOrgs) {\n    leafOrgs = leafOrgs || [];\n\n    if (leafOrgs.length === 0) {\n      return false;\n    }\n\n    var self = this;\n    $(\"#fillOrgs input[name='organization']\").each(function () {\n      if (!self.inArray($(this).val(), leafOrgs)) {\n        $(this).hide();\n\n        if (self.orgsList[$(this).val()]) {\n          var l = $(this).closest(\"label\");\n\n          if (self.orgsList[$(this).val()].children.length === 0) {\n            l.hide();\n          } else {\n            l.addClass(\"data-display-only\");\n          }\n        }\n      }\n    });\n    var topList = self.getTopLevelOrgs();\n    topList.forEach(function (orgId) {\n      var allChildrenHidden = true;\n      $(\"#fillOrgs .org-container[data-parent-id='\" + orgId + \"']\").each(function () {\n        var subOrgs = $(this).find(\".org-container\");\n\n        if (subOrgs.length > 0) {\n          var allSubOrgsHidden = true;\n          subOrgs.each(function () {\n            var isVisible = false;\n            $(this).find(\"input[name='organization']\").each(function () {\n              if ($(this).is(\":visible\") || String($(this).css(\"display\")) !== \"none\") {\n                isVisible = true;\n                allChildrenHidden = false;\n              }\n            });\n\n            if (!isVisible) {\n              $(this).hide();\n            } else {\n              allSubOrgsHidden = false;\n            }\n          });\n\n          if (allSubOrgsHidden) {\n            $(this).children(\"label\").hide();\n          }\n        } else {\n          var ip = $(this).find(\"input[name='organization']\");\n\n          if (ip.length > 0) {\n            ip.each(function () {\n              if ($(this).is(\":visible\") || String($(this).css(\"display\")) !== \"none\") {\n                allChildrenHidden = false;\n              }\n            });\n          }\n        }\n      });\n\n      if (allChildrenHidden) {\n        $(\"#fillOrgs\").find(\"legend[orgid='\" + orgId + \"']\").hide();\n      }\n    });\n  };\n\n  OrgTool.prototype.findOrg = function (entry, orgId) {\n    var org;\n\n    if (!entry || !orgId) {\n      return false;\n    }\n\n    entry.forEach(function (item) {\n      if (!org) {\n        if (parseInt(item.id) === parseInt(orgId)) {\n          org = item;\n        }\n      }\n    });\n    return org;\n  };\n\n  OrgTool.prototype.getOrgName = function (orgId) {\n    var org = this.orgsList[orgId];\n\n    if (!org) {\n      return \"\";\n    }\n\n    return org.name;\n  };\n\n  OrgTool.prototype.populateOrgsList = function (items) {\n    if (Object.keys(this.orgsList).length > 0) {\n      return this.orgsList;\n    }\n\n    var entry = items,\n        self = this,\n        parentId,\n        orgsList = {};\n\n    if (!items) {\n      return false;\n    }\n\n    items.forEach(function (item) {\n      if (item.partOf) {\n        parentId = item.partOf.reference.split(\"/\").pop();\n\n        if (!orgsList[parentId]) {\n          var o = self.findOrg(entry, parentId);\n          orgsList[parentId] = new OrgObj(o.id, o.name);\n        }\n\n        orgsList[parentId].children.push(new OrgObj(item.id, item.name, parentId));\n\n        if (orgsList[item.id]) {\n          orgsList[item.id].parentOrgId = parentId;\n        } else {\n          orgsList[item.id] = new OrgObj(item.id, item.name, parentId);\n        }\n      } else {\n        if (!orgsList[item.id]) {\n          orgsList[item.id] = new OrgObj(item.id, item.name);\n        }\n\n        if (parseInt(item.id) !== 0) {\n          orgsList[item.id].isTopLevel = true;\n          self.TOP_LEVEL_ORGS.push(item.id);\n        }\n      }\n\n      if (item.extension) {\n        orgsList[item.id].extension = item.extension;\n      }\n\n      if (item.language) {\n        orgsList[item.id].language = item.language;\n      }\n\n      if (item.identifier) {\n        orgsList[item.id].identifier = item.identifier;\n        item.identifier.forEach(function (identifier) {\n          if (identifier.system === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shortname) {\n            orgsList[item.id].shortname = identifier.value;\n          }\n        });\n      }\n    });\n    items.forEach(function (item) {\n      if (item.partOf) {\n        parentId = item.partOf.reference.split(\"/\").pop();\n\n        if (orgsList[item.id]) {\n          orgsList[item.id].parentOrgId = parentId;\n        }\n      }\n    });\n\n    if (items.length > 0) {\n      this.initialized = true;\n    }\n\n    this.orgsList = orgsList;\n    return orgsList;\n  };\n\n  OrgTool.prototype.populateUI = function () {\n    if (sessionStorage.orgsHTML) {\n      $(\"#fillOrgs\").html(sessionStorage.orgsHTML);\n      return true;\n    }\n\n    var self = this,\n        container = $(\"#fillOrgs\"),\n        orgsList = this.orgsList,\n        parentContent = \"\";\n\n    var getState = function getState(item) {\n      if (!item.identifier) {\n        return \"\";\n      }\n\n      var s = \"\",\n          found = false;\n      item.identifier.forEach(function (i) {\n        if (!found && i.system === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].practice_region && i.value) {\n          s = i.value.split(\":\")[1];\n          found = true;\n        }\n      });\n      return s;\n    };\n\n    var keys = Object.keys(orgsList),\n        parentOrgsArray = [];\n    keys = keys.sort();\n    keys.forEach(function (org) {\n      //draw parent orgs first\n      if (orgsList[org].isTopLevel) {\n        parentOrgsArray.push(org);\n      }\n    });\n    parentOrgsArray = parentOrgsArray.sort(function (a, b) {\n      //sort parent orgs by name\n      var orgA = orgsList[a],\n          orgB = orgsList[b];\n\n      if (orgA.name < orgB.name) {\n        return -1;\n      }\n\n      if (orgA.name > orgB.name) {\n        return 1;\n      }\n\n      return 0;\n    });\n    var parentFragment = document.createDocumentFragment(),\n        parentDiv;\n    parentOrgsArray.forEach(function (org) {\n      parentDiv = document.createElement(\"div\");\n      parentDiv.setAttribute(\"id\", org + \"_container\");\n      var parentOrgItem = orgsList[org];\n      var orgShortName = parentOrgItem.shortname || parentOrgItem.name;\n      var parentState = getState(parentOrgItem);\n      var parentOrgName = parentOrgItem.name;\n\n      if (parentOrgItem.children.length) {\n        if ($(\"#userOrgs legend[orgId='\" + org + \"']\").length === 0) {\n          parentDiv.classList.add(\"parent-org-container\");\n          parentContent = \"<legend orgId=\\\"\".concat(org, \"\\\">\").concat(parentOrgName, \"</legend>\\n                        <input class=\\\"tnth-hide\\\" type=\\\"checkbox\\\" name=\\\"organization\\\" parent_org=\\\"true\\\" data-org-name=\\\"\").concat(parentOrgName, \"\\\" data-short-name=\\\"\").concat(orgShortName, \"\\\" id=\\\"\").concat(org, \"_org\\\" state=\\\"\").concat(parentState, \"\\\" value=\\\"\").concat(org, \"\\\" /></div>\");\n        }\n      } else {\n        if ($(\"#userOrgs label[id='org-label-\" + org + \"']\").length === 0) {\n          parentDiv.classList.add(\"parent-org-container\", \"parent-singleton\");\n          parentContent = \"<label id=\\\"org-label-\".concat(org, \"\\\" class=\\\"org-label\\\">\\n                        <input class=\\\"clinic\\\" type=\\\"checkbox\\\" name=\\\"organization\\\" parent_org=\\\"true\\\" id=\\\"\").concat(org, \"_org\\\" state=\\\"\").concat(parentState, \"\\\" value=\\\"\").concat(org, \"\\\"\\n                        data-parent-id=\\\"\").concat(org, \"\\\"  data-org-name=\\\"\").concat(parentOrgName, \"\\\" data-short-name=\\\"\").concat(orgShortName, \"\\\" data-parent-name=\\\"\").concat(parentOrgName, \"\\\"/><span>\").concat(parentOrgName, \"</span></label></div>\");\n        }\n      }\n\n      parentDiv.innerHTML = parentContent;\n      parentFragment.appendChild(parentDiv);\n    });\n    container.get(0).appendChild(parentFragment);\n    keys.forEach(function (org) {\n      //draw child orgs\n      if (orgsList[org].children.length > 0) {\n        // Fill in each child clinic\n        var childClinic = \"\";\n        var items = orgsList[org].children.sort(function (a, b) {\n          // sort child clinic in alphabetical order\n          if (a.name < b.name) {\n            return -1;\n          }\n\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          return 0;\n        });\n        items.forEach(function (item) {\n          var _parentOrgId = item.parentOrgId,\n              _parentOrg = orgsList[_parentOrgId];\n\n          var _isTopLevel = _parentOrg ? _parentOrg.isTopLevel : false;\n\n          var state = getState(orgsList[_parentOrgId]);\n          var topLevelOrgId = self.getTopLevelParentOrg(item.id);\n\n          if ($(\"#fillOrgs input[name='organization'][value='\" + item.id + \"']\").length > 0) {\n            return true;\n          }\n\n          var attrObj = {\n            dataAttributes: ' data-parent-id=\"' + topLevelOrgId + '\"  data-parent-name=\"' + orgsList[topLevelOrgId].name + '\" ',\n            containerClass: \"\",\n            textClass: \"\"\n          };\n\n          if (_isTopLevel) {\n            attrObj.dataAttributes = ' data-parent-id=\"' + _parentOrgId + '\"  data-parent-name=\"' + _parentOrg.name + '\" ';\n          }\n\n          if (orgsList[item.id].children.length > 0) {\n            if (_isTopLevel) {\n              attrObj.containerClass = \"sub-org-container\";\n              attrObj.textClass = \"text-muted\";\n            } else {\n              attrObj.textClass = \"text-muter\";\n            }\n          } else {\n            if (_isTopLevel) {\n              attrObj.textClass = \"text-muted singleton\";\n            }\n          }\n\n          childClinic = \"<div id=\\\"\".concat(item.id, \"_container\\\" \").concat(attrObj.dataAttributes, \" class=\\\"indent org-container \").concat(attrObj.containerClass, \"\\\">\\n                        <label id=\\\"org-label-\").concat(item.id, \"\\\" class=\\\"org-label \").concat(attrObj.textClass, \"\\\">\\n                        <input class=\\\"clinic\\\" type=\\\"checkbox\\\" name=\\\"organization\\\" id=\\\"\").concat(item.id, \"_org\\\" data-org-name=\\\"\").concat(item.name, \"\\\" data-short-name=\\\"\").concat(item.shortname || item.name, \"\\\" state=\\\"\").concat(state ? state : '', \"\\\" value=\\\"\").concat(item.id, \"\\\" \").concat(attrObj.dataAttributes, \" />\\n                        <span>\").concat(item.name, \"</span></label></div>\");\n          var parentOrgContainer = $(\"#\" + _parentOrgId + \"_container\");\n\n          if (parentOrgContainer.length > 0) {\n            parentOrgContainer.append(childClinic);\n          } else {\n            container.append(childClinic);\n          }\n        });\n      }\n    });\n    sessionStorage.setItem(\"orgsHTML\", container.html());\n\n    if (!container.text()) {\n      container.html(i18next.t(\"No organizations available\"));\n    }\n  };\n\n  OrgTool.prototype.getShortName = function (orgId) {\n    var shortName = \"\";\n\n    if (!orgId) {\n      return shortName;\n    }\n\n    var orgsList = this.getOrgsList();\n    var orgItem = orgsList.hasOwnProperty(orgId) ? orgsList[orgId] : {};\n\n    if (orgItem.shortname) {\n      shortName = orgItem.shortname;\n    }\n\n    return shortName;\n  };\n\n  OrgTool.prototype.getSelectedOrgTopLevelParentOrg = function () {\n    return this.getTopLevelParentOrg(this.getSelectedOrg().val());\n  };\n\n  OrgTool.prototype.getSelectedOrg = function () {\n    return $(\"#userOrgs input[name='organization']:checked\");\n  };\n\n  OrgTool.prototype.getUserTopLevelParentOrgs = function (uo) {\n    var parentList = [],\n        self = this;\n\n    if (!uo) {\n      return false;\n    }\n\n    if (uo.parentList) {\n      return uo.parentList;\n    }\n\n    uo.forEach(function (o) {\n      var p = self.getTopLevelParentOrg(o);\n\n      if (p && !self.inArray(p, parentList)) {\n        parentList.push(p);\n      }\n    });\n    uo.parentList = parentList;\n    return parentList;\n  };\n\n  OrgTool.prototype.getTopLevelParentOrg = function (currentOrg) {\n    var ml = this.getOrgsList(),\n        currentOrgItem = ml[currentOrg],\n        self = this;\n\n    if (!currentOrgItem) {\n      return false;\n    }\n\n    if (currentOrgItem.isTopLevel) {\n      return currentOrg;\n    }\n\n    if (currentOrgItem.parentOrgId) {\n      return self.getTopLevelParentOrg(currentOrgItem.parentOrgId);\n    }\n\n    return currentOrg;\n  };\n\n  OrgTool.prototype.getChildOrgs = function (orgs, orgList) {\n    orgList = orgList || [];\n\n    if (!orgs || !orgs.length) {\n      return orgList;\n    }\n\n    var mainOrgsList = this.getOrgsList(),\n        childOrgs = [];\n    orgs.forEach(function (org) {\n      var o = mainOrgsList[org.id];\n\n      if (!o) {\n        return true;\n      }\n\n      orgList.push(org.id);\n      var c = o.children ? o.children : null;\n\n      if (c && c.length) {\n        c.forEach(function (i) {\n          childOrgs.push(i);\n        });\n      }\n    });\n    return this.getChildOrgs(childOrgs, orgList);\n  };\n\n  OrgTool.prototype.getHereBelowOrgs = function (userOrgs) {\n    var mainOrgsList = this.getOrgsList(),\n        self = this,\n        here_below_orgs = [];\n\n    if (!userOrgs) {\n      var selectedOrg = this.getSelectedOrg();\n\n      if (selectedOrg.length > 0) {\n        userOrgs = [];\n        selectedOrg.each(function () {\n          userOrgs.push($(this).val());\n        });\n      }\n    }\n\n    userOrgs = userOrgs || [];\n    userOrgs.forEach(function (orgId) {\n      here_below_orgs.push(orgId);\n      var co = mainOrgsList[orgId],\n          cOrgs = self.getChildOrgs(co && co.children ? co.children : []);\n\n      if (cOrgs.length) {\n        here_below_orgs = here_below_orgs.concat(cOrgs);\n      }\n    });\n    return here_below_orgs;\n  };\n\n  OrgTool.prototype.morphPatientOrgs = function () {\n    var checkedOrgs = {},\n        orgs = $(\"#userOrgs input[name='organization']\");\n    orgs.each(function () {\n      $(this).closest(\"label\").addClass(\"radio-label\");\n\n      if ($(this).prop(\"checked\")) {\n        checkedOrgs[$(this).val()] = true;\n      }\n\n      $(this).attr(\"type\", \"radio\");\n\n      if (checkedOrgs[$(this).val()]) {\n        $(this).prop(\"checked\", true);\n      }\n    });\n    $(\"#userOrgs .noOrg-container\").hide();\n  };\n\n  return OrgTool;\n})());\n\n//# sourceURL=webpack:///./static/js/src/modules/OrgTool.js?");

/***/ }),

/***/ "./static/js/src/modules/Procedures.js":
/*!*********************************************!*\
  !*** ./static/js/src/modules/Procedures.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TnthAjax.js */ \"./static/js/src/modules/TnthAjax.js\");\n/* harmony import */ var _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TnthDate.js */ \"./static/js/src/modules/TnthDate.js\");\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Utility.js */ \"./static/js/src/modules/Utility.js\");\n/* harmony import */ var _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SYSTEM_IDENTIFIER_ENUM.js */ \"./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js\");\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  /*global $ i18next tnthAjax tnthDates SYSTEM_IDENTIFIER_ENUM */\n  var ProcApp = {\n    subjectId: \"\",\n    currentUserId: \"\",\n    dateFields: [\"procDay\", \"procMonth\", \"procYear\"],\n    entries: [],\n    initCounts: 0,\n    init: function init(subjectId) {\n      //entry method for initializing ProcApp object\n      var self = this;\n      this.initUserIds(subjectId, function () {\n        if (!self.subjectId) {\n          self.setError(i18next.t(\"Subject id is required\")); //display error on UI\n\n          return false;\n        }\n\n        self.getOptions(); //treatment options\n\n        self.getUserProcedures();\n        self.initFieldExtension();\n        self.initFieldEvents();\n      });\n    },\n    initViaTemplate: function initViaTemplate() {\n      //profile and coredata views\n      var self = this;\n      $(document).ready(function () {\n        var profileSubject = $(\"#profileProcSubjectId\");\n\n        if (!profileSubject.length) {\n          return;\n        }\n\n        self.init(profileSubject.val());\n      });\n    },\n    initUserIds: function initUserIds(subjectId, callback) {\n      callback = callback || function () {};\n\n      var self = this;\n      this.setSubjectId(subjectId);\n      _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getCurrentUser(function (data) {\n        if (!data || data.error) {\n          self.setError(i18next.t(\"error occurred setting current user id\"));\n          callback();\n          return;\n        }\n\n        self.setCurrentUserId(data.id);\n\n        if (!self.subjectId) {\n          self.setSubjectId(data.id);\n        }\n\n        callback();\n      });\n    },\n    setSubjectId: function setSubjectId(id) {\n      this.subjectId = id;\n    },\n    setCurrentUserId: function setCurrentUserId(id) {\n      this.currentUserId = id;\n    },\n    setError: function setError(message) {\n      $(\"#procDateErrorContainer\").html(message || \"\");\n\n      if (message) {\n        $(\"#procedure_view\").html(\"<p class='text-muted'>\" + i18next.t(\"no data found\") + \"</p>\");\n      }\n    },\n    setTreatmentOptionsSelector: function setTreatmentOptionsSelector(entries) {\n      if (!entries) {\n        return;\n      }\n\n      var optionsList = [];\n      optionsList.push(\"<option value=''>\" + i18next.t(\"Select\") + \"</option>\");\n      entries.forEach(function (item) {\n        optionsList.push(\"<option value='{value}' data-system='{system}'>{text}</option>\".replace(\"{value}\", item.code).replace(\"{text}\", item.text).replace(\"{system}\", item.system));\n      });\n      $(\"#tnthproc\").append(optionsList.join(\"\"));\n      sessionStorage.setItem(\"treatmentOptions\", JSON.stringify(entries));\n    },\n    getOptions: function getOptions() {\n      if (!$(\"#tnthproc\").length) {\n        return;\n      }\n\n      if (sessionStorage.treatmentOptions) {\n        this.setTreatmentOptionsSelector(JSON.parse(sessionStorage.treatmentOptions));\n        return;\n      }\n\n      var self = this,\n          url = \"/patients/treatment-options\";\n\n      if (window.Worker) {\n        _Utility_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].initWorker(url, {\n          cache: true\n        }, function (result) {\n          /*global Utility */\n          var data = JSON.parse(result);\n          self.setTreatmentOptionsSelector(data.treatment_options);\n        });\n        return true;\n      }\n\n      $.ajax({\n        type: \"GET\",\n        url: url,\n        cache: true\n      }).done(function (data) {\n        self.setTreatmentOptionsSelector(data.treatment_options);\n      }).fail(function () {});\n    },\n    getCreatorDisplay: function getCreatorDisplay(creator, defaultDisplay) {\n      if (!creator) {\n        return \"\";\n      }\n\n      if (String(creator) === this.currentUserId) {\n        return i18next.t(\"you\");\n      } else if (String(creator) === String(this.subjectId)) {\n        return i18next.t(\"this patient\");\n      }\n\n      return i18next.t(\"staff member\") + \", <span class='creator'>\" + defaultDisplay + \"</span>, \";\n    },\n    getDeleteInvocationDisplay: function getDeleteInvocationDisplay() {\n      return $(\"#popoverHolder .popover__link\").html();\n    },\n    setNewEntry: function setNewEntry(newEntry, highestId) {\n      if (!newEntry) {\n        return;\n      } // If newEntry, then add icon to what we just added\n\n\n      $(\"#eventListtnthproc\").find(\"tr[data-id='\" + highestId + \"'] td.descriptionCell\").append(\"&nbsp; <small class='text-success'><i class='fa fa-check-square-o'></i> <em>\" + i18next.t(\"Added!\") + \"</em></small>\");\n    },\n    setProcedureRowsView: function setProcedureRowsView() {\n      var content = \"\";\n      $(\"#userProcedures tr[data-id]\").each(function () {\n        $(this).find(\"td\").each(function () {\n          if (!$(this).hasClass(\"list-cell\") && !$(this).hasClass(\"lastCell\")) {\n            content += \"<div>\" + $(this).text() + \"</div>\"; //display content from database\n          }\n        });\n      });\n      $(\"#procedure_view\").html(content || \"<p class='text-muted'>\" + i18next.t(\"no data found\") + \"</p>\");\n    },\n    setNoDataDisplay: function setNoDataDisplay() {\n      $(\"#userProcedures\").html(\"<p id='noEvents'><em>\" + i18next.t(\"You haven't entered any management option yet.\") + \"</em></p>\").animate({\n        opacity: 1\n      });\n      $(\"#procedure_view\").html(\"<p class='text-muted'>\" + i18next.t(\"no data found\") + \"</p>\");\n      $(\"#pastTreatmentsContainer\").hide();\n      $(\"#eventListLoad\").fadeOut();\n    },\n    getUserProcedures: function getUserProcedures(newEntry) {\n      if (!this.subjectId) {\n        return false;\n      }\n\n      var self = this;\n      $.ajax({\n        type: \"GET\",\n        url: \"/api/patient/\" + this.subjectId + \"/procedure\",\n        cache: false\n      }).done(function (data) {\n        if (data.entry.length === 0) {\n          self.setNoDataDisplay();\n          return false;\n        }\n\n        self.onDidGetProcedures(data.entry, newEntry);\n        $(\"#eventListLoad\").fadeOut();\n      }).fail(function () {\n        self.setError(i18next.t(\"error occurred retrieving user procedures\"));\n        $(\"#eventListLoad\").fadeOut();\n      });\n    },\n    initFieldEvents: function initFieldEvents() {\n      var self = this;\n      this.convertToNumericField($(\"#procYear, #procDay\"));\n      setTimeout(function () {\n        // Trigger eventInput on submit button\n        $(\"#tnthproc-submit\").eventInput();\n      }, 150);\n      $(\"#tnthproc\").on(\"change\", function () {\n        // Update submit button when select changes\n        $(\"#tnthproc-submit\").attr({\n          \"data-name\": $(this).val(),\n          \"data-system\": $(this).find(\"option:selected\").attr(\"data-system\")\n        });\n        self.checkSubmit(\"#tnthproc-submit\");\n      });\n      self.dateFields.forEach(function (fn) {\n        $(\"#\" + fn).on(\"keyup change\", function () {\n          self.setDate();\n        });\n      });\n      $(\"body\").on(\"click\", \".data-delete\", function () {\n        //new row remove button event at account creation\n        $(this).closest(\"tr\").remove();\n      });\n    },\n    initPopoverEvents: function initPopoverEvents() {\n      var self = this;\n      $(\"[data-toggle='popover']\").popover({\n        trigger: \"click\",\n        placement: \"top\",\n        html: true,\n        content: $(\"#popoverHolder .popover__content\").html()\n      });\n      $(\"body\").on(\"click\", \".cancel-delete\", function () {\n        //popover cancel button event\n        $(this).parents(\"div.popover\").prev(\"a.confirm-delete\").trigger(\"click\");\n      });\n      $(\"body\").on(\"click\", \".btn-delete\", function () {\n        // popover delete button event - need to attach delete functionality to body b/c section gets reloaded\n        var procId = $(this).parents(\"tr\").attr(\"data-id\");\n        $(this).parents(\"tr\").fadeOut(\"slow\", function () {\n          $(this).remove(); // Remove from list\n\n          if ($(\"#eventListtnthproc tr\").length === 0) {\n            //If there's no events left, add status msg back in\n            self.setNoDataDisplay();\n          }\n        });\n        _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteProc(procId, false, false, function () {\n          // Post delete to server\n          self.getUserProcedures();\n        });\n        return false;\n      });\n    },\n    onDidGetProcedures: function onDidGetProcedures(data, newEntry) {\n      this.populateProcedureRows(data, newEntry);\n      this.setProcedureRowsView();\n      this.setError(!data || data.error ? i18next(\"Error occurred retrieving procedures\") : \"\");\n    },\n    populateProcedureRows: function populateProcedureRows(data, newEntry) {\n      data.sort(function (a, b) {\n        // sort from newest to oldest\n        return new Date(b.resource.performedDateTime) - new Date(a.resource.performedDateTime);\n      });\n      var self = this,\n          contentHTML = [],\n          proceduresHtml = \"\",\n          otherHtml = []; // If we're adding a procedure in-page, then identify the highestId (most recent) so we can put \"added\" icon\n\n      var highestId = 0;\n      $.each(data, function (i, val) {\n        var code = val.resource.code.coding[0].code;\n        var procID = val.resource.id;\n\n        if ([_SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CANCER_TREATMENT_CODE, _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].NONE_TREATMENT_CODE].indexOf(code) !== -1) {\n          //for entries marked as other procedure.  These are rendered as hidden fields and can be referenced when these entries are deleted.\n          otherHtml.push(\"<input type='hidden' data-id='\" + procID + \"'  data-code='\" + code + \"' name='otherProcedures' >\");\n          return true;\n        }\n\n        var creatorRef = val.resource.meta.by.reference.match(/\\d+/)[0]; // just the user ID, not eg \"api/patient/46\";\n\n        var creator = self.getCreatorDisplay(creatorRef, val.resource.meta.by.display || creatorRef);\n        var dateEdited = new Date(val.resource.meta.lastUpdated);\n        var creationText = i18next.t(\"(data entered by %actor on %date)\").replace(\"%actor\", creator).replace(\"%date\", dateEdited.toLocaleDateString(\"en-GB\", {\n          day: \"numeric\",\n          month: \"short\",\n          year: \"numeric\"\n        }));\n        var deleteInvocation = \"\";\n\n        if (String(creatorRef) === String(self.currentUserId)) {\n          deleteInvocation = self.getDeleteInvocationDisplay();\n        }\n\n        contentHTML.push([\"<tr data-id='\" + procID + \"' data-code='\" + code + \"'>\", \"<td width='1%' valign='top' class='list-cell'>&#9679;</td>\", \"<td class='col-md-10 col-xs-10 descriptionCell' valign='top'>\" + _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].formatDateString(val.resource.performedDateTime) + \"&nbsp;--&nbsp;\" + val.resource.code.coding[0].display + \"&nbsp;<em>\" + creationText + \"</em></td>\", \"<td class='col-md-2 col-xs-2 lastCell text-left' valign='top'>\" + deleteInvocation + \"</td>\", \"</tr>\"].join(\"\"));\n        highestId = Math.max(highestId, procID);\n      });\n\n      if (contentHTML) {\n        proceduresHtml = \"<table  class=\\\"table-responsive\\\" width=\\\"100%\\\" id=\\\"eventListtnthproc\\\" cellspacing=\\\"4\\\" cellpadding=\\\"6\\\">\";\n        proceduresHtml += contentHTML.join(\"\");\n        proceduresHtml += \"</table>\";\n        $(\"#userProcedures\").html(proceduresHtml);\n      }\n\n      this.setNewEntry(newEntry, highestId);\n      this.initPopoverEvents();\n\n      if ($(\"#eventListtnthproc tr\").length) {\n        $(\"#pastTreatmentsContainer\").fadeIn();\n      } else {\n        $(\"#pastTreatmentsContainer\").fadeOut();\n      }\n\n      $(\"#userProcedures\").append(otherHtml.join(\"\")); //other procedures\n    },\n    handleOtherProcedures: function handleOtherProcedures() {\n      var otherProcElements = $(\"#userProcedures input[name='otherProcedures']\");\n\n      if (!otherProcElements.length) {\n        return false;\n      }\n\n      otherProcElements.each(function () {\n        var code = $(this).attr(\"data-code\"),\n            procId = $(this).attr(\"data-id\");\n\n        if ([_SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CANCER_TREATMENT_CODE, _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].NONE_TREATMENT_CODE].indexOf(code) !== -1) {\n          //remove any procedure on prostate or none treatment\n          _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteProc(procId);\n        }\n      });\n    },\n    setAccountCreationRowDisplay: function setAccountCreationRowDisplay(procArray) {\n      procArray = procArray || {};\n\n      if ($(\"#pastTreatmentsContainer tr[data-code='\" + procArray[\"code\"] + \"'][data-performedDateTime='\" + procArray[\"performedDateTime\"] + \"']\").length === 0) {\n        var content = [];\n        content.push(\"<tr \");\n        var arrProcAttrs = [];\n\n        for (var item in procArray) {\n          /*eslint guard-for-in: off, security/detect-object-injection: off */\n          arrProcAttrs.push(\"data-\" + item + \"='\" + procArray[item] + \"'\");\n        }\n\n        content.push(arrProcAttrs.join(\" \"));\n        content.push(\">\");\n        content.push(\"<td>&#9679;</td><td>\" + procArray[\"display\"] + \"</td><td>\" + procArray[\"performedDateTime\"] + \"</td><td><a class='btn btn-default btn-xs data-delete'>\" + i18next.t(\"REMOVE\") + \"</a></td>\");\n        content.push(\"</tr>\");\n        $(\"#pastTreatmentsContainer\").append(content.join(\"\"));\n        setTimeout(function () {\n          $(\"#pastTreatmentsContainer\").show();\n        }, 100);\n      }\n    },\n    initFieldExtension: function initFieldExtension() {\n      var self = this;\n      $.fn.extend({\n        // Special type of select question - passes two values - the answer from - the select plus an associated date from a separate input\n        eventInput: function eventInput() {\n          $(this).on(\"click\", function (e) {\n            e.stopImmediatePropagation();\n            $(this).attr(\"disabled\", true); // First disable button to prevent double-clicks\n\n            var isAccountCreation = $(this).attr(\"data-account-create\");\n            var subjectId = self.subjectId,\n                selectVal = $(this).attr(\"data-name\"),\n                selectDate = $(this).attr(\"data-date\"),\n                selectSystem = $(this).attr(\"data-system\");\n\n            if (!selectVal || !selectDate) {\n              return false;\n            }\n\n            var selectFriendly = $(\"#tnthproc option:selected\").text();\n            var procArray = {\n              resourceType: \"Procedure\",\n              performedDateTime: selectDate,\n              system: selectSystem\n            };\n            /* eslint detect-object-injection: off*/\n\n            if (isAccountCreation) {\n              procArray[\"display\"] = selectFriendly;\n              procArray[\"code\"] = selectVal;\n              self.setAccountCreationRowDisplay(procArray);\n            } else {\n              self.handleOtherProcedures();\n              var procID = [{\n                \"code\": selectVal,\n                \"display\": selectFriendly,\n                system: selectSystem\n              }];\n              procArray[\"subject\"] = {\n                \"reference\": \"Patient/\" + subjectId\n              };\n              procArray[\"code\"] = {\n                \"coding\": procID\n              };\n              _TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].postProc(subjectId, procArray);\n              $(\"#eventListLoad\").show();\n              setTimeout(function () {\n                // Set a delay before getting updated list. Mostly to give user sense of progress/make it more obvious when the updated list loads\n                self.getUserProcedures(true);\n              }, 1800);\n              $(\"#pastTreatmentsContainer\").hide();\n            }\n\n            self.reset();\n            return false;\n          });\n        }\n      }); // $.fn.extend({\n    },\n    reset: function reset() {\n      $(\"#tnthproc\").val(\"\"); //treatment select element\n\n      $(\"#procDay, #procMonth, #procYear\").val(\"\"); //date fields\n\n      $(\"#tnthproc-submit\").addClass(\"disabled\").attr({\n        \"data-name\": \"\",\n        \"data-date\": \"\",\n        \"data-date-read\": \"\",\n        \"data-system\": \"\"\n      }); // Clear submit button\n    },\n    checkSubmit: function checkSubmit(btnId) {\n      // Add/remove disabled from submit button\n      if (String($(btnId).attr(\"data-name\")) !== \"\" && String($(btnId).attr(\"data-date-read\")) !== \"\") {\n        $(btnId).removeClass(\"disabled\").removeAttr(\"disabled\");\n      } else {\n        $(btnId).addClass(\"disabled\").attr(\"disabled\", true);\n      }\n    },\n    convertToNumericField: function convertToNumericField(field) {\n      if (\"ontouchstart\" in window || typeof window.DocumentTouch !== \"undefined\" && document instanceof window.DocumentTouch) {\n        $(field).each(function () {\n          $(this).prop(\"type\", \"tel\");\n        });\n      }\n    },\n    isTouchScreen: function isTouchScreen() {\n      return \"ontouchstart\" in window || window.DocumentTouch && document instanceof window.DocumentTouch;\n    },\n    checkDate: function checkDate() {\n      var df = $(\"#procDay\"),\n          mf = $(\"#procMonth\"),\n          yf = $(\"#procYear\");\n      var d = df.val(),\n          y = yf.val();\n      var deField = $(\"#procDateErrorContainer\"),\n          errorClass = \"error-message\";\n\n      if (!d || !/(19|20)\\d{2}/.test(y)) {\n        return false;\n      }\n\n      if (!_TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].validateDateInputFields(mf.val(), df.val(), yf.val(), \"procDateErrorContainer\")) {\n        deField.text(i18next.t(\"The procedure date must be valid and in required format.\")).addClass(errorClass);\n        return false;\n      }\n\n      deField.text(\"\").removeClass(errorClass);\n      return true;\n    },\n    setDate: function setDate() {\n      var isValid = this.checkDate();\n\n      if (isValid) {\n        var passedDate = this.dateFields.map(function (fn) {\n          return $(\"#\" + fn).val();\n        }).join(\"/\");\n        $(\"#tnthproc-submit\").attr(\"data-date-read\", passedDate);\n        $(\"#tnthproc-submit\").attr(\"data-date\", _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].swap_mm_dd(passedDate));\n      } else {\n        $(\"#tnthproc-submit\").attr({\n          \"data-date-read\": \"\",\n          \"data-date\": \"\"\n        });\n      }\n\n      this.checkSubmit(\"#tnthproc-submit\");\n    }\n  };\n  return ProcApp;\n})());\n/*eslint wrap-iife: off */\n\n//# sourceURL=webpack:///./static/js/src/modules/Procedures.js?");

/***/ }),

/***/ "./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js":
/*!*********************************************************!*\
  !*** ./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  \"external_study_id\": \"http://us.truenth.org/identity-codes/external-study-id\",\n  \"external_site_id\": \"http://us.truenth.org/identity-codes/external-site-id\",\n  \"practice_region\": \"http://us.truenth.org/identity-codes/practice-region\",\n  \"race\": \"http://hl7.org/fhir/StructureDefinition/us-core-race\",\n  \"race_system\": \"http://hl7.org/fhir/v3/Race\",\n  \"ethnicity\": \"http://hl7.org/fhir/StructureDefinition/us-core-ethnicity\",\n  \"ethnicity_system\": \"http://hl7.org/fhir/v3/Ethnicity\",\n  \"indigenous\": \"http://us.truenth.org/fhir/StructureDefinition/AU-NHHD-METeOR-id-291036\",\n  \"timezone\": \"http://hl7.org/fhir/StructureDefinition/user-timezone\",\n  \"language\": \"http://hl7.org/fhir/valueset/languages\",\n  \"language_system\": \"urn:ietf:bcp:47\",\n  \"shortname\": \"http://us.truenth.org/identity-codes/shortname\",\n  SNOMED_SYS_URL: \"http://snomed.info/sct\",\n  CLINICAL_SYS_URL: \"http://us.truenth.org/clinical-codes\",\n  CANCER_TREATMENT_CODE: \"118877007\",\n  NONE_TREATMENT_CODE: \"999\"\n});\n\n//# sourceURL=webpack:///./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js?");

/***/ }),

/***/ "./static/js/src/modules/TnthAjax.js":
/*!*******************************************!*\
  !*** ./static/js/src/modules/TnthAjax.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ \"./static/js/src/modules/Utility.js\");\n/* harmony import */ var _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TnthDate.js */ \"./static/js/src/modules/TnthDate.js\");\n/* harmony import */ var _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SYSTEM_IDENTIFIER_ENUM.js */ \"./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js\");\n/* harmony import */ var _CLINICAL_CODE_ENUM_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CLINICAL_CODE_ENUM.js */ \"./static/js/src/modules/CLINICAL_CODE_ENUM.js\");\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  /*global $ */\n  \"beforeSend\": function beforeSend() {\n    $.ajaxSetup({\n      beforeSend: function beforeSend(xhr, settings) {\n        if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {\n          xhr.setRequestHeader(\"X-CSRFToken\", $(\"#__CRSF_TOKEN\").val());\n        }\n      }\n    });\n  },\n  \"sendRequest\": function sendRequest(url, method, userId, params, callback) {\n    if (!url) {\n      return false;\n    }\n\n    var defaultParams = {\n      type: method ? method : \"GET\",\n      url: url,\n      attempts: 0,\n      max_attempts: 3,\n      contentType: \"application/json; charset=utf-8\",\n      dataType: \"json\",\n      sync: false,\n      timeout: 5000,\n      data: null,\n      useWorker: false,\n      async: true\n    };\n    params = params || defaultParams;\n    params = $.extend({}, defaultParams, params);\n    params.async = params.sync ? false : params.async;\n    var self = this;\n    var fieldHelper = this.FieldLoaderHelper,\n        targetField = params.targetField || null;\n\n    callback = callback || function () {};\n\n    params.attempts++;\n    fieldHelper.showLoader(targetField);\n\n    if (params.useWorker && window.Worker && !_Utility_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTouchDevice()) {\n      /*global isTouchDevice()*/\n      _Utility_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].initWorker(url, params, function (result) {\n        /*global initWorker*/\n        var data;\n\n        try {\n          data = JSON.parse(result);\n        } catch (e) {\n          callback({\n            error: \"Error occurred parsing data for \" + url\n          });\n          return false;\n        }\n\n        if (!data) {\n          callback({\n            \"error\": true,\n            \"data\": \"no data returned\"\n          });\n          fieldHelper.showError(targetField);\n        } else if (data.error) {\n          callback({\n            \"error\": true,\n            \"data\": data\n          });\n          self.sendError(data, url, userId, params);\n          fieldHelper.showError(targetField);\n        } else {\n          callback(data);\n          fieldHelper.showUpdate(targetField);\n        }\n      });\n      return true;\n    }\n\n    if (!params.cache) {\n      params.headers = {\n        \"cache-control\": \"no-cache\",\n        \"expires\": \"-1\",\n        \"pragma\": \"no-cache\"\n      };\n    }\n\n    $.ajax(params).done(function (data) {\n      params.attempts = 0;\n\n      if (data) {\n        fieldHelper.showUpdate(targetField);\n        callback(data);\n      } else {\n        fieldHelper.showError(targetField);\n        callback({\n          \"error\": true,\n          \"data\": \"no data returned\"\n        });\n      }\n    }).fail(function (xhr) {\n      if (params.attempts < params.max_attempts) {\n        (function (self, url, method, userId, params, callback) {\n          setTimeout(function () {\n            self.sendRequest(url, method, userId, params, callback);\n          }, 3000); //retry after 3 seconds\n        })(self, url, method, userId, params, callback);\n      } else {\n        params.attempts = 0;\n        fieldHelper.showError(targetField);\n        callback({\n          \"error\": true,\n          \"data\": xhr\n        });\n        self.sendError(xhr, url, userId, params);\n      }\n    });\n  },\n  \"sendError\": function sendError(xhr, url, userId, params) {\n    if (!xhr) {\n      return false;\n    }\n\n    var errorMessage = \"[Error occurred processing request]  status - \" + (parseInt(xhr.status) === 0 ? \"request timed out/network error\" : xhr.status) + \", response text - \" + (xhr.responseText ? xhr.responseText : \"no response text returned from server\");\n\n    if (params) {\n      try {\n        errorMessage += \" [data sent]: \" + JSON.stringify(params); //error can happen if for some reason the params are malformed\n      } catch (e) {\n        errorMessage += \" Error occurred transforming sent data: \" + e.message;\n      }\n    }\n\n    this.reportError(userId ? userId : \"Not available\", url, errorMessage, true);\n  },\n  \"reportError\": function reportError(userId, page_url, message, sync) {\n    //params need to contain the following: subject_id: User on which action is being attempted message: Details of the error event page_url: The page requested resulting in the error\n    var params = {};\n    page_url = page_url || window.location.href;\n    params.subject_id = userId || 0;\n    params.page_url = page_url;\n    params.message = \"Error generated in JS - \" + (message ? message.replace(/[\"']/g, \"\") : \"no detail available\"); //don't think we want to translate message sent back to the server here\n\n    console.log(\"Errors occurred.....\");\n    /*eslint no-console: off */\n\n    console.log(params);\n    /*global console*/\n\n    $.ajax({\n      type: \"GET\",\n      url: \"/report-error\",\n      contentType: \"application/json; charset=utf-8\",\n      cache: false,\n      async: sync ? false : true,\n      data: params\n    }).done(function () {}).fail(function () {});\n  },\n  \"FieldLoaderHelper\": {\n    delayDuration: 300,\n    showLoader: function showLoader(targetField) {\n      if (!targetField || targetField.length === 0) {\n        return false;\n      }\n\n      var el = $(\"#\" + (targetField.attr(\"data-save-container-id\") || targetField.attr(\"id\")) + \"_load\");\n      el.css(\"opacity\", 1);\n      el.addClass(\"loading\");\n    },\n    showUpdate: function showUpdate(targetField) {\n      var __timeout = this.delayDuration;\n\n      if (!targetField || targetField.length === 0) {\n        return false;\n      }\n\n      setTimeout(function () {\n        (function (targetField) {\n          var containerId = targetField.attr(\"data-save-container-id\") || targetField.attr(\"id\");\n          var errorField = $(\"#\" + containerId + \"_error\");\n          var successField = $(\"#\" + containerId + \"_success\");\n          var loadingField = $(\"#\" + containerId + \"_load\");\n          loadingField.removeClass(\"loading\");\n          errorField.text(\"\").css(\"opacity\", 0);\n          successField.text(i18next.t(\"success\"));\n          loadingField.animate({\n            \"opacity\": 0\n          }, __timeout, function () {\n            successField.animate({\n              \"opacity\": 1\n            }, __timeout, function () {\n              setTimeout(function () {\n                successField.animate({\n                  \"opacity\": 0\n                }, __timeout * 2);\n              }, __timeout * 2);\n            });\n          });\n        })(targetField);\n      }, __timeout);\n    },\n    showError: function showError(targetField) {\n      targetField = targetField || $(targetField);\n      var __timeout = this.delayDuration;\n\n      if (!targetField || targetField.length === 0) {\n        return false;\n      }\n\n      setTimeout(function () {\n        (function (targetField) {\n          var containerId = targetField.attr(\"data-save-container-id\") || targetField.attr(\"id\");\n          var errorField = $(\"#\" + containerId + \"_error\");\n          var successField = $(\"#\" + containerId + \"_success\");\n          var loadingField = $(\"#\" + containerId + \"_load\");\n          loadingField.removeClass(\"loading\");\n          errorField.text(i18next.t(\"Unable to update. System/Server Error.\"));\n          successField.text(\"\").css(\"opacity\", 0);\n          loadingField.animate({\n            \"opacity\": 0\n          }, __timeout, function () {\n            errorField.animate({\n              \"opacity\": 1\n            }, __timeout, function () {\n              setTimeout(function () {\n                errorField.animate({\n                  \"opacity\": 0\n                }, __timeout * 2);\n              }, __timeout * 2);\n            });\n          });\n        })(targetField);\n      }, __timeout);\n    }\n  },\n  \"getCurrentUser\": function getCurrentUser(callback, params) {\n    callback = callback || function () {};\n\n    if (sessionStorage.currentUser) {\n      callback(JSON.parse(sessionStorage.currentUser));\n    } else {\n      this.sendRequest(\"/api/me\", \"GET\", \"\", params, function (data) {\n        if (data && data.id) {\n          //make sure the necessary data is there before setting session\n          sessionStorage.setItem(\"currentUser\", JSON.stringify(data));\n        }\n\n        callback(data);\n      });\n    }\n  },\n  \"getStillNeededCoreData\": function getStillNeededCoreData(userId, sync, callback, entry_method) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User Id is required\")\n      });\n      return false;\n    }\n\n    var __url = \"/api/coredata/user/\" + userId + \"/still_needed\" + (entry_method ? \"?entry_method=\" + entry_method.replace(/\\_/g, \" \") : \"\");\n\n    this.sendRequest(__url, \"GET\", userId, {\n      sync: sync,\n      cache: true\n    }, function (data) {\n      if (!data) {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n        return false;\n      }\n\n      if (data.error) {\n        callback({\n          \"error\": i18next.t(\"unable to get needed core data\")\n        });\n        return false;\n      }\n\n      callback(data);\n    });\n  },\n  \"getRequiredCoreData\": function getRequiredCoreData(userId, sync, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User Id is required\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/coredata/user/\" + userId + \"/required\", \"GET\", userId, {\n      sync: sync,\n      cache: true\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          if (data.required) {\n            callback(data.required);\n          } else {\n            callback({\n              \"error\": i18next.t(\"no data returned\")\n            });\n          }\n        } else {\n          callback({\n            \"error\": i18next.t(\"unable to get required core data\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"getOptionalCoreData\": function getOptionalCoreData(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User Id is required\")\n      });\n      return false;\n    }\n\n    var __url = \"/api/coredata/user/\" + userId + \"/optional\",\n        sessionStorageKey = \"optionalCoreData_\" + userId;\n\n    if (sessionStorage.getItem(sessionStorageKey)) {\n      callback(JSON.parse(sessionStorage.getItem(sessionStorageKey)));\n    } else {\n      this.sendRequest(__url, \"GET\", userId, params, function (data) {\n        if (data) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"no data found\")\n          });\n        }\n      });\n    }\n  },\n  \"getPortalFooter\": function getPortalFooter(userId, sync, containerId, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback(\"<div class='error-message'>\" + i18next.t(\"User Id is required\") + \"</div>\");\n      return false;\n    }\n\n    this.sendRequest(\"/api/portal-footer-html/\", \"GET\", userId, {\n      sync: sync,\n      cache: true,\n      \"dataType\": \"html\"\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          if (containerId) {\n            $(\"#\" + containerId).html(data);\n          }\n\n          callback(data);\n        } else {\n          callback(\"<div class='error-message'>\" + i18next.t(\"Unable to retrieve portal footer html\") + \"</div>\");\n        }\n      } else {\n        callback(\"<div class='error-message'>\" + i18next.t(\"No data found\") + \"</div>\");\n      }\n    });\n  },\n  \"getOrgs\": function getOrgs(userId, params, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/organization\", \"GET\", userId, params, function (data) {\n      if (sessionStorage.demoOrgsData) {\n        callback(JSON.parse(sessionStorage.demoOrgsData));\n        return true;\n      }\n\n      if (!data.error) {\n        $(\".get-orgs-error\").html(\"\");\n        sessionStorage.setItem(\"demoOrgsData\", JSON.stringify(data));\n        callback(data);\n      } else {\n        var errorMessage = i18next.t(\"Server error occurred retrieving organization/clinic information.\");\n        $(\".get-orgs-error\").html(errorMessage);\n        callback({\n          \"error\": errorMessage\n        });\n      }\n    });\n  },\n  \"getConsent\": function getConsent(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/consent\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          $(\".get-consent-error\").html(\"\");\n          callback(data);\n          return true;\n        } else {\n          var errorMessage = i18next.t(\"Server error occurred retrieving consent information.\");\n          callback({\n            \"error\": errorMessage\n          });\n          $(\".get-consent-error\").html(errorMessage);\n          return false;\n        }\n      }\n    });\n  },\n  \"setConsent\": function setConsent(userId, params, status, sync, callback) {\n    callback = callback || function () {};\n\n    if (!userId && !params) {\n      callback({\n        \"error\": i18next.t(\"User id and parameters are required\")\n      });\n      return false;\n    }\n\n    var consented = this.hasConsent(userId, params.org, status);\n\n    var __url = \"/api/user/\" + userId + \"/consent\";\n\n    if (consented && !params.testPatient) {\n      callback({\n        \"error\": false\n      });\n      return;\n    }\n\n    var data = {};\n    data.user_id = userId;\n    data.organization_id = params.org;\n    data.agreement_url = params.agreementUrl;\n    data.staff_editable = String(params.staff_editable) !== \"null\" && String(params.staff_editable) !== \"undefined\" ? params.staff_editable : false;\n    data.include_in_reports = String(params.include_in_reports) !== \"null\" && String(params.include_in_reports) !== \"undefined\" ? params.include_in_reports : false;\n    data.send_reminders = String(params.send_reminders) !== \"null\" && String(params.send_reminders) !== \"undefined\" ? params.send_reminders : false;\n\n    if (params.acceptance_date) {\n      data.acceptance_date = params.acceptance_date;\n    }\n\n    this.sendRequest(__url, \"POST\", userId, {\n      sync: sync,\n      data: JSON.stringify(data)\n    }, function (data) {\n      if (!data.error) {\n        $(\".set-consent-error\").html(\"\");\n        callback(data);\n      } else {\n        var errorMessage = i18next.t(\"Server error occurred setting consent status.\");\n        callback({\n          \"error\": errorMessage\n        });\n        $(\".set-consent-error\").html(errorMessage);\n      }\n    });\n  },\n  deleteConsent: function deleteConsent(userId, params) {\n    if (!userId) {\n      return false;\n    }\n\n    params = params || {};\n    var consented = this.getAllValidConsent(userId, params.org);\n\n    if (!consented) {\n      return false;\n    }\n\n    var arrExcludedOrgIds = params.exclude ? params.exclude.split(\",\") : [];\n    var arrConsents = $.grep(consented, function (orgId) {\n      var inArray = $.grep(arrExcludedOrgIds, function (eOrg) {\n        return String(eOrg) === String(orgId);\n      });\n      return !inArray.length; //filter out org Id(s) that are in the array of org Ids to be excluded;\n    });\n    var self = this;\n    arrConsents.forEach(function (orgId) {\n      //delete all consents for the org\n      self.sendRequest(\"/api/user/\" + userId + \"/consent\", \"DELETE\", userId, {\n        data: JSON.stringify({\n          \"organization_id\": parseInt(orgId)\n        })\n      }, function (data) {\n        if (!data) {\n          return false;\n        }\n\n        if (!data.error) {\n          $(\".delete-consent-error\").html(\"\");\n        } else {\n          $(\".delete-consent-error\").html(i18next.t(\"Server error occurred removing consent.\"));\n        }\n      });\n    });\n  },\n  withdrawConsent: function withdrawConsent(userId, orgId, params, callback) {\n    callback = callback || function () {};\n\n    params = params || {};\n\n    if (!userId || !orgId) {\n      callback({\n        \"error\": i18next.t(\"User id and organization id are required.\")\n      });\n      return false;\n    }\n\n    var self = this,\n        arrConsent = [];\n    this.sendRequest(\"/api/user/\" + userId + \"/consent\", \"GET\", userId, params, function (data) {\n      if (data && data.consent_agreements && data.consent_agreements.length) {\n        arrConsent = $.grep(data.consent_agreements, function (item) {\n          var expired = _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDateDiff(String(item.expires));\n          /*global tnthDates */\n\n          return String(orgId) === String(item.organization_id) && !item.deleted && !(expired > 0) && String(item.status) === \"suspended\";\n        });\n      }\n\n      if (arrConsent.length) {\n        //don't send request if suspended consent already existed\n        callback({\n          \"data\": \"success\"\n        });\n        return false;\n      }\n\n      self.sendRequest(\"/api/user/\" + userId + \"/consent/withdraw\", \"POST\", userId, {\n        sync: params.sync,\n        data: JSON.stringify({\n          organization_id: orgId\n        })\n      }, function (data) {\n        if (data.error) {\n          callback({\n            \"error\": i18next.t(\"Error occurred setting suspended consent status.\")\n          });\n          return false;\n        }\n\n        callback(data);\n      });\n    });\n  },\n  getAllValidConsent: function getAllValidConsent(userId, orgId) {\n    if (!userId || !orgId) {\n      return false;\n    }\n\n    var consentedOrgIds = [];\n    this.sendRequest(\"/api/user/\" + userId + \"/consent\", \"GET\", userId, {\n      sync: true\n    }, function (data) {\n      if (!data || data.error || !data.consent_agreements || !data.consent_agreements.length) {\n        return consentedOrgIds;\n      }\n\n      consentedOrgIds = $.grep(data.consent_agreements, function (item) {\n        var expired = _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDateDiff(String(item.expires));\n        return !item.deleted && !(expired > 0) && (String(orgId).toLowerCase() === \"all\" || String(orgId) === String(item.organization_id));\n      });\n      consentedOrgIds = consentedOrgIds.map(function (item) {\n        return item.organization_id;\n      });\n      return consentedOrgIds;\n    });\n    return consentedOrgIds;\n  },\n  hasConsent: function hasConsent(userId, orgId, filterStatus) {\n    /****** NOTE - this will return the latest updated consent entry *******/\n    if (!userId || !orgId || String(filterStatus) === \"default\") {\n      return false;\n    }\n\n    var consentedOrgIds = [];\n\n    var __url = \"/api/user/\" + userId + \"/consent\",\n        self = this;\n\n    self.sendRequest(__url, \"GET\", userId, {\n      sync: true\n    }, function (data) {\n      if (!data || data.error || data.consent_agreements && data.consent_agreements.length === 0) {\n        return false;\n      }\n\n      consentedOrgIds = $.grep(data.consent_agreements, function (item) {\n        var expired = item.expires ? _TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getDateDiff(String(item.expires)) : 0;\n        /*global tnthDates */\n\n        return String(orgId) === String(item.organization_id) && !item.deleted && !(expired > 0) && item.staff_editable && item.send_reminders && item.include_in_reports;\n      });\n    });\n    return consentedOrgIds.length;\n  },\n  \"getDemo\": function getDemo(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    params = params || {};\n    var demoDataKey = \"demoData_\" + userId;\n\n    if (sessionStorage.getItem(demoDataKey)) {\n      callback(JSON.parse(sessionStorage.getItem(demoDataKey)));\n      return;\n    }\n\n    this.sendRequest(\"/api/demographics/\" + userId, \"GET\", userId, params, function (data) {\n      var errorMessage = \"\";\n\n      if (data.error) {\n        errorMessage = i18next.t(\"Server error occurred retrieving demographics information.\");\n        $(\".get-demo-error\").html(errorMessage);\n        callback({\n          \"error\": errorMessage\n        });\n        return false;\n      }\n\n      $(\".get-demo-error\").html(errorMessage);\n      sessionStorage.setItem(demoDataKey, JSON.stringify(data));\n      callback(data);\n    });\n  },\n  \"clearDemoSessionData\": function clearDemoSessionData(userId) {\n    sessionStorage.removeItem(\"demoData_\" + userId);\n  },\n  \"putDemo\": function putDemo(userId, toSend, targetField, sync, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User Id is required\")\n      });\n      return false;\n    }\n\n    this.clearDemoSessionData(userId);\n    this.sendRequest(\"/api/demographics/\" + userId, \"PUT\", userId, {\n      sync: sync,\n      data: JSON.stringify(toSend),\n      targetField: targetField\n    }, function (data) {\n      if (!data.error) {\n        $(\".put-demo-error\").html(\"\");\n      } else {\n        $(\".put-demo-error\").html(i18next.t(\"Server error occurred setting demographics information.\"));\n      }\n\n      callback(data);\n    });\n  },\n  \"getLocale\": function getLocale(userId) {\n    this.sendRequest(\"/api/demographics/\" + userId, \"GET\", userId, null, function (data) {\n      if (data) {\n        if (!data.error) {\n          if (data.communication) {\n            $(\"#profileLocaleTimezoneContainer .get-locale-error\").html(\"\");\n          }\n        } else {\n          $(\"#profileLocaleTimezoneContainer .get-locale-error\").html(i18next.t(\"Server error occurred retrieving locale information.\"));\n        }\n      }\n    });\n  },\n  \"hasTreatment\": function hasTreatment(data) {\n    if (!data || !data.entry || data.entry.length === 0) {\n      return false;\n    }\n\n    var sortedArray = data.entry.sort(function (a, b) {\n      // sort from newest to oldest based on lsat updated date\n      return new Date(b.resource.meta.lastUpdated) - new Date(a.resource.meta.lastUpdated);\n    });\n    var found = false;\n    sortedArray.forEach(function (item) {\n      if (found) {\n        return true;\n      }\n\n      var resourceItemCode = String(item.resource.code.coding[0].code);\n      var system = String(item.resource.code.coding[0].system);\n      var procId = item.resource.id;\n\n      if (resourceItemCode === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANCER_TREATMENT_CODE && system === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SNOMED_SYS_URL || resourceItemCode === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NONE_TREATMENT_CODE && system === _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CLINICAL_SYS_URL) {\n        found = {\n          \"code\": resourceItemCode,\n          \"id\": procId\n        };\n      }\n    });\n    return found;\n  },\n  \"getTreatment\": function getTreatment(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/procedure\", \"GET\", userId, params, function (data) {\n      if (data.error) {\n        $(\"#userProcedures\").html(\"<span class='error-message'>\" + i18next.t(\"Error retrieving data from server\") + \"</span>\");\n      }\n\n      callback(data);\n    });\n  },\n  \"postTreatment\": function postTreatment(userId, started, treatmentDate, targetField) {\n    if (!userId) {\n      return false;\n    }\n\n    this.deleteTreatment(userId, targetField);\n    var code = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].NONE_TREATMENT_CODE,\n        display = \"None\",\n        system = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CLINICAL_SYS_URL;\n\n    if (started) {\n      code = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANCER_TREATMENT_CODE;\n      display = \"Procedure on prostate\";\n      system = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SNOMED_SYS_URL;\n    }\n\n    if (!treatmentDate) {\n      var date = new Date();\n      treatmentDate = date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate(); //in yyyy-mm-dd format\n    }\n\n    var procID = [{\n      \"code\": code,\n      \"display\": display,\n      \"system\": system\n    }];\n    var procArray = {};\n    procArray.resourceType = \"Procedure\";\n    procArray.subject = {\n      \"reference\": \"Patient/\" + userId\n    };\n    procArray.code = {\n      \"coding\": procID\n    };\n    procArray.performedDateTime = treatmentDate ? treatmentDate : \"\";\n    this.postProc(userId, procArray, targetField);\n  },\n  deleteTreatment: function deleteTreatment(userId, targetField) {\n    var self = this;\n    this.sendRequest(\"/api/patient/\" + userId + \"/procedure\", \"GET\", userId, {\n      sync: true\n    }, function (data) {\n      if (!data || data.error) {\n        return false;\n      }\n\n      var treatmentData = self.hasTreatment(data);\n\n      if (!treatmentData) {\n        return false;\n      }\n\n      if (String(treatmentData.code) === String(_SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANCER_TREATMENT_CODE)) {\n        self.deleteProc(treatmentData.id, targetField, true);\n        return true;\n      }\n\n      self.deleteProc(treatmentData.id, targetField, true);\n    });\n  },\n  \"getProc\": function getProc(userId, newEntry, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/procedure\", \"GET\", userId, null, function (data) {\n      callback(data);\n    });\n  },\n  \"postProc\": function postProc(userId, toSend, targetField, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/procedure\", \"POST\", userId, {\n      data: JSON.stringify(toSend),\n      targetField: targetField\n    }, function (data) {\n      if (!data) {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n        return false;\n      }\n\n      if (data.error) {\n        var errorMessage = i18next.t(\"Server error occurred saving procedure/treatment information.\");\n        $(\"#userProcuedures .get-procs-error\").html(errorMessage);\n        callback({\n          error: errorMessage\n        });\n        return false;\n      }\n\n      $(\".get-procs-error\").html(\"\");\n      callback(data);\n    });\n  },\n  \"deleteProc\": function deleteProc(procedureId, targetField, sync) {\n    this.sendRequest(\"/api/procedure/\" + procedureId, \"DELETE\", null, {\n      sync: sync,\n      targetField: targetField\n    }, function (data) {\n      if (!data.error) {\n        $(\".del-procs-error\").html(\"\");\n      } else {\n        $(\".del-procs-error\").html(i18next.t(\"Server error occurred removing procedure/treatment information.\"));\n      }\n    });\n  },\n  \"getRoleList\": function getRoleList(params, callback) {\n    this.sendRequest(\"/api/roles\", \"GET\", null, params, function (data) {\n      callback = callback || function () {};\n\n      if (!data.error) {\n        callback(data);\n      } else {\n        var errorMessage = i18next.t(\"Server error occurred retrieving roles information.\");\n        $(\".get-roles-error\").html(errorMessage);\n        callback({\n          \"error\": errorMessage\n        });\n      }\n    });\n  },\n  \"getRoles\": function getRoles(userId, callback, params) {\n    callback = callback || function () {};\n\n    var sessionStorageKey = \"userRole_\" + userId;\n\n    if (sessionStorage.getItem(sessionStorageKey)) {\n      var data = JSON.parse(sessionStorage.getItem(sessionStorageKey));\n      callback(data);\n    } else {\n      this.sendRequest(\"/api/user/\" + userId + \"/roles\", \"GET\", userId, params, function (data) {\n        if (data) {\n          if (!data.error) {\n            $(\".get-roles-error\").html(\"\");\n            sessionStorage.setItem(sessionStorageKey, JSON.stringify(data));\n            callback(data);\n          } else {\n            var errorMessage = i18next.t(\"Server error occurred retrieving user role information.\");\n            $(\".get-roles-error\").html(errorMessage);\n            callback({\n              \"error\": errorMessage\n            });\n          }\n        }\n      });\n    }\n  },\n  \"removeCachedRoles\": function removeCachedRoles(userId) {\n    sessionStorage.removeItem(\"userRole_\" + userId);\n  },\n  \"putRoles\": function putRoles(userId, toSend, targetField, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User Id is required.\")\n      });\n      return false;\n    }\n\n    this.removeCachedRoles(userId);\n    this.sendRequest(\"/api/user/\" + userId + \"/roles\", \"PUT\", userId, {\n      data: JSON.stringify(toSend),\n      targetField: targetField\n    }, function (data) {\n      if (!data || data.error) {\n        var errorMessage = i18next.t(\"Server error occurred setting user role information.\");\n        $(\".put-roles-error\").html(errorMessage);\n        callback({\n          error: errorMessage\n        });\n        return;\n      }\n\n      $(\".put-roles-error\").html(\"\");\n      sessionStorage.setItem(\"userRole_\" + userId, \"\");\n      callback(data);\n    });\n  },\n  \"deleteRoles\": function deleteRoles(userId, toSend) {\n    if (!userId) {\n      return false;\n    }\n\n    this.removeCachedRoles(userId);\n    this.sendRequest(\"/api/user/\" + userId, \"GET\", userId, {\n      data: JSON.stringify(toSend)\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          $(\".delete-roles-error\").html(\"\");\n        } else {\n          $(\".delete-roles-error\").html(i18next.t(\"Server error occurred deleting user role.\"));\n        }\n      }\n    });\n  },\n  \"getClinical\": function getClinical(userId, params, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/clinical\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          $(\".get-clinical-error\").html(\"\");\n          callback(data);\n        } else {\n          var errorMessage = i18next.t(\"Server error occurred retrieving clinical data.\");\n          $(\".get-clinical-error\").html(errorMessage);\n          callback({\n            \"error\": errorMessage\n          });\n        }\n      }\n    });\n  },\n  \"getObservationId\": function getObservationId(userId, code) {\n    if (!userId) {\n      return false;\n    }\n\n    var obId = \"\",\n        _code = \"\";\n    this.sendRequest(\"/api/patient/\" + userId + \"/clinical\", \"GET\", userId, {\n      sync: true\n    }, function (data) {\n      if (!data || data.error || !data.entry) {\n        return obId;\n      }\n\n      data.entry.forEach(function (item) {\n        if (!obId) {\n          _code = item.content.code.coding[0].code;\n\n          if (String(_code) === String(code)) {\n            obId = item.content.id;\n          }\n        }\n      });\n    });\n    return obId;\n  },\n  \"postClinical\": function postClinical(userId, toCall, toSend, status, targetField, params, callback) {\n    if (!userId) {\n      return false;\n    }\n\n    params = params || {};\n    var code = \"\",\n        display = \"\";\n\n    if (_CLINICAL_CODE_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].hasOwnProperty(String(toCall).toLowerCase())) {\n      var match = _CLINICAL_CODE_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"][toCall];\n      code = match.code;\n      display = match.display;\n    }\n\n    if (!code) {\n      return false;\n    }\n\n    var self = this;\n    var system = _SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CLINICAL_SYS_URL;\n    var method = \"POST\";\n    var url = \"/api/patient/\" + userId + \"/clinical\";\n    var obsCode = [{\n      \"code\": code,\n      \"display\": display,\n      \"system\": system\n    }];\n    var obsArray = {};\n    obsArray.resourceType = \"Observation\";\n    obsArray.code = {\n      \"coding\": obsCode\n    };\n    obsArray.issued = params.issuedDate ? params.issuedDate : \"\";\n    obsArray.status = status ? status : \"\";\n    obsArray.valueQuantity = {\n      \"units\": \"boolean\",\n      \"value\": toSend\n    };\n\n    if (params.performer) {\n      obsArray.performer = params.performer;\n    }\n\n    var obsId = self.getObservationId(userId, code);\n\n    if (obsId) {\n      method = \"PUT\";\n      url = url + \"/\" + obsId;\n    }\n\n    callback = callback || function () {};\n\n    this.sendRequest(url, method, userId, {\n      data: JSON.stringify(obsArray),\n      targetField: targetField\n    }, function (data) {\n      if (!data || data.error) {\n        var errorMessage = i18next.t(\"Server error occurred updating clinical data.\");\n        $(\".post-clinical-error\").html(errorMessage).show();\n        callback({\n          error: errorMessage\n        });\n        return;\n      }\n\n      $(\".post-clinical-error\").html(\"\").hide();\n      callback(data);\n    });\n  },\n  \"getTermsUrl\": function getTermsUrl(sync, callback) {\n    /*global i18next */\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/tou\", \"GET\", null, {\n      sync: sync\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          $(\".get-tou-error\").html(\"\");\n\n          if (data.url) {\n            $(\"#termsURL\").attr(\"data-url\", data.url);\n            $(\"#termsCheckbox_default .terms-url\").attr(\"href\", data.url);\n            callback({\n              \"url\": data.url\n            });\n          } else {\n            callback({\n              \"error\": i18next.t(\"no url returned\")\n            });\n          }\n        } else {\n          $(\".get-tou-error\").html(i18next.t(\"Server error occurred retrieving tou url.\"));\n          callback({\n            \"error\": i18next.t(\"Server error\")\n          });\n        }\n      }\n    });\n  },\n  \"getInstrumentsList\": function getInstrumentsList(sync, callback) {\n    //return instruments list by organization(s)\n    callback = callback || function () {};\n\n    this.sendRequest(\"api/questionnaire_bank\", \"GET\", null, {\n      sync: sync\n    }, function (data) {\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"error retrieving instruments list\")\n        });\n        return;\n      }\n\n      if (!data.entry || !data.entry.length) {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n        return;\n      }\n\n      var qList = {};\n      data.entry.forEach(function (item) {\n        if (item.organization) {\n          var orgID = item.organization.reference.split(\"/\")[2];\n\n          if (!qList[orgID]) {\n            qList[orgID] = []; //don't assign orgID to object if it was already present\n          }\n\n          if (item.questionnaires) {\n            item.questionnaires.forEach(function (q) {\n              /*\n               * add instrument name to instruments array for the org - will not add if it is already in the array\n               * NOTE: inArray returns -1 if the item is NOT in the array\n               */\n              if ($.inArray(q.questionnaire.display, qList[orgID]) === -1) {\n                qList[orgID].push(q.questionnaire.display);\n              }\n            });\n          }\n        }\n      });\n      callback(qList);\n    });\n  },\n  \"getTerms\": function getTerms(userId, type, sync, callback, params) {\n    callback = callback || function () {};\n\n    params = params || {};\n    var url = \"/api/user/{userId}/tou{type}{all}\".replace(\"{userId}\", userId).replace(\"{type}\", type ? \"/\" + type : \"\").replace(\"{all}\", params.hasOwnProperty(\"all\") ? \"?all=true\" : \"\");\n    this.sendRequest(url, \"GET\", userId, {\n      sync: sync\n    }, function (data) {\n      if (!data || data.error) {\n        var errorMessage = i18next.t(\"Server error occurred retrieving tou data.\");\n        $(\".get-tou-error\").html(errorMessage);\n        callback({\n          \"error\": errorMessage\n        });\n        return;\n      }\n\n      $(\".get-tou-error\").html(\"\");\n      callback(data);\n    });\n  },\n  \"postTermsByUser\": function postTermsByUser(userId, toSend, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/user/\" + userId + \"/tou/accepted\", \"POST\", userId, {\n      data: JSON.stringify(toSend)\n    }, function (data) {\n      if (!data || data.error) {\n        $(\".post-tou-error\").html(i18next.t(\"Server error occurred saving terms of use information.\"));\n        callback(data);\n        return;\n      }\n\n      $(\".post-tou-error\").html(\"\");\n      callback(data);\n    });\n  },\n  \"postTerms\": function postTerms(toSend, targetField, callback) {\n    callback = callback || function () {};\n\n    this.sendRequest(\"/api/tou/accepted\", \"POST\", null, {\n      data: JSON.stringify(toSend),\n      targetField: targetField\n    }, function (data) {\n      if (!data || data.error) {\n        var errorMessage = i18next.t(\"Server error occurred saving terms of use information.\");\n        $(\".post-tou-error\").html(errorMessage);\n        callback({\n          error: errorMessage\n        });\n        return;\n      }\n\n      $(\".post-tou-error\").html(\"\");\n      callback(data);\n    });\n  },\n  \"accessUrl\": function accessUrl(userId, sync, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/access_url\", \"GET\", userId, {\n      sync: sync\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback({\n            url: data.access_url\n          });\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving access url.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"invite\": function invite(userId, data, callback) {\n    callback = callback || function () {};\n\n    if (!data) {\n      callback({\n        \"error\": i18next.t(\"Invite data are required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/invite\", \"POST\", userId, {\n      \"contentType\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n      \"data\": data,\n      \"dataType\": \"html\"\n    }, function (data) {\n      if (data) {\n        callback(data);\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"passwordReset\": function passwordReset(userId, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/password_reset\", \"POST\", userId, {\n      \"contentType\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred sending password reset request.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"assessmentStatus\": function assessmentStatus(userId, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/assessment-status\", \"GET\", userId, null, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving assessment status.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"updateAssessment\": function updateAssessment(userId, data, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    if (!data) {\n      callback({\n        \"error\": i18next.t(\"Questionnaire response data is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/assessment\", \"PUT\", userId, {\n      data: JSON.stringify(data)\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving assessment list.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"assessmentList\": function assessmentList(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/assessment\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving assessment list.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"assessmentReport\": function assessmentReport(userId, instrumentId, callback) {\n    callback = callback || function () {};\n\n    if (!userId || !instrumentId) {\n      callback({\n        error: i18next.t(\"User id and instrument Id are required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/patient/\" + userId + \"/assessment/\" + instrumentId, \"GET\", userId, null, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving assessment report.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"getCurrentQB\": function getCurrentQB(userId, completionDate, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    params = params || {};\n    this.sendRequest(\"/api/user/\" + userId + \"/questionnaire_bank\", \"GET\", userId, {\n      data: {\n        as_of_date: completionDate\n      },\n      sync: params.sync\n    }, function (data) {\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred retrieving current questionnaire bank for user.\")\n        });\n        return false;\n      }\n\n      callback(data);\n    });\n  },\n  \"patientReport\": function patientReport(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/user_documents?document_type=PatientReport\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving patient report.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"setTablePreference\": function setTablePreference(userId, tableName, params, callback) {\n    callback = callback || function () {};\n\n    params = params || {};\n\n    if (!userId || !tableName) {\n      callback({\n        error: \"User Id and table name is required for setting preference.\"\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/table_preferences/\" + tableName, \"PUT\", userId, {\n      \"data\": params.data,\n      \"sync\": params.sync\n    }, function (data) {\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred setting table preference.\")\n        });\n        return false;\n      }\n\n      callback(data);\n    });\n  },\n  \"getTablePreference\": function getTablePreference(userId, tableName, params, callback) {\n    params = params || function () {};\n\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: \"User Id is required for setting preference.\"\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/table_preferences/\" + tableName, \"GET\", userId, params, function (data) {\n      if (data && data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred setting table preference.\")\n        });\n        return;\n      }\n\n      callback(data);\n    });\n  },\n  \"emailLog\": function emailLog(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/messages\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving email audit entries.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"auditLog\": function auditLog(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/audit\", \"GET\", userId, params, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving audit log.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"setting\": function setting(key, userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!key) {\n      callback({\n        \"error\": i18next.t(\"configuration key is required.\")\n      });\n      return false;\n    }\n\n    params = params || {};\n    this.sendRequest(\"/api/settings/\" + key, \"GET\", userId, {\n      \"sync\": params.sync\n    }, function (data) {\n      if (data) {\n        if (!data.error) {\n          callback(data);\n        } else {\n          callback({\n            \"error\": i18next.t(\"Error occurred retrieving content for configuration key.\")\n          });\n        }\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"deactivateUser\": function deactivateUser(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId, \"DELETE\", userId, params || {}, function (data) {\n      callback = callback || function () {};\n\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred deactivating user.\")\n        });\n        return;\n      }\n\n      callback(data);\n    });\n  },\n  \"reactivateUser\": function reactivateUser(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        \"error\": i18next.t(\"User id is required\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/reactivate\", \"POST\", userId, params || {}, function (data) {\n      if (!data || data.error) {\n        callback({\n          \"error\": i18next.t(\"Error occurred reactivating user.\")\n        });\n        return;\n      }\n\n      callback(data);\n    });\n  },\n  \"getConfigurationByKey\": function getConfigurationByKey(configVar, params, callback) {\n    callback = callback || function () {};\n\n    if (!configVar) {\n      callback({\n        \"error\": i18next.t(\"configuration variable name is required.\")\n      });\n      return false;\n    }\n\n    var sessionConfigKey = \"config_\" + configVar;\n\n    if (sessionStorage.getItem(sessionConfigKey)) {\n      var data = JSON.parse(sessionStorage.getItem(sessionConfigKey));\n      callback(data);\n      return true;\n    }\n\n    this.sendRequest(\"/api/settings/\" + configVar, \"GET\", null, params || {}, function (data) {\n      if (!data) {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n        return;\n      }\n\n      callback(data);\n      sessionStorage.setItem(sessionConfigKey, JSON.stringify(data));\n    });\n  },\n  \"getConfiguration\": function getConfiguration(userId, params, callback) {\n    callback = callback || function () {};\n\n    var sessionConfigKey = \"settings_\" + userId;\n\n    if (sessionStorage.getItem(sessionConfigKey)) {\n      var data = JSON.parse(sessionStorage.getItem(sessionConfigKey));\n      callback(data);\n      return;\n    }\n\n    this.sendRequest(\"/api/settings\", \"GET\", userId, params || {}, function (data) {\n      if (data) {\n        callback(data);\n        sessionStorage.setItem(sessionConfigKey, JSON.stringify(data));\n      } else {\n        callback({\n          \"error\": i18next.t(\"no data returned\")\n        });\n      }\n    });\n  },\n  \"getEmailReady\": function getEmailReady(userId, params, callback) {\n    callback = callback || function () {};\n\n    if (!userId) {\n      callback({\n        error: i18next.t(\"User id is required.\")\n      });\n      return false;\n    }\n\n    this.sendRequest(\"/api/user/\" + userId + \"/email_ready\", \"GET\", userId, params, function (data) {\n      callback(data);\n    });\n  }\n});\n\n//# sourceURL=webpack:///./static/js/src/modules/TnthAjax.js?");

/***/ }),

/***/ "./static/js/src/modules/TnthDate.js":
/*!*******************************************!*\
  !*** ./static/js/src/modules/TnthDate.js ***!
  \*******************************************/
/*! exports provided: default, validateDateInputFields */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"validateDateInputFields\", function() { return validateDateInputFields; });\nvar tnthDates = {\n  /*global i18next */\n\n  /** validateDateInputFields  check whether the date is a sensible date in month, day and year fields.\n   ** params: month, day and year fields and error field ID\n   ** NOTE this can replace the custom validation check; hook this up to the onchange/blur event of birthday field\n   ** work better in conjunction with HTML5 native validation check on the field e.g. required, pattern match  ***/\n  \"validateDateInputFields\": function validateDateInputFields(m, d, y, errorFieldId) {\n    if (!m || !d || !y) {\n      return false;\n    }\n\n    m = parseInt(m);\n    d = parseInt(d);\n    y = parseInt(y);\n    var errorField = $(\"#\" + errorFieldId);\n\n    if (!isNaN(m) && !isNaN(d) && !isNaN(y)) {\n      var today = new Date();\n      var date = new Date(y, m - 1, d);\n\n      if (!(date.getFullYear() === y && date.getMonth() + 1 === m && date.getDate() === d)) {\n        // Check to see if this is a real date\n        errorField.html(i18next.t(\"Invalid date. Please try again.\")).show();\n        return false;\n      } else if (date.setHours(0, 0, 0, 0) > today.setHours(0, 0, 0, 0)) {\n        errorField.html(i18next.t(\"Date must not be in the future. Please try again.\")).show();\n        return false; //shouldn't be in the future\n      } else if (y < 1900) {\n        errorField.html(i18next.t(\"Date must not be before 1900. Please try again.\")).show();\n        return false;\n      }\n\n      errorField.html(\"\").hide();\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Simply swaps: a/b/cdef to b/a/cdef (single & double digit permutations accepted...)\n   * Does not check for valid dates on input or output!\n   * @param currentDate string eg 7/4/1976\n   * @returns string eg 4/7/1976\n   */\n  \"swap_mm_dd\": function swap_mm_dd(currentDate) {\n    var splitDate = currentDate.split(\"/\");\n    return splitDate[1] + \"/\" + splitDate[0] + \"/\" + splitDate[2];\n  },\n  \"convertMonthNumeric\": function convertMonthNumeric(month) {\n    //Convert month string to numeric\n    if (!month) {\n      return \"\";\n    } else {\n      var month_map = {\n        \"jan\": 1,\n        \"feb\": 2,\n        \"mar\": 3,\n        \"apr\": 4,\n        \"may\": 5,\n        \"jun\": 6,\n        \"jul\": 7,\n        \"aug\": 8,\n        \"sep\": 9,\n        \"oct\": 10,\n        \"nov\": 11,\n        \"dec\": 12\n      };\n      var m = month_map[month.toLowerCase()];\n      return m ? m : \"\";\n    }\n  },\n  \"convertMonthString\": function convertMonthString(month) {\n    //Convert month string to text\n    if (!month) {\n      return \"\";\n    } else {\n      var numeric_month_map = {\n        1: \"Jan\",\n        2: \"Feb\",\n        3: \"Mar\",\n        4: \"Apr\",\n        5: \"May\",\n        6: \"Jun\",\n        7: \"Jul\",\n        8: \"Aug\",\n        9: \"Sep\",\n        10: \"Oct\",\n        11: \"Nov\",\n        12: \"Dec\"\n      };\n      var m = numeric_month_map[parseInt(month)];\n      return m ? m : \"\";\n    }\n  },\n  \"isDate\": function isDate(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Date]\" && !isNaN(obj.getTime());\n  },\n  \"displayDateString\": function displayDateString(m, d, y) {\n    var s = \"\";\n    s += d ? d : \"\";\n\n    if (m) {\n      s += (s ? \" \" : \"\") + this.convertMonthString(m);\n    }\n\n    if (y) {\n      s += (s ? \" \" : \"\") + y;\n    }\n\n    return s;\n  },\n\n  /***\n   * Calculates number of days between two dates. Used in mPOWEr for surgery/discharge\n   * @param startDate - required. Assumes YYYY-MM-DD. This is typically the date of surgery or discharge\n   * @param dateToCalc - optional. If empty, then assumes today's date\n   * @returns number of days\n   */\n  \"getDateDiff\": function getDateDiff(startDate, dateToCalc) {\n    if (!startDate) {\n      return 0;\n    }\n\n    var a = startDate.split(/[^0-9]/);\n    var dateTime = new Date(a[0], a[1] - 1, a[2]).getTime();\n    var d;\n\n    if (dateToCalc) {\n      var c = dateToCalc.split(/[^0-9]/);\n      d = new Date(c[0], c[1] - 1, c[2]).getTime();\n    } else {\n      // If no baseDate, then use today to find the number of days between dateToCalc and today\n      d = new Date().getTime();\n    }\n\n    return Math.floor((d - dateTime) / (1000 * 60 * 60 * 24)); // Round down to floor so we don't add an extra day if session is 12+ hours into the day\n  },\n  \"isValidDefaultDateFormat\": function isValidDefaultDateFormat(date, errorField) {\n    if (!date || date.length < 10) {\n      return false;\n    }\n\n    var dArray = $.trim(date).split(\" \");\n\n    if (dArray.length < 3) {\n      return false;\n    }\n\n    var day = parseInt(dArray[0]) + \"\",\n        month = dArray[1],\n        year = dArray[2];\n\n    if (day.length < 1 || month.length < 3 || year.length < 4) {\n      return false;\n    }\n\n    if (!/(0)?[1-9]|1\\d|2\\d|3[01]/.test(day)) {\n      return false;\n    }\n\n    if (!/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/i.test(month)) {\n      return false;\n    }\n\n    if (!/(19|20)\\d{2}/.test(year)) {\n      return false;\n    }\n\n    var dt = new Date(date);\n\n    if (!this.isDateObj(dt)) {\n      return false;\n    } else if (!this.isValidDate(year, this.convertMonthNumeric(month), day)) {\n      return false;\n    } else {\n      var today = new Date(),\n          errorMsg = \"\";\n\n      if (dt.getFullYear() < 1900) {\n        errorMsg = \"Year must be after 1900\";\n      } // Only allow if date is before today\n\n\n      if (dt.setHours(0, 0, 0, 0) > today.setHours(0, 0, 0, 0)) {\n        errorMsg = \"The date must not be in the future.\";\n      }\n\n      if (errorMsg) {\n        $(errorField).text(errorMsg);\n        return false;\n      } else {\n        $(errorField).text(\"\");\n        return true;\n      }\n    }\n  },\n  \"isDateObj\": function isDateObj(d) {\n    return Object.prototype.toString.call(d) === \"[object Date]\" && !isNaN(d.getTime());\n  },\n  \"isValidDate\": function isValidDate(y, m, d) {\n    var date = this.getDateObj(y, m, d),\n        convertedDate = this.getConvertedDate(date),\n        givenDate = this.getGivenDate(y, m, d);\n    return String(givenDate) === String(convertedDate);\n  },\n\n  /*\n   * method does not check for valid numbers, will return NaN if conversion failed\n   */\n  \"getDateObj\": function getDateObj(y, m, d, h, mi, s) {\n    h = h || 0;\n    mi = mi || 0;\n    s = s || 0;\n    return new Date(parseInt(y), parseInt(m) - 1, parseInt(d), parseInt(h), parseInt(mi), parseInt(s));\n  },\n  \"getConvertedDate\": function getConvertedDate(dateObj) {\n    if (dateObj && this.isDateObj(dateObj)) {\n      return \"\" + dateObj.getFullYear() + (dateObj.getMonth() + 1) + dateObj.getDate();\n    } else {\n      return \"\";\n    }\n  },\n  \"getGivenDate\": function getGivenDate(y, m, d) {\n    return \"\" + y + m + d;\n  },\n  \"formatDateString\": function formatDateString(dateString, format) {\n    //NB For dateString in ISO-8601 format date as returned from server e.g. '2011-06-29T16:52:48'\n    if (dateString) {\n      /* IOS (8601) date format test */\n      var IOSDateTest = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n      var d = new Date(dateString);\n      var day, month, year, hours, minutes, seconds, nd;\n\n      if (!IOSDateTest && !isNaN(d) && !this.isDateObj(d)) {\n        //note instantiating ios formatted date using Date object resulted in error in IE\n        return \"\";\n      }\n\n      if (IOSDateTest.test(dateString)) {\n        //IOS date, no need to convert again to date object, just parse it as is\n        //issue when passing it into Date object, the output date is inconsistent across from browsers\n        var dArray = $.trim($.trim(dateString).replace(/[\\.TZ:\\-]/gi, \" \")).split(\" \");\n        year = dArray[0];\n        month = dArray[1];\n        day = dArray[2];\n        hours = dArray[3] || \"0\";\n        minutes = dArray[4] || \"0\";\n        seconds = dArray[5] || \"0\";\n      } else {\n        day = d.getDate();\n        month = d.getMonth() + 1;\n        year = d.getFullYear();\n        hours = d.getHours();\n        minutes = d.getMinutes();\n        seconds = d.getSeconds();\n        nd = \"\";\n      }\n\n      var pad = function pad(n) {\n        n = parseInt(n);\n        return n < 10 ? \"0\" + n : n;\n      };\n\n      day = pad(day);\n      month = pad(month);\n      hours = pad(hours);\n      minutes = pad(minutes);\n      seconds = pad(seconds);\n\n      switch (format) {\n        case \"mm/dd/yyyy\":\n          nd = month + \"/\" + day + \"/\" + year;\n          break;\n\n        case \"mm-dd-yyyy\":\n          nd = month + \"-\" + day + \"-\" + year;\n          break;\n\n        case \"mm-dd-yyyy hh:mm:ss\":\n          nd = month + \"-\" + day + \"-\" + year + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"dd/mm/yyyy\":\n          nd = day + \"/\" + month + \"/\" + year;\n          break;\n\n        case \"dd/mm/yyyy hh:mm:ss\":\n          nd = day + \"/\" + month + \"/\" + year + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"dd-mm-yyyy\":\n          nd = day + \"-\" + month + \"-\" + year;\n          break;\n\n        case \"dd-mm-yyyy hh:mm:ss\":\n          nd = day + \"-\" + month + \"-\" + year + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"iso-short\":\n        case \"yyyy-mm-dd\":\n          nd = year + \"-\" + month + \"-\" + day;\n          break;\n\n        case \"iso\":\n        case \"yyyy-mm-dd hh:mm:ss\":\n          nd = year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"system\":\n          nd = year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + minutes + \":\" + seconds + \"Z\";\n          break;\n\n        case \"d M y hh:mm:ss\":\n          nd = this.displayDateString(month, day, year);\n          nd = nd + \" \" + hours + \":\" + minutes + \":\" + seconds;\n          break;\n\n        case \"d M y\":\n          nd = this.displayDateString(month, day, year);\n          break;\n\n        default:\n          nd = this.displayDateString(month, day, year);\n          break;\n      }\n\n      return nd;\n    } else {\n      return \"\";\n    }\n  },\n  \"convertToLocalTime\": function convertToLocalTime(dateString) {\n    var convertedDate = \"\";\n\n    if (dateString) {\n      //assuming dateString is UTC date/time\n      var d = new Date(dateString);\n      var newDate = new Date(d.getTime() + d.getTimezoneOffset() * 60 * 1000);\n      var offset = d.getTimezoneOffset() / 60;\n      var hours = d.getHours();\n      newDate.setHours(hours - offset);\n      var options = {\n        year: \"numeric\",\n        day: \"numeric\",\n        month: \"short\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\",\n        hour12: false\n      };\n      convertedDate = newDate.toLocaleString(options);\n    }\n\n    return convertedDate;\n  },\n  getDateWithTimeZone: function getDateWithTimeZone(dObj) {\n    /*\n     * param is a date object - calculating UTC date using Date object's timezoneOffset method\n     * the method return offset in minutes, so need to convert it to miliseconds - adding the resulting offset will be the UTC date/time\n     */\n    var utcDate = new Date(dObj.getTime() + dObj.getTimezoneOffset() * 60 * 1000);\n    return this.formatDateString(utcDate, \"yyyy-mm-dd hh:mm:ss\"); //I believe this is a valid python date format, will save it as GMT date/time NOTE, conversion already occurred, so there will be no need for backend to convert it again\n  },\n  getTodayDateObj: function getTodayDateObj() {\n    //return object containing today's date/time information\n    var today = new Date();\n    var td = today.getDate(),\n        tm = today.getMonth() + 1,\n        ty = today.getFullYear();\n    var th = today.getHours(),\n        tmi = today.getMinutes(),\n        ts = today.getSeconds();\n    var gmtToday = this.getDateWithTimeZone(this.getDateObj(ty, tm, td, th, tmi, ts));\n\n    var pad = function pad(n) {\n      n = parseInt(n);\n      return n < 10 ? \"0\" + n : n;\n    };\n\n    return {\n      date: today,\n      day: td,\n      month: tm,\n      year: ty,\n      hour: th,\n      minute: tmi,\n      second: ts,\n      displayDay: pad(td),\n      displayMonth: pad(tm),\n      displayYear: pad(ty),\n      displayHour: pad(th),\n      displayMinute: pad(tmi),\n      displaySecond: pad(ts),\n      gmtDate: gmtToday\n    };\n  },\n  dateValidator: function dateValidator(day, month, year, restrictToPresent) {\n    //parameters: day, month and year values in numeric, boolean value for restrictToPresent, true if the date needs to be before today, false is the default\n    var errorMessage = \"\";\n\n    if (day && month && year) {\n      var iy = parseInt(year),\n          im = parseInt(month),\n          iid = parseInt(day),\n          date = new Date(iy, im - 1, iid);\n\n      if (date.getFullYear() === iy && date.getMonth() + 1 === im && date.getDate() === iid) {\n        // Check to see if this is a real date\n        if (iy < 1900) {\n          errorMessage = i18next.t(\"Year must be after 1900\");\n        }\n\n        if (restrictToPresent) {\n          // Only allow if date is before today\n          var today = new Date();\n\n          if (date.setHours(0, 0, 0, 0) > today.setHours(0, 0, 0, 0)) {\n            errorMessage = i18next.t(\"The date must not be in the future.\");\n          }\n        }\n      } else {\n        errorMessage = i18next.t(\"Invalid Date. Please enter a valid date.\");\n      }\n    } else {\n      errorMessage = i18next.t(\"Missing value.\");\n    }\n\n    return errorMessage;\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (tnthDates);\nvar validateDateInputFields = tnthDates.validateDateInputFields;\n/* generic validation function for global use */\n\n//# sourceURL=webpack:///./static/js/src/modules/TnthDate.js?");

/***/ }),

/***/ "./static/js/src/modules/Utility.js":
/*!******************************************!*\
  !*** ./static/js/src/modules/Utility.js ***!
  \******************************************/
/*! exports provided: default, getExportFileName, getUrlParameter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getExportFileName\", function() { return getExportFileName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUrlParameter\", function() { return getUrlParameter; });\nvar Utility = function () {\n  var UtilityObj = function UtilityObj() {\n    /*global $ */\n    this.requestAttempts = 0;\n  };\n\n  UtilityObj.prototype.hasValue = function (val) {\n    return String(val) !== \"null\" && String(val) !== \"\" && String(val) !== \"undefined\";\n  };\n\n  UtilityObj.prototype.showMain = function () {\n    $(\"#mainHolder\").css({\n      \"visibility\": \"visible\",\n      \"-ms-filter\": \"progid:DXImageTransform.Microsoft.Alpha(Opacity=100)\",\n      \"filter\": \"alpha(opacity=100)\",\n      \"-moz-opacity\": 1,\n      \"-khtml-opacity\": 1,\n      \"opacity\": 1\n    });\n  };\n\n  UtilityObj.prototype.hideLoader = function (delay, time) {\n    if (delay) {\n      $(\"#loadingIndicator\").hide();\n      return;\n    }\n\n    setTimeout(function () {\n      $(\"#loadingIndicator\").fadeOut();\n    }, time || 200);\n  };\n\n  UtilityObj.prototype.loader = function (show) {\n    //landing page\n    if (document.getElementById(\"fullSizeContainer\")) {\n      this.hideLoader();\n      this.showMain();\n      return false;\n    }\n\n    if (show) {\n      $(\"#loadingIndicator\").show();\n      return;\n    }\n\n    if (!this.isDelayLoading()) {\n      var self = this;\n      setTimeout(function () {\n        self.showMain();\n      }, 100);\n      this.hideLoader(true, 350);\n    }\n  };\n\n  UtilityObj.prototype.isDelayLoading = function () {\n    /*global DELAY_LOADING*/\n    return typeof DELAY_LOADING !== \"undefined\" && DELAY_LOADING;\n  };\n\n  UtilityObj.prototype.isTouchDevice = function () {\n    return true === (\"ontouchstart\" in window || window.DocumentTouch && document instanceof window.DocumentTouch);\n  };\n\n  UtilityObj.prototype.getIEVersion = function () {\n    var match = navigator.userAgent.match(/(?:MSIE |Trident\\/.*; rv:)(\\d+)/);\n    return match ? parseInt(match[1]) : false;\n  };\n\n  UtilityObj.prototype.newHttpRequest = function (url, params, callBack) {\n    /* note: this function supports older version of IE (version <= 9) - jquery ajax calls errored in older IE version*/\n    this.requestAttempts++;\n    var xmlhttp,\n        self = this;\n\n    callBack = callBack || function () {};\n\n    if (window.XDomainRequest) {\n      /*global XDomainRequest */\n      xmlhttp = new XDomainRequest();\n\n      xmlhttp.onload = function () {\n        callBack(xmlhttp.responseText);\n      };\n    } else if (window.XMLHttpRequest) {\n      xmlhttp = new XMLHttpRequest();\n    } else {\n      xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      /*global ActiveXObject */\n    }\n\n    xmlhttp.onreadystatechange = function () {\n      if (xmlhttp.readyState === 4) {\n        if (xmlhttp.status === 200) {\n          callBack(xmlhttp.responseText);\n          self.requestAttempts = 0;\n          return;\n        }\n\n        if (self.requestAttempts < 3) {\n          setTimeout(function () {\n            self.newHttpRequest(url, params, callBack);\n          }, 3000);\n        } else {\n          callBack({\n            error: xmlhttp.responseText\n          });\n          self.loader();\n          self.requestAttempts = 0;\n        }\n      }\n    };\n\n    params = params || {};\n    xmlhttp.open(\"GET\", url, true);\n\n    for (var param in params) {\n      if (params.hasOwnProperty(param)) {\n        xmlhttp.setRequestHeader(param, params[param]);\n      }\n    }\n\n    if (!params.cache) {\n      xmlhttp.setRequestHeader(\"cache-control\", \"no-cache\");\n      xmlhttp.setRequestHeader(\"expires\", \"-1\");\n      xmlhttp.setRequestHeader(\"pragma\", \"no-cache\"); //legacy HTTP 1.0 servers and IE support\n    }\n\n    xmlhttp.send();\n  };\n\n  UtilityObj.prototype.ajaxRequest = function (url, params, callback) {\n    callback = callback || function () {};\n\n    if (!url) {\n      callback({\n        error: i18next.t(\"Url is required.\")\n      });\n      return false;\n    }\n\n    var defaults = {\n      url: url,\n      type: \"GET\",\n      contentType: \"text/plain\",\n      timeout: 5000,\n      cache: false\n    };\n    params = params || defaults;\n    params = $.extend({}, defaults, params);\n    this.requestAttempts++;\n    var uself = this;\n    $.ajax(params).done(function (data) {\n      callback(data);\n      uself.requestAttempts = 0;\n    }).fail(function () {\n      if (uself.requestAttempts <= 3) {\n        setTimeout(function () {\n          uself.ajaxRequest(url, params, callback);\n        }, 3000);\n      } else {\n        callback({\n          error: i18next.t(\"Error occurred processing request\")\n        });\n        /*global i18next */\n\n        uself.requestAttempts = 0;\n        uself.loader();\n      }\n    }).always(function () {\n      uself.loader();\n    });\n  };\n\n  UtilityObj.prototype.initWorker = function (url, params, callbackFunc) {\n    var worker = new Worker(\"/static/js/ajaxWorker.js\");\n    var self = this;\n    worker.postMessage({\n      url: url,\n      params: params\n    });\n    worker.addEventListener(\"message\", function (e) {\n      callbackFunc.call(self, e.data);\n      worker.terminate();\n    }, false);\n    worker.addEventListener(\"error\", function (e) {\n      console.log(\"Worker runtime error: Line \", e.lineno, \" in \", e.filename, \": \", e.message);\n      worker.terminate();\n    }, false);\n  };\n\n  UtilityObj.prototype.workerAllowed = function () {\n    return window.Worker && !this.isTouchDevice();\n  };\n\n  UtilityObj.prototype.getRequestMethod = function () {\n    return this.getIEVersion() ? this.newHttpRequest : this.ajaxRequest; //NOTE JQuery ajax request does not work for IE <= 9\n  };\n\n  UtilityObj.prototype.sendRequest = function (url, params, callback) {\n    /*generic function for sending GET ajax request, make use of worker if possible */\n    params = params || {};\n\n    if (params.useWorker && this.workerAllowed()) {\n      this.initWorker(url, params, callback);\n      return true;\n    }\n\n    var useFunc = this.getRequestMethod();\n    useFunc.call(this, url, params, function (data) {\n      callback.call(this, data);\n    });\n  };\n\n  UtilityObj.prototype.LRKeyEvent = function () {\n    var LR_INVOKE_KEYCODE = 187;\n\n    if ($(\".button--LR\").length > 0) {\n      $(\"html\").on(\"keydown\", function (e) {\n        if (parseInt(e.keyCode) === parseInt(LR_INVOKE_KEYCODE)) {\n          $(\".button--LR\").toggleClass(\"data-show\");\n        }\n      });\n    }\n  };\n\n  UtilityObj.prototype.getLoaderHTML = function (message) {\n    return \"<div class=\\\"loading-message-indicator\\\"><i class=\\\"fa fa-spinner fa-spin fa-2x\\\"></i>\".concat(message ? \"&nbsp;\" + message : \"\", \"</div>\");\n  };\n\n  UtilityObj.prototype.convertToNumericField = function (field) {\n    if (!field) {\n      return;\n    }\n\n    if (this.isTouchDevice()) {\n      field.each(function () {\n        $(this).prop(\"type\", \"tel\");\n      });\n    }\n  };\n\n  UtilityObj.prototype.isString = function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object String]\";\n  };\n\n  UtilityObj.prototype.disableHeaderFooterLinks = function () {\n    var links = $(\"#tnthNavWrapper a, #homeFooter a\").not(\"a[href*='logout']\").not(\"a.required-link\").not(\"a.home-link\");\n    links.addClass(\"disabled\");\n    links.prop(\"onclick\", null).off(\"click\");\n    links.on(\"click\", function (e) {\n      e.preventDefault();\n      return false;\n    });\n  };\n\n  UtilityObj.prototype.pad = function (n) {\n    n = parseInt(n);\n    return !isNaN(n) && n < 10 ? \"0\" + n : n;\n  };\n\n  UtilityObj.prototype.escapeHtml = function (text) {\n    \"use strict\";\n\n    if (text === null || text !== \"undefined\" || String(text).length === 0) {\n      return text;\n    }\n\n    return text.replace(/[\\\"&'\\/<>]/g, function (a) {\n      return {\n        '\"': \"&quot;\",\n        \"&\": \"&amp;\",\n        \"'\": \"&#39;\",\n        \"/\": \"&#47;\",\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\"\n      }[a];\n    });\n  };\n\n  UtilityObj.prototype.containHtmlTags = function (text) {\n    if (!text) {\n      return false;\n    }\n\n    return /[<>]/.test(text);\n  };\n\n  UtilityObj.prototype.getExportFileName = function (prefix) {\n    var d = new Date();\n    return (prefix ? prefix : \"ExportList_\") + (\"00\" + d.getDate()).slice(-2) + (\"00\" + (d.getMonth() + 1)).slice(-2) + d.getFullYear();\n  };\n\n  UtilityObj.prototype.capitalize = function (str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  };\n\n  UtilityObj.prototype.restoreVis = function () {\n    var loadingElement = document.getElementById(\"loadingIndicator\"),\n        mainElement = document.getElementById(\"mainHolder\");\n\n    if (loadingElement) {\n      loadingElement.setAttribute(\"style\", \"display:none; visibility:hidden;\");\n    }\n\n    if (mainElement) {\n      mainElement.setAttribute(\"style\", \"visibility:visible;-ms-filter:'progid:DXImageTransform.Microsoft.Alpha(Opacity=100)';filter:alpha(opacity=100); -moz-opacity:1; -khtml-opacity:1; opacity:1\");\n    }\n  };\n\n  UtilityObj.prototype.VueErrorHandling = function () {\n    if (typeof Vue === \"undefined\") {\n      return false;\n    }\n    /*global Vue */\n\n\n    var self = this;\n\n    Vue.config.errorHandler = function (err, vm, info) {\n      var handler,\n          current = vm;\n\n      if (vm.$options.errorHandler) {\n        handler = vm.$options.errorHandler;\n      } else {\n        while (!handler && current.$parent) {\n          current = current.$parent;\n          handler = current.$options.errorHandler;\n        }\n      }\n\n      self.restoreVis();\n\n      if (handler) {\n        handler.call(current, err, vm, info);\n        return;\n      }\n\n      console.log(err);\n    };\n  };\n\n  UtilityObj.prototype.extend = function (obj, extension) {\n    // Extend an object with an extension\n    for (var key in extension) {\n      if (extension.hasOwnProperty(key)) {\n        obj[key] = extension[key];\n      }\n    }\n\n    return obj;\n  };\n\n  UtilityObj.prototype.getUrlParameter = function (name) {\n    name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n    var results = regex.exec(location.search);\n    return results === null ? \"\" : decodeURIComponent(results[1]);\n  };\n\n  UtilityObj.prototype.resetBrowserBackHistory = function (locationUrl, stateObject, title) {\n    var historyDefined = typeof history !== \"undefined\" && history.pushState;\n    locationUrl = locationUrl || location.href;\n\n    if (historyDefined) {\n      history.pushState(stateObject, title, locationUrl);\n    }\n\n    window.addEventListener(\"popstate\", function () {\n      if (historyDefined) {\n        history.pushState(stateObject, title, locationUrl);\n      } else {\n        window.history.forward(1);\n      }\n    });\n  };\n\n  UtilityObj.prototype.handlePostLogout = function () {\n    if (typeof sessionStorage === \"undefined\") {\n      return false;\n    }\n\n    if (sessionStorage.getItem(\"logout\")) {\n      this.resetBrowserBackHistory(location.orgin, \"logout\");\n      /* global resetBrowserBackHistory */\n\n      sessionStorage.removeItem(\"logout\");\n    }\n  };\n\n  UtilityObj.prototype.displaySystemOutageMessage = function (locale) {\n    locale = locale || \"en-us\";\n    locale = locale.replace(\"_\", \"-\");\n    var systemMaintenanceElId = \"systemMaintenanceContainer\";\n\n    if (!document.getElementById(systemMaintenanceElId)) {\n      //check for system outage maintenance message element\n      return;\n    }\n\n    var self = this;\n    this.ajaxRequest(\"api/settings\", {\n      contentType: \"application/json; charset=utf-8\"\n    }, function (data) {\n      if (!data || !(data.MAINTENANCE_MESSAGE || data.MAINTENANCE_WINDOW)) {\n        return false;\n      }\n\n      var messageElement = document.querySelector(\".message-container\");\n\n      if (!messageElement) {\n        messageElement = document.createElement(\"div\");\n        messageElement.classList.add(\"message-container\");\n        document.getElementById(systemMaintenanceElId).appendChild(messageElement);\n      }\n\n      if (data.MAINTENANCE_MESSAGE) {\n        messageElement.innerHTML = self.escapeHtml(data.MAINTENANCE_MESSAGE);\n        return;\n      }\n\n      if (!data.MAINTENANCE_WINDOW || !data.MAINTENANCE_WINDOW.length) {\n        return;\n      } //use maintenance window specified in config to compose the message, assuming in following example format: [\"2018-11-02T12:00:00Z\", \"2018-11-02T18:00:00Z\"], dates in system ISO format\n\n\n      var hoursDiff = function hoursDiff(d1, d2) {\n        if (!d1 || !d2) {\n          return 0;\n        }\n\n        return Math.floor((d2.getTime() - d1.getTime()) / (1000 * 60 * 60) % 24);\n      }; //date object automatically convert iso date/time to local date/time as it assumes a timezone of UTC if date in ISO format\n\n\n      var startDate = new Date(data.MAINTENANCE_WINDOW[0]),\n          endDate = new Date(data.MAINTENANCE_WINDOW[1]);\n      var hoursTil = hoursDiff(new Date(), startDate);\n\n      if (hoursTil < 0 || isNaN(hoursTil)) {\n        //maintenance window has passed\n        document.getElementById(systemMaintenanceElId).classList.add(\"tnth-hide\");\n        return;\n      }\n      /*global i18next */\n      //construct message based on maintenance window\n\n\n      try {\n        var options = {\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\",\n          hour: \"numeric\",\n          minute: \"numeric\",\n          second: \"numeric\",\n          hour12: true,\n          timeZoneName: \"short\"\n        };\n        var displayStartDate = startDate.toLocaleString(locale, options).replace(/[,]/g, \" \"); //display language-sensitive representation of date/time\n\n        var displayEndDate = endDate.toLocaleString(locale, options).replace(/[,]/g, \" \");\n        var message = [\"<div>\" + i18next.t(\"Hi there.\") + \"</div>\", \"<div>\" + i18next.t(\"TrueNTH will be down for website maintenance starting <b>{startdate}</b>. This should last until <b>{enddate}</b>.\".replace(\"{startdate}\", displayStartDate).replace(\"{enddate}\", displayEndDate)) + \"</div>\", \"<div>\" + i18next.t(\"Thanks for your patience while we upgrade our site.\") + \"</div>\"].join(\"\");\n        messageElement.innerHTML = self.escapeHtml(message);\n      } catch (e) {\n        console.log(\"Error occurred converting system outage date/time \", e);\n        /*eslint no-console:off */\n\n        document.getElementById(systemMaintenanceElId).classList.add(\"tnth-hide\");\n      }\n    });\n  };\n\n  return new UtilityObj();\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Utility);\nvar getExportFileName = Utility.getExportFileName;\n/* expose common functions */\n\nvar getUrlParameter = Utility.getUrlParameter;\n\n//# sourceURL=webpack:///./static/js/src/modules/Utility.js?");

/***/ }),

/***/ "./static/js/src/profile.js":
/*!**********************************!*\
  !*** ./static/js/src/profile.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/TnthAjax.js */ \"./static/js/src/modules/TnthAjax.js\");\n/* harmony import */ var _modules_TnthDate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/TnthDate.js */ \"./static/js/src/modules/TnthDate.js\");\n/* harmony import */ var _modules_OrgTool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/OrgTool.js */ \"./static/js/src/modules/OrgTool.js\");\n/* harmony import */ var _modules_SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/SYSTEM_IDENTIFIER_ENUM.js */ \"./static/js/src/modules/SYSTEM_IDENTIFIER_ENUM.js\");\n/* harmony import */ var _modules_Procedures_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/Procedures.js */ \"./static/js/src/modules/Procedures.js\");\n/* harmony import */ var _modules_Utility_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/Utility.js */ \"./static/js/src/modules/Utility.js\");\n/* harmony import */ var _modules_ClinicalQuestions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/ClinicalQuestions.js */ \"./static/js/src/modules/ClinicalQuestions.js\");\n\n\n\n\n\n\n\n/*\n * helper Object for initializing profile sections  TODO streamline this more\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function () {\n  var ProfileObj = window.ProfileObj = new Vue({\n    /*global Vue i18next $ */\n    el: \"#mainDiv\",\n    components: {\n      \"section-view\": {\n        props: [\"data\", \"nodatatext\"],\n        template: \"<div v-if='data'>{{data}}</div><div class='text-muted' v-else>{{nodatatext}}</div>\"\n      },\n      \"section-view-extension\": {\n        props: [\"data\", \"nodatatext\"],\n        template: \"<div v-if='data'><p v-for='item in data'>{{item.display}}</p></div><div class='text-muted' v-else>{{nodatatext}}</div>\"\n      },\n      \"email-ready-message\": {\n        props: ['message'],\n        template: \"<div class='text-warning email-ready-message' v-show='message'><span class='glyphicon glyphicon-alert warning' aria-hidden='true'></span>{{message}}</div>\"\n      }\n    },\n    errorCaptured: function errorCaptured(Error, Component, info) {\n      console.error(\"Error: \", Error, \" Component: \", Component, \" Message: \", info);\n      return false;\n    },\n    errorHandler: function errorHandler(err, vm) {\n      this.dataError = true;\n      var errorElement = document.getElementById(\"profileErrorMessage\");\n\n      if (errorElement) {\n        errorElement.innerHTML = \"Error occurred initializing Profile  Vue instance.\";\n      }\n\n      console.warn(\"Profile Vue instance threw an error: \", vm, this);\n      console.error(\"Error thrown: \", err);\n    },\n    created: function created() {\n      var self = this;\n      _modules_Utility_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].VueErrorHandling();\n      /*global Utility VueErrorHandling */\n\n      this.registerDependencies();\n      this.getOrgTool();\n      this.setUserSettings();\n      this.onBeforeSectionsLoad();\n      this.setCurrentUserOrgs();\n      this.initStartTime = new Date();\n      this.initChecks.push({\n        done: false\n      });\n      this.setDemoData({\n        beforeSend: self.setSectionLoaders\n      }, function () {\n        //this will initialize section loaders, only if ajax request is sent\n        self.onInitChecksDone();\n      });\n\n      if (this.currentUserId) {\n        //get user roles - note using the current user Id - so we can determine: if user is an admin, if he/she can edit the consent, etc.\n        this.initChecks.push({\n          done: false\n        });\n        this.modules.tnthAjax.getRoles(this.currentUserId, function (data) {\n          if (data && data.roles) {\n            data.roles.forEach(function (role) {\n              self.currentUserRoles.push(role.name.toLowerCase());\n            });\n          }\n\n          self.onInitChecksDone();\n        }, {\n          useWorker: true\n        });\n      }\n\n      this.initChecks.push({\n        done: false\n      });\n      this.setConfiguration({\n        useWorker: true\n      }, function (data) {\n        //get config settings\n        self.onInitChecksDone();\n        var CONSENT_WITH_TOP_LEVEL_ORG = \"CONSENT_WITH_TOP_LEVEL_ORG\";\n\n        if (data.error || !data.hasOwnProperty(CONSENT_WITH_TOP_LEVEL_ORG)) {\n          return false;\n        }\n      });\n    },\n    mounted: function mounted() {\n      var self = this;\n      Vue.nextTick(function () {\n        // DOM updated\n        self.initIntervalId = setInterval(function () {\n          //wait for ajax calls to finish\n          self.initEndTime = new Date();\n          var elapsedTime = self.initEndTime - self.initStartTime;\n          elapsedTime /= 1000;\n          var checkFinished = self.initChecks.length === 0;\n\n          if (checkFinished || elapsedTime >= 5) {\n            clearInterval(self.initIntervalId);\n            self.initSections(function () {\n              self.onSectionsDidLoad();\n              self.handleOptionalCoreData();\n            });\n          }\n        }, 30);\n      });\n    },\n    data: {\n      subjectId: \"\",\n      currentUserId: \"\",\n      settings: {},\n      orgTool: null,\n      orgsList: {},\n      orgsData: [],\n      initChecks: [],\n      initIntervalId: 0,\n      currentUserRoles: [],\n      userOrgs: [],\n      userRoles: [],\n      userEmailReady: true,\n      messages: {\n        userEmailReadyMessage: \"\",\n        userInviteEmailInfoMessage: \"\",\n        userInviteEmailErrorMessage: \"\"\n      },\n      mode: \"profile\",\n      demo: {\n        //skeleton\n        data: {\n          resourceType: \"Patient\",\n          email: \"\",\n          name: {\n            given: \"\",\n            family: \"\"\n          },\n          birthDay: \"\",\n          birthMonth: \"\",\n          birthYear: \"\"\n        }\n      },\n      stateDict: {\n        AL: i18next.t(\"Alabama\"),\n        AK: i18next.t(\"Alaska\"),\n        AS: i18next.t(\"American Samoa\"),\n        AZ: i18next.t(\"Arizona\"),\n        AR: i18next.t(\"Arkansas\"),\n        CA: i18next.t(\"California\"),\n        CO: i18next.t(\"Colorado\"),\n        CT: i18next.t(\"Connecticut\"),\n        DE: i18next.t(\"Delaware\"),\n        DC: i18next.t(\"District Of Columbia\"),\n        FM: i18next.t(\"Federated States Of Micronesia\"),\n        FL: i18next.t(\"Florida\"),\n        GA: i18next.t(\"Georgia\"),\n        GU: i18next.t(\"Guam\"),\n        HI: i18next.t(\"Hawaii\"),\n        ID: i18next.t(\"Idaho\"),\n        IL: i18next.t(\"Illinois\"),\n        IN: i18next.t(\"Indiana\"),\n        IA: i18next.t(\"Iowa\"),\n        KS: i18next.t(\"Kansas\"),\n        KY: i18next.t(\"Kentucky\"),\n        LA: i18next.t(\"Louisiana\"),\n        ME: i18next.t(\"Maine\"),\n        MH: i18next.t(\"Marshall Islands\"),\n        MD: i18next.t(\"Maryland\"),\n        MA: i18next.t(\"Massachusetts\"),\n        MI: i18next.t(\"Michigan\"),\n        MN: i18next.t(\"Minnesota\"),\n        MS: i18next.t(\"Mississippi\"),\n        MO: i18next.t(\"Missouri\"),\n        MT: i18next.t(\"Montana\"),\n        NE: i18next.t(\"Nebraska\"),\n        NV: i18next.t(\"Nevada\"),\n        NH: i18next.t(\"New Hampshire\"),\n        NJ: i18next.t(\"New Jersey\"),\n        NM: i18next.t(\"New Mexico\"),\n        NY: i18next.t(\"New York\"),\n        NC: i18next.t(\"North Carolina\"),\n        ND: i18next.t(\"North Dakota\"),\n        MP: i18next.t(\"Northern Mariana Islands\"),\n        OH: i18next.t(\"Ohio\"),\n        OK: i18next.t(\"Oklahoma\"),\n        OR: i18next.t(\"Oregon\"),\n        PW: i18next.t(\"Palau\"),\n        PA: i18next.t(\"Pennsylvania\"),\n        PR: i18next.t(\"Puerto Rico\"),\n        RI: i18next.t(\"Rhode Island\"),\n        SC: i18next.t(\"South Carolina\"),\n        SD: i18next.t(\"South Dakota\"),\n        TN: i18next.t(\"Tennessee\"),\n        TX: i18next.t(\"Texas\"),\n        UT: i18next.t(\"Utah\"),\n        VT: i18next.t(\"Vermont\"),\n        VI: i18next.t(\"Virgin Islands\"),\n        VA: i18next.t(\"Virginia\"),\n        WA: i18next.t(\"Washington\"),\n        WV: i18next.t(\"West Virginia\"),\n        WI: i18next.t(\"Wisconsin\"),\n        WY: i18next.t(\"Wyoming\")\n      },\n      roles: {\n        data: []\n      },\n      CONSENT_ENUM: {\n        \"consented\": {\n          \"staff_editable\": true,\n          \"include_in_reports\": true,\n          \"send_reminders\": true\n        },\n        \"suspended\": {\n          \"staff_editable\": true,\n          \"include_in_reports\": true,\n          \"send_reminders\": false\n        },\n        \"purged\": {\n          \"staff_editable\": false,\n          \"include_in_reports\": false,\n          \"send_reminders\": false\n        }\n      },\n      consent: {\n        consentHeaderArray: [//html for consent header cell in array\n        i18next.t(\"Organization\"), \"<span class=\\\"eproms-consent-status-header\\\">\".concat(i18next.t(\"Consent Status\"), \"</span><span class=\\\"truenth-consent-status-header\\\">\").concat(i18next.t(\"Consent Status\"), \"</span>\"), \"<span class=\\\"agreement\\\">\".concat(i18next.t(\"Agreement\"), \"</span>\"), \"<span class=\\\"eproms-consent-date-header\\\">\".concat(i18next.t(\"Date\"), \"</span><span class=\\\"truenth-consent-date-header\\\">\").concat(i18next.t(\"Registration Date\"), \"</span> <span class=\\\"gmt\\\">(\").concat(i18next.t(\"GMT\"), \")</span>\")],\n        consentHistoryHeaderArray: [i18next.t(\"Organization\"), \"<span class=\\\"eproms-consent-status-header\\\">\".concat(i18next.t(\"Consent Status\"), \"</span><span class=\\\"truenth-consent-status-header\\\">\").concat(i18next.t(\"Consent Status\"), \"</span>\"), i18next.t(\"Consent Date\"), \"\".concat(i18next.t(\"Last Updated\"), \"<br/><span class='smaller-text'>\").concat(i18next.t(\"( GMT, Y-M-D )\"), \"</span>\"), i18next.t(\"User\")],\n        consentLabels: {\n          \"default\": i18next.t(\"Consented\"),\n          \"consented\": i18next.t(\"Consented / Enrolled\"),\n          \"withdrawn\": \"<span data-eproms='true'>\".concat(i18next.t(\"Withdrawn - Suspend Data Collection and Report Historic Data\"), \"</span><span data-truenth='true'>\").concat(i18next.t(\"Suspend Data Collection and Report Historic Data\"), \"</span>\"),\n          \"purged\": i18next.t(\"Purged / Removed\"),\n          \"deleted\": i18next.t(\"Replaced\")\n        },\n        consentItems: [],\n        currentItems: [],\n        historyItems: [],\n        touObj: [],\n        consentDisplayRows: [],\n        consentListErrorMessage: \"\",\n        consentLoading: false,\n        saveLoading: false,\n        showInitialConsentTerms: false\n      },\n      assessment: {\n        assessmentListItems: [],\n        assessmentListError: \"\"\n      },\n      emailLog: {\n        data: []\n      },\n      patientReport: {\n        data: [],\n        hasP3PReport: false\n      },\n      manualEntry: {\n        loading: false,\n        initloading: false,\n        method: \"\",\n        consentDate: \"\",\n        completionDate: \"\",\n        todayObj: {\n          displayDay: \"\",\n          displayMonth: \"\",\n          displayYear: \"\"\n        },\n        errorMessage: \"\"\n      },\n      patientEmailForm: {\n        loading: false\n      },\n      disableFields: [],\n      topLevelOrgs: [],\n      fillViews: {},\n      modules: {},\n      bootstrapTableConfig: {\n        search: true,\n        smartDisplay: true,\n        showToggle: true,\n        showColumns: true,\n        undefinedText: \"--\",\n        pagination: true,\n        pageSize: 5,\n        pageList: [5, 10, 25, 50, 100],\n        formatShowingRows: function formatShowingRows(pageFrom, pageTo, totalRows) {\n          var rowInfo;\n          rowInfo = i18next.t(\"Showing {pageFrom} to {pageTo} of {totalRows} records\").replace(\"{pageFrom}\", pageFrom).replace(\"{pageTo}\", pageTo).replace(\"{totalRows}\", totalRows);\n          return rowInfo;\n        },\n        formatAllRows: function formatAllRows() {\n          return i18next.t(\"All rows\");\n        },\n        formatSearch: function formatSearch() {\n          return i18next.t(\"Search\");\n        },\n        formatNoMatches: function formatNoMatches() {\n          return i18next.t(\"No matching records found\");\n        },\n        formatRecordsPerPage: function formatRecordsPerPage(pageNumber) {\n          return i18next.t(\"{pageNumber} records per page\").replace(\"{pageNumber}\", pageNumber);\n        },\n        rowStyle: function rowStyle(row, index) {\n          return {\n            css: {\n              \"background-color\": index % 2 !== 0 ? \"#F9F9F9\" : \"#FFF\"\n            }\n          };\n        }\n      }\n    },\n    methods: {\n      registerDependencies: function registerDependencies() {\n        var self = this;\n\n        if (!window.portalModules) {\n          window.portalModules = {};\n        }\n\n        window.portalModules.SYSTEM_IDENTIFIER_ENUM = _modules_SYSTEM_IDENTIFIER_ENUM_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        window.portalModules.tnthAjax = _modules_TnthAjax_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        window.portalModules.tnthDates = _modules_TnthDate_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        window.portalModules.orgTool = _modules_OrgTool_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n\n        if (typeof i18next !== \"undefined\") {\n          window.portalModules.i18next = i18next;\n        }\n\n        for (var key in window.portalModules) {\n          if ({}.hasOwnProperty.call(window.portalModules, key)) {\n            self.modules[key] = window.portalModules[key];\n          }\n        }\n      },\n      notProvidedText: function notProvidedText() {\n        return i18next.t(\"not provided\");\n      },\n      setConfiguration: function setConfiguration(params, callback) {\n        var self = this;\n\n        callback = callback || function () {};\n\n        this.modules.tnthAjax.getConfiguration(this.currentUserId || this.subjectId, params, function (data) {\n          //get config settings\n          if (!data || data.error) {\n            callback({\n              error: self.modules.i18next.t(\"Unable to set user settings.\")\n            });\n            return false;\n          }\n\n          self.settings = data;\n          callback(data);\n        });\n      },\n      setBootstrapTableConfig: function setBootstrapTableConfig(config) {\n        if (!config) {\n          return this.bootstrapTableConfig;\n        } else {\n          return $.extend({}, this.bootstrapTableConfig, config);\n        }\n      },\n      onInitChecksDone: function onInitChecksDone() {\n        if (this.initChecks.length === 0) {\n          return false;\n        }\n\n        this.initChecks.pop();\n      },\n      setCurrentUserOrgs: function setCurrentUserOrgs(params, callback) {\n        callback = callback || function () {};\n\n        if (!this.currentUserId) {\n          callback({\n            \"error\": \"Current user id is required.\"\n          });\n          return;\n        }\n\n        var self = this;\n        this.modules.tnthAjax.getDemo(this.currentUserId, params, function (data) {\n          //setting current user's (not subject's)\n          if (!data || data.error) {\n            callback({\n              \"error\": self.modules.i18next.t(\"Unable to set current user orgs\")\n            });\n            return false;\n          }\n\n          if (!data.careProvider) {\n            return false;\n          }\n\n          var orgTool = self.getOrgTool();\n          self.userOrgs = data.careProvider.map(function (item) {\n            return item.reference.split(\"/\").pop();\n          });\n          var topLevelOrgs = orgTool.getUserTopLevelParentOrgs(self.userOrgs);\n          self.topLevelOrgs = topLevelOrgs.map(function (item) {\n            return orgTool.getOrgName(item);\n          });\n          callback(data);\n        });\n      },\n      isUserEmailReady: function isUserEmailReady() {\n        return this.userEmailReady;\n      },\n      setUserEmailReady: function setUserEmailReady(params) {\n        if (this.mode !== \"profile\") {\n          //setting email ready status only applies to profile page\n          return false;\n        }\n\n        var self = this;\n        this.modules.tnthAjax.getEmailReady(this.subjectId, params, function (data) {\n          if (data.error) {\n            return false;\n          }\n\n          self.userEmailReady = data.ready;\n          self.messages.userEmailReadyMessage = data.reason || \"\";\n        });\n      },\n      isDisableField: function isDisableField() {\n        var fieldId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        return this.disableFields.indexOf(fieldId) !== -1;\n      },\n      handleMedidataRaveFields: function handleMedidataRaveFields(params) {\n        if (!this.settings.MEDIDATA_RAVE_FIELDS || !this.settings.MEDIDATA_RAVE_ORG) {\n          //expected config example: MEDIDATA_RAVE_FIELDS = ['deceased', 'studyid', 'consent_status', 'dob', 'org'] and MEDIDATA_RAVE_ORG = 'IRONMAN'\n          return false;\n        }\n\n        var self = this;\n        this.setCurrentUserOrgs(params, function () {\n          if (self.topLevelOrgs.indexOf(self.settings.MEDIDATA_RAVE_ORG) === -1) {\n            return false;\n          }\n\n          $.merge(self.disableFields, self.settings.MEDIDATA_RAVE_FIELDS);\n        });\n      },\n      setDisableEditButtons: function setDisableEditButtons() {\n        if (this.disableFields.length === 0) {\n          return false;\n        }\n\n        var self = this;\n        $(\"#profileMainContent .profile-item-container\").each(function () {\n          //disable field/section that is listed in disable field array\n          var dataSection = this.getAttribute(\"data-sections\");\n\n          if (!dataSection) {\n            return true;\n          }\n\n          if (self.isDisableField(dataSection)) {\n            //hide edit button for the section\n            $(this).children(\".profile-item-edit-btn\").css(\"display\", \"none\");\n          }\n        });\n      },\n      setDisableFields: function setDisableFields(params) {\n        if (!this.currentUserId || this.isAdmin() || !this.isSubjectPatient()) {\n          return false;\n        }\n\n        var self = this;\n        this.setConfiguration(params, function () {\n          //make sure settings are there\n          self.handleMedidataRaveFields();\n          self.setDisableEditButtons();\n        });\n      },\n      setDemoData: function setDemoData(params, callback) {\n        var self = this;\n\n        callback = callback || function () {};\n\n        if (!this.subjectId) {\n          callback();\n          return false;\n        }\n\n        this.modules.tnthAjax.clearDemoSessionData(this.subjectId);\n        this.modules.tnthAjax.getDemo(this.subjectId, params, function (data) {\n          //get demo returned cached data if there, but we need fresh data\n          if (data) {\n            self.demo.data = data;\n            setTimeout(function () {\n              self.setUserEmailReady();\n            }, 50);\n\n            if (data.telecom) {\n              data.telecom.forEach(function (item) {\n                if (item.system === \"email\") {\n                  self.demo.data.email = item.value;\n                }\n\n                if (item.system === \"phone\") {\n                  if (item.use === \"mobile\") {\n                    self.demo.data.cellPhone = item.value;\n                  }\n\n                  if (item.use === \"home\") {\n                    self.demo.data.homePhone = item.value;\n                  }\n                }\n              });\n            }\n\n            if (data.name) {\n              if (data.name.family && data.name.given) {\n                self.demo.data.fullName = $.trim(data.name.given + \" \" + data.name.family);\n              } else if (data.name.family) {\n                self.demo.data.fullName = data.name.family;\n              } else if (data.name.given) {\n                self.demo.data.fullName = data.name.given;\n              }\n            } else {\n              self.demo.data.name = {\n                family: \"\",\n                given: \"\"\n              };\n            }\n\n            var datesArray = data.birthDate ? data.birthDate.split(\"-\") : [\"\", \"\", \"\"];\n            self.demo.data.displayBirthDate = self.modules.tnthDates.displayDateString(datesArray[1], datesArray[2], datesArray[0]);\n            self.demo.data.birthDay = datesArray[2];\n            self.demo.data.birthMonth = datesArray[1];\n            self.demo.data.birthYear = datesArray[0];\n            var m = \"\",\n                d = \"\",\n                y = \"\",\n                displayDeceasedDate = \"\";\n\n            if (data.deceasedDateTime) {\n              var deceasedDateObj = new Date(data.deceasedDateTime);\n              m = self.pad(deceasedDateObj.getUTCMonth() + 1);\n              d = deceasedDateObj.getUTCDate();\n              y = deceasedDateObj.getUTCFullYear();\n              deceasedDateObj = new Date(deceasedDateObj.toUTCString().slice(0, -4));\n              displayDeceasedDate = deceasedDateObj.toLocaleDateString(\"en-GB\", {\n                //use native date function\n                day: \"numeric\",\n                month: \"short\",\n                year: \"numeric\"\n              });\n            }\n\n            self.demo.data.displayDeceasedDate = displayDeceasedDate;\n            self.demo.data.deceasedDay = d;\n            self.demo.data.deceasedMonth = m;\n            self.demo.data.deceasedYear = y;\n\n            if (data.identifier) {\n              data.identifier.forEach(function (item) {\n                if (item.system === self.modules.SYSTEM_IDENTIFIER_ENUM.external_site_id) {\n                  data.siteId = item.value;\n                }\n\n                if (item.system === self.modules.SYSTEM_IDENTIFIER_ENUM.external_study_id) {\n                  data.studyId = item.value;\n                }\n              });\n            }\n\n            self.demo.data.language = \"\";\n\n            if (data.communication) {\n              data.communication.forEach(function (o) {\n                if (o.language && o.language.coding) {\n                  o.language.coding.forEach(function (item) {\n                    self.demo.data.language = item;\n                    self.demo.data.languageCode = item.code;\n                    self.demo.data.languageDisplay = item.display;\n                  });\n                }\n              });\n            }\n\n            if (data.extension) {\n              data.extension.forEach(function (item) {\n                if (item.url === self.modules.SYSTEM_IDENTIFIER_ENUM.ethnicity) {\n                  item.valueCodeableConcept.coding.forEach(function (ethnicity) {\n                    self.demo.data.ethnicity = self.demo.data.ethnicity || [];\n                    self.demo.data.ethnicity.push(ethnicity);\n                    self.demo.data.ethnicityCodes = ethnicity.code;\n                  });\n                }\n\n                if (item.url === self.modules.SYSTEM_IDENTIFIER_ENUM.race) {\n                  item.valueCodeableConcept.coding.forEach(function (race) {\n                    self.demo.data.race = self.demo.data.race || [];\n                    self.demo.data.race.push(race);\n                  });\n\n                  if (self.demo.data.race) {\n                    self.demo.data.raceCodes = self.demo.data.race.map(function (item) {\n                      return item.code;\n                    });\n                  }\n                }\n\n                if (!self.demo.data.timezone && item.url === self.modules.SYSTEM_IDENTIFIER_ENUM.timezone) {\n                  self.demo.data.timezone = item.timezone ? item.timezone : \"\";\n                }\n              });\n            }\n\n            self.demo.data.raceCodes = self.demo.data.raceCodes || [];\n          }\n\n          callback(data);\n        });\n      },\n      setUserSettings: function setUserSettings() {\n        if ($(\"#profileForm\").length > 0) {\n          this.subjectId = document.querySelector(\"#profileUserId\").value;\n          this.currentUserId = document.querySelector(\"#profileCurrentUserId\").value;\n          this.mode = \"profile\";\n        }\n\n        if ($(\"#aboutForm\").length > 0) {\n          this.subjectId = document.querySelector(\"#iq_userId\").value;\n          this.currentUserId = document.querySelector(\"#iq_userId\").value;\n          this.mode = \"initialQueries\";\n        }\n\n        var acoContainer = document.querySelector(\"#accountCreationContentContainer\");\n\n        if (acoContainer) {\n          this.currentUserId = document.querySelector(\"#currentStaffUserId\").value;\n          this.mode = acoContainer.getAttribute(\"data-account\") === \"patient\" ? \"createPatientAccount\" : \"createUserAccount\";\n        }\n      },\n      getOrgTool: function getOrgTool(callback) {\n        callback = callback || function () {};\n\n        if (!this.orgTool) {\n          var self = this;\n          this.orgTool = new this.modules.orgTool();\n          this.orgTool.init(function (data) {\n            if (data && !data.error) {\n              self.orgsData = data;\n            }\n\n            callback(data);\n          });\n          this.orgsList = this.orgTool.getOrgsList();\n        }\n\n        return this.orgTool;\n      },\n      isConsentEditable: function isConsentEditable() {\n        var isStaff = this.currentUserRoles.indexOf(\"staff\") !== -1;\n        var isCurrentUserPatient = this.currentUserRoles.indexOf(\"patient\") !== -1;\n        var isEditableByStaff = this.settings.hasOwnProperty(\"CONSENT_EDIT_PERMISSIBLE_ROLES\") && this.settings.CONSENT_EDIT_PERMISSIBLE_ROLES.indexOf(\"staff\") !== -1;\n        var isEditableByPatient = this.settings.hasOwnProperty(\"CONSENT_EDIT_PERMISSIBLE_ROLES\") && this.settings.CONSENT_EDIT_PERMISSIBLE_ROLES.indexOf(\"patient\") !== -1;\n        return !this.isDisableField(\"consent_status\") && (isStaff && isEditableByStaff || isCurrentUserPatient && isEditableByPatient);\n      },\n      isTestEnvironment: function isTestEnvironment() {\n        return String(this.settings.SYSTEM_TYPE).toLowerCase() !== \"production\";\n      },\n      isAdmin: function isAdmin() {\n        return this.currentUserRoles.indexOf(\"admin\") !== -1;\n      },\n      isSubjectPatient: function isSubjectPatient() {\n        if (this.mode === \"createPatientAccount\" || $(\"#profileMainContent\").hasClass(\"patient-view\")) {\n          return true;\n        }\n\n        if (this.userRoles.length === 0) {\n          //this is a blocking call if not cached, so avoid it if possible\n          this.initUserRoles({\n            sync: true\n          });\n        }\n\n        return this.userRoles.indexOf(\"patient\") !== -1;\n      },\n      isStaff: function isStaff() {\n        return this.currentUserRoles.indexOf(\"staff\") !== -1 || this.currentUserRoles.indexOf(\"staff_admin\") !== -1;\n      },\n      isProxy: function isProxy() {\n        return this.currenUserId !== \"\" && this.subjectId !== \"\" && this.currentUserId !== this.subjectId;\n      },\n      isConsentWithTopLevelOrg: function isConsentWithTopLevelOrg() {\n        return this.settings.CONSENT_WITH_TOP_LEVEL_ORG;\n      },\n      getShowInMacro: function getShowInMacro() {\n        return this.settings.SHOW_PROFILE_MACROS || [];\n      },\n      setSectionLoaders: function setSectionLoaders() {\n        $(\"#profileForm .section-loader\").removeClass(\"tnth-hide\");\n      },\n      clearSectionLoaders: function clearSectionLoaders() {\n        $(\"#profileForm .section-loader\").addClass(\"tnth-hide\");\n        $(\"#profileForm .profile-item-edit-btn\").addClass(\"active\");\n      },\n      onBeforeSectionsLoad: function onBeforeSectionsLoad() {\n        if (this.mode === \"profile\") {\n          document.querySelector(\"#mainDiv\").classList.add(\"profile\");\n        }\n      },\n      onSectionsDidLoad: function onSectionsDidLoad() {\n        this.setDisableFields();\n\n        if (this.mode === \"profile\") {\n          //Note, this attach loader indicator to element with the class data-loader-container, in order for this to work, the element needs to have an id attribute\n          var self = this;\n          setTimeout(function () {\n            self.initFieldsEvent();\n            self.initLoginAsButtons();\n            self.fillViews = self.setView();\n            self.initEditButtons();\n          }, 50);\n          $(document).ajaxStop(function () {\n            self.clearSectionLoaders(); //clear section loaders after ajax calls completed, note this will account for failed/cancelled requests as well\n          });\n        }\n      },\n      initLoginAsButtons: function initLoginAsButtons() {\n        var self = this;\n        $(\"#loginAsButton, #btnLoginAs\").on(\"click\", function (e) {\n          e.preventDefault();\n          e.stopPropagation();\n          sessionStorage.clear();\n          self.handleLoginAs(e);\n        });\n      },\n      initEditButtons: function initEditButtons() {\n        var self = this;\n        $(\"#profileForm .profile-item-edit-btn\").each(function () {\n          $(this).on(\"click\", function (e) {\n            e.preventDefault();\n            var container = $(this).closest(\".profile-item-container\");\n            container.toggleClass(\"edit\");\n            $(this).val(container.hasClass(\"edit\") ? i18next.t(\"DONE\") : i18next.t(\"EDIT\"));\n\n            if (!container.hasClass(\"edit\")) {\n              self.fillSectionView(container.attr(\"data-sections\"));\n              self.handleOptionalCoreData();\n            }\n          });\n        });\n      },\n      initFieldsEvent: function initFieldsEvent() {\n        var self = this;\n        $(\"#profileMainContent [data-loader-container]\").each(function () {\n          var attachId = $(this).attr(\"id\");\n          var targetFields = $(this).find(\"input, select\");\n\n          if (targetFields.length === 0) {\n            return true;\n          }\n\n          targetFields.each(function () {\n            if ($(this).attr(\"type\") === \"hidden\") {\n              return false;\n            }\n\n            $(this).attr(\"data-save-container-id\", attachId);\n            var triggerEvent = $(this).attr(\"data-trigger-event\") || \"change\";\n\n            if ($(this).attr(\"data-update-on-validated\")) {\n              triggerEvent = \"blur\";\n            }\n\n            triggerEvent = triggerEvent + \" change\";\n\n            if ($(this).attr(\"type\") === \"text\") {\n              $(this).on(\"keypress\", function (e) {\n                e.stopPropagation();\n\n                if (e.keyCode === 13) {\n                  //account for hitting enter key when updating text field\n                  $(this).trigger(triggerEvent);\n                  return false;\n                }\n              });\n            }\n\n            $(this).on(triggerEvent, function (e) {\n              e.stopPropagation();\n              self.modules.tnthAjax.clearDemoSessionData(self.subjectId); //seems there is a race condition here, make sure not to use cache data here as data is being updated\n\n              var valid = this.validity ? this.validity.valid : true;\n\n              if (!$(this).attr(\"data-update-on-validated\") && valid) {\n                var o = $(this);\n                var parentContainer = $(this).closest(\".profile-item-container\");\n                var setDemoInterval = setInterval(function () {\n                  var customErrorField = $(\"#\" + o.attr(\"data-error-field\"));\n                  var hasError = customErrorField.length > 0 && customErrorField.text() !== \"\";\n\n                  if (!hasError) {\n                    //need to check default help block for error as well\n                    var errorBlock = parentContainer.find(\".help-block\");\n                    hasError = errorBlock.length > 0 && errorBlock.text() !== \"\";\n                  }\n\n                  if (hasError) {\n                    clearInterval(setDemoInterval);\n                    return false;\n                  }\n\n                  clearInterval(setDemoInterval);\n                  o.trigger(\"updateDemoData\");\n                }, 10);\n              }\n            });\n          });\n        });\n      },\n      initSections: function initSections(callback) {\n        var self = this,\n            sectionsInitialized = {},\n            initCount = 0;\n        $(\"#mainDiv [data-profile-section-id]\").each(function () {\n          var sectionId = $(this).attr(\"data-profile-section-id\");\n\n          if (!sectionsInitialized[sectionId]) {\n            setTimeout(function () {\n              self.initSection(sectionId);\n            }, initCount += 20);\n            sectionsInitialized[sectionId] = true;\n          }\n        });\n\n        if (callback) {\n          setTimeout(function () {\n            callback();\n          }, initCount + 20);\n        }\n      },\n      handleOptionalCoreData: function handleOptionalCoreData() {\n        var targetSection = $(\"#profileDetailContainer\"),\n            self = this;\n\n        if (targetSection.length > 0) {\n          var loadingElement = targetSection.find(\".profile-item-loader\");\n          loadingElement.show();\n          this.modules.tnthAjax.getOptionalCoreData(self.subjectId, {\n            useWorker: true,\n            cache: true\n          }, function (data) {\n            //cache this request as change is rare if ever for optional data\n            if (data.optional) {\n              var sections = $(\"#profileForm .optional\");\n              sections.each(function () {\n                var sectionElement = $(this);\n                var section = sectionElement.attr(\"data-section-id\");\n                var parent = sectionElement.closest(\".profile-item-container\");\n                var visibleRows = parent.find(\".view-container tr:visible\").length;\n                var noDataContainer = parent.find(\".no-data-container\");\n                var btn = parent.find(\".profile-item-edit-btn\");\n\n                if (section) {\n                  if (data.optional.indexOf(section) !== -1) {\n                    sectionElement.show();\n                    noDataContainer.html(\"\");\n                    btn.show();\n                  } else {\n                    sectionElement.hide();\n\n                    if (visibleRows === 0) {\n                      noDataContainer.html(\"<p class='text-muted'>\" + i18next.t(\"No information available\") + \"</p>\");\n                      btn.hide();\n                    }\n                  }\n                }\n              });\n            }\n\n            loadingElement.hide();\n          });\n        }\n      },\n      fillSectionView: function fillSectionView(sectionID) {\n        if (sectionID && this.fillViews[sectionID]) {\n          this.fillViews[sectionID]();\n        }\n      },\n      setView: function setView() {\n        var self = this;\n        return {\n          \"setContent\": function setContent(field, content) {\n            if ($.trim(content)) {\n              field.html(i18next.t(content));\n            } else {\n              field.html(\"<p class='text-muted'>\" + i18next.t(\"not provided\") + \"</p>\");\n            }\n          },\n          \"clinical\": function clinical() {\n            this.setContent($(\"#pca_diag_view\"), $(\"#patDiag input[name='pca_diag']:checked\").closest(\"label\").text());\n            this.setContent($(\"#pca_localized_view\"), $(\"#patMeta input[name='pca_localized']:checked\").closest(\"label\").text());\n\n            if ($(\"#biopsyDateContainer\").hasClass(\"has-error\") || $(\"#biopsyDateError\").text()) {\n              return false;\n            }\n\n            var tnthDates = self.modules.tnthDates;\n            var f = $(\"#patBiopsy input[name='biopsy']:checked\");\n            var a = f.val(),\n                m = $(\"#biopsy_month option:selected\").val(),\n                y = $(\"#biopsy_year\").val(),\n                d = $(\"#biopsy_day\").val();\n            var content = f.closest(\"label\").text();\n\n            if (String(a) === \"true\" && $.trim(m + y + d)) {\n              content += \"&nbsp;&nbsp;\" + tnthDates.displayDateString(m, d, y);\n              $(\"#biopsyDateContainer\").show();\n            }\n\n            this.setContent($(\"#biopsy_view\"), content);\n          }\n        };\n      },\n      initSection: function initSection(type) {\n        switch (String(type).toLowerCase()) {\n          case \"name\":\n            this.initNameSection();\n            break;\n\n          case \"birthday\":\n            this.initBirthdaySection();\n            break;\n\n          case \"email\":\n            this.initEmailSection();\n            break;\n\n          case \"phone\":\n            this.initPhoneSection();\n            break;\n\n          case \"altphone\":\n            this.initAltPhoneSection();\n            break;\n\n          case \"orgsstateselector\":\n            this.initOrgsStateSelectorSection();\n            this.initConsentSection();\n            break;\n\n          case \"orgs\":\n            this.initDefaultOrgsSection();\n            this.initConsentSection();\n            break;\n\n          case \"consent\":\n            this.initConsentSection();\n            break;\n\n          case \"communication\":\n            this.initResetPasswordSection();\n            this.initCommunicationSection();\n            break;\n\n          case \"patientemailform\":\n            this.initPatientEmailFormSection();\n            break;\n\n          case \"staffemailform\":\n            this.initStaffRegistrationEmailSection();\n            break;\n\n          case \"resetpassword\":\n            this.initResetPasswordSection();\n            break;\n\n          case \"deceased\":\n            this.initDeceasedSection();\n            break;\n\n          case \"patientreport\":\n            this.initPatientReportSection();\n            break;\n\n          case \"assessmentlist\":\n            this.initAssessmentListSection();\n            break;\n\n          case \"clinicalquestions\":\n            this.initClinicalQuestionsSection();\n            break;\n\n          case \"custompatientdetail\":\n            this.initCustomPatientDetailSection();\n            break;\n\n          case \"procedure\":\n            this.initProcedureSection();\n            break;\n\n          case \"roleslist\":\n            this.initRolesListSection();\n            break;\n\n          case \"auditlog\":\n            this.initAuditLogSection();\n            break;\n        }\n      },\n      handleLoginAs: function handleLoginAs(e) {\n        if (e) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n\n        try {\n          //sessionStorage does not work in private mode\n          sessionStorage.setItem(\"loginAsPatient\", \"true\");\n        } catch (ex) {\n          //alert user if this is not set properly\n          alert(i18next.t(\"Unable to properly set session storage variable for login-as. \") + ex.message);\n        }\n\n        location.replace(\"/login-as/\" + this.subjectId);\n      },\n      postDemoData: function postDemoData(field, data, callback) {\n        callback = callback || function () {};\n\n        if (!this.subjectId) {\n          callback({\n            \"error\": i18next.t(\"Subject id is required\")\n          });\n          return false;\n        }\n\n        var self = this;\n        Vue.nextTick(function () {\n          // DOM updated\n          field = field || $(field);\n          data = data || {};\n          var valid = field.get(0).validity ? field.get(0).validity.valid : true;\n\n          if (!valid) {\n            callback({\n              \"error\": i18next.t(\"Invalid field value.\")\n            });\n            return false;\n          }\n\n          var o = field;\n          var parentContainer = field.closest(\".profile-item-container\");\n          var editButton = parentContainer.find(\".profile-item-edit-btn\");\n          var customErrorField = $(\"#\" + o.attr(\"data-error-field\"));\n          var hasError = customErrorField.length > 0 && customErrorField.text() !== \"\";\n\n          if (hasError) {\n            editButton.attr(\"disabled\", false);\n            callback({\n              \"error\": i18next.t(\"Validation error.\")\n            });\n            return;\n          }\n\n          editButton.attr(\"disabled\", true);\n          data.resourceType = data.resourceType || \"Patient\";\n          self.modules.tnthAjax.putDemo(self.subjectId, data, field, false, function (data) {\n            callback(data);\n            setTimeout(function () {\n              self.setDemoData({\n                cache: false\n              }, function () {\n                var formGroup = parentContainer.find(\".form-group\").not(\".data-update-on-validated\");\n                formGroup.removeClass(\"has-error\");\n                formGroup.find(\".help-block.with-errors\").html(\"\");\n                editButton.attr(\"disabled\", false);\n              });\n            }, 350);\n          });\n        });\n      },\n      getTelecomData: function getTelecomData() {\n        var telecom = [];\n        var emailVal = $(\"#email\").val();\n\n        if ($.trim(emailVal)) {\n          telecom.push({\n            \"system\": \"email\",\n            \"value\": $.trim(emailVal)\n          });\n        } else {\n          telecom.push({\n            \"system\": \"email\",\n            \"value\": \"__no_email__\"\n          });\n        }\n\n        var phone = $.trim($(\"#phone\").val());\n\n        if (phone) {\n          telecom.push({\n            \"system\": \"phone\",\n            \"use\": \"mobile\",\n            \"value\": phone\n          });\n        }\n\n        var altphone = $.trim($(\"#altPhone\").val());\n\n        if (altphone) {\n          telecom.push({\n            \"system\": \"phone\",\n            \"use\": \"home\",\n            \"value\": altphone\n          });\n        }\n\n        return {\n          \"telecom\": telecom\n        };\n      },\n      getIdentifierData: function getIdentifierData() {\n        var self = this,\n            studyIdField = $(\"#profileStudyId\"),\n            siteIdField = $(\"#profileSiteId\");\n        var studyId = studyIdField.val(),\n            siteId = siteIdField.val(),\n            identifiers = [];\n\n        if (this.demo.data.identifier) {\n          this.demo.data.identifier.forEach(function (identifier) {\n            identifiers.push(identifier);\n          });\n        } else {\n          if (self.subjectId) {\n            $.ajax({\n              //get current identifier(s)\n              type: \"GET\",\n              url: \"/api/demographics/\" + self.subjectId,\n              async: false\n            }).done(function (data) {\n              if (data && data.identifier) {\n                data.identifier.forEach(function (identifier) {\n                  identifiers.push(identifier);\n                });\n              }\n            }).fail(function (xhr) {\n              self.modules.tnthAjax.reportError(self.subjectId, \"api/demographics\" + self.subjectId, xhr.responseText);\n            });\n          }\n        }\n\n        identifiers = $.grep(identifiers, function (identifier) {\n          //this will save study Id or site Id only if each has a value otherwise if each is empty, it will be purged from the identifiers that had older value of each\n          return identifier.system !== self.modules.SYSTEM_IDENTIFIER_ENUM.external_study_id && identifier.system !== self.modules.SYSTEM_IDENTIFIER_ENUM.external_site_id;\n        });\n        studyId = $.trim(studyId);\n\n        if (studyId) {\n          var studyIdObj = {\n            system: self.modules.SYSTEM_IDENTIFIER_ENUM.external_study_id,\n            use: \"secondary\",\n            value: studyId\n          };\n          identifiers.push(studyIdObj);\n        }\n\n        siteId = $.trim(siteId);\n\n        if (siteId) {\n          var siteIdObj = {\n            system: self.modules.SYSTEM_IDENTIFIER_ENUM.external_site_id,\n            use: \"secondary\",\n            value: siteId\n          };\n          identifiers.push(siteIdObj);\n        }\n\n        return {\n          \"identifier\": identifiers\n        };\n      },\n      getExtensionData: function getExtensionData() {\n        var self = this,\n            e = $(\"#userEthnicity\"),\n            r = $(\"#userRace\"),\n            tz = $(\"#profileTimeZone\"),\n            ethnicityIDs,\n            raceIDs,\n            tzID;\n        var extension = [];\n\n        if (e.length > 0) {\n          ethnicityIDs = $(\"#userEthnicity input:checked\").map(function () {\n            return {\n              code: $(this).val(),\n              system: self.modules.SYSTEM_IDENTIFIER_ENUM.ethnicity_system\n            };\n          }).get();\n\n          if (ethnicityIDs) {\n            extension.push({\n              \"url\": self.modules.SYSTEM_IDENTIFIER_ENUM.ethnicity,\n              \"valueCodeableConcept\": {\n                \"coding\": ethnicityIDs\n              }\n            });\n          }\n        }\n\n        if (r.length > 0) {\n          raceIDs = $(\"#userRace input:checkbox:checked\").map(function () {\n            return {\n              code: $(this).val(),\n              system: self.modules.SYSTEM_IDENTIFIER_ENUM.race_system\n            };\n          }).get();\n\n          if (raceIDs) {\n            extension.push({\n              \"url\": self.modules.SYSTEM_IDENTIFIER_ENUM.race,\n              \"valueCodeableConcept\": {\n                \"coding\": raceIDs\n              }\n            });\n          }\n        }\n\n        if (tz.length > 0) {\n          tzID = $(\"#profileTimeZone option:selected\").val();\n\n          if (tzID) {\n            extension.push({\n              timezone: tzID,\n              url: self.modules.SYSTEM_IDENTIFIER_ENUM.timezone\n            });\n          }\n        }\n\n        return {\n          \"extension\": extension\n        };\n      },\n      initNameSection: function initNameSection() {\n        var self = this;\n        $(\"#firstname\").on(\"updateDemoData\", function () {\n          self.postDemoData($(this), {\n            \"name\": {\n              \"given\": $.trim($(this).val())\n            }\n          });\n        });\n        $(\"#lastname\").on(\"updateDemoData\", function () {\n          self.postDemoData($(this), {\n            \"name\": {\n              \"family\": $.trim($(this).val())\n            }\n          });\n        });\n      },\n      initBirthdaySection: function initBirthdaySection() {\n        var self = this;\n        [\"year\", \"month\", \"date\"].forEach(function (fn) {\n          var field = $(\"#\" + fn);\n          var y = $(\"#year\"),\n              m = $(\"#month\"),\n              d = $(\"#date\");\n          field.on(\"keyup focusout\", function () {\n            var isValid = self.modules.tnthDates.validateDateInputFields(m.val(), d.val(), y.val(), \"errorbirthday\");\n\n            if (isValid) {\n              $(\"#birthday\").val(y.val() + \"-\" + m.val() + \"-\" + d.val());\n              $(\"#errorbirthday\").html(\"\");\n            } else {\n              $(\"#birthday\").val(\"\");\n            }\n          });\n          field.on(\"updateDemoData\", function () {\n            if (y.val() && m.val() && d.val()) {\n              self.postDemoData($(this), {\n                birthDate: y.val() + \"-\" + m.val() + \"-\" + d.val()\n              });\n            }\n          });\n        });\n\n        this.__convertToNumericField($(\"#date, #year\"));\n      },\n      initEmailSection: function initEmailSection() {\n        var self = this;\n        $(\"#email\").attr(\"data-update-on-validated\", \"true\").attr(\"data-user-id\", self.subjectId);\n        $(\".btn-send-email\").blur();\n        $(\"#email\").on(\"keyup\", function (e) {\n          e.stopPropagation();\n          $(\"#erroremail\").html(\"\");\n        });\n        $(\"#email\").on(\"change\", function () {\n          setTimeout(function () {\n            self.updateEmailVis();\n          }, 350);\n        });\n        $(\"#email\").on(\"postEventUpdate\", function () {\n          if (self.updateEmailVis()) {\n            //should only update email if there is no validation error\n            self.postDemoData($(this), self.getTelecomData());\n          }\n        });\n      },\n      updateEmailVis: function updateEmailVis() {\n        var hasError = $(\"#emailGroup\").hasClass(\"has-error\");\n        var emailValue = $(\"#email\").val();\n\n        if (!hasError) {\n          this.demo.data.email = emailValue;\n          $(\"#erroremail\").html(\"\");\n          $(\"#email_view\").html(\"<p>\" + (emailValue || i18next.t(\"not provided\")) + \"</p>\"); //update email display /*global i18next */\n        }\n\n        return !hasError; //return appropriate indication that value/display has been updated if no error\n      },\n      updateTelecomData: function updateTelecomData(event) {\n        this.postDemoData($(event.target), this.getTelecomData());\n      },\n      initPhoneSection: function initPhoneSection() {\n        this.__convertToNumericField($(\"#phone\"));\n      },\n      initAltPhoneSection: function initAltPhoneSection() {\n        this.__convertToNumericField($(\"#altPhone\"));\n      },\n      updateExtensionData: function updateExtensionData(event) {\n        this.postDemoData($(event.target), this.getExtensionData());\n      },\n      updateGenderData: function updateGenderData(event) {\n        this.postDemoData($(event.target), {\n          gender: event.target.value\n        });\n      },\n      updateLocaleData: function updateLocaleData(event) {\n        var targetElement = $(event.target);\n        var selectedLocale = targetElement.find(\"option:selected\");\n        var data = {\n          communication: [{\n            \"language\": {\n              \"coding\": [{\n                \"code\": selectedLocale.val(),\n                \"display\": selectedLocale.text(),\n                \"system\": \"urn:ietf:bcp:47\"\n              }]\n            }\n          }]\n        };\n        this.postDemoData(targetElement, data);\n        this.modules.tnthDates.clearSessionLocale();\n        setTimeout(function () {\n          window.location.reload(true);\n        }, 1000);\n      },\n      updateIdentifierData: function updateIdentifierData(event) {\n        this.postDemoData($(event.target), this.getIdentifierData());\n      },\n      getAccessUrl: function getAccessUrl() {\n        var url = \"\";\n        this.modules.tnthAjax.accessUrl(this.subjectId, true, function (data) {\n          if (!data.error) {\n            url = data.url;\n          }\n        });\n        return url;\n      },\n      \"reloadSendPatientEmailForm\": function reloadSendPatientEmailForm(userId) {\n        if ($(\"#sendPatientEmailTabContent\").length === 0) {\n          return false;\n        }\n\n        var self = this;\n        $(\"#sendPatientEmailTabContent\").animate({\n          opacity: 0\n        }, function () {\n          $(this).css(\"opacity\", 1);\n          setTimeout(function () {\n            var checkedOrgInput = $(\"#userOrgs input[name='organization']:checked\");\n\n            if (checkedOrgInput.attr(\"id\") === \"noOrgs\") {\n              return false;\n            }\n\n            if (self.settings.hasOwnProperty(\"ACCEPT_TERMS_ON_NEXT_ORG\") && checkedOrgInput.attr(\"data-parent-name\") === self.settings.ACCEPT_TERMS_ON_NEXT_ORG) {\n              $(\"#profileassessmentSendEmailContainer\").addClass(\"active\"); ////update registration and assessment status email tiles in communications section, needed when org changes\n\n              self.assessmentStatus(userId);\n            } else {\n              $(\"#profileassessmentSendEmailContainer\").removeClass(\"active\");\n            }\n          }, 500);\n        });\n      },\n      \"assessmentStatus\": function assessmentStatus(userId) {\n        var self = this;\n        this.modules.tnthAjax.patientReport(userId, {\n          useWorker: true\n        }, function (data) {\n          if (data.error || !data.user_documents) {\n            return false;\n          }\n\n          self.patientReport.data = data.user_documents;\n          var pcpReports = $.grep(data.user_documents, function (document) {\n            return /P3P/gi.test(document.filename);\n          });\n          self.patientReport.hasP3PReport = pcpReports && pcpReports.length > 0;\n\n          if (self.patientReport.hasP3PReport) {\n            $(\"#btnProfileSendassessmentEmail\").hide();\n            $(\"#assessmentStatusContainer .email-selector-container\").hide();\n          }\n        });\n      },\n      getEmailContent: function getEmailContent(userId, messageId, callback) {\n        callback = callback || function () {};\n\n        $(\"#messageLoader_\" + messageId).show();\n        $(\"#messageLink_\" + messageId).css(\"visibility\", \"hidden\");\n        this.modules.tnthAjax.emailLog(userId, false, function (data) {\n          setTimeout(function () {\n            $(\"#messageLoader_\" + messageId).hide();\n            $(\"#messageLink_\" + messageId).css(\"visibility\", \"visible\");\n          }, 550);\n\n          if (!data.messages) {\n            callback(data);\n            return false;\n          }\n\n          var targetMessages = $.grep(data.messages, function (item) {\n            return parseInt(item.id) === parseInt(messageId);\n          });\n          targetMessages.forEach(function (item) {\n            $(\"#emailBodyModal .body-content\").html(item.body);\n            $(\"#emailBodyModal .body-content a\").each(function () {\n              // email content contains clickable link/button - need to prevent click event of those from being triggered\n              $(this).on(\"click\", function (e) {\n                e.preventDefault();\n                return false;\n              });\n            });\n            $(\"#emailBodyModal .body-content style\").remove(); //need to remove inline style specifications - as they can be applied globally and override the classes specified in stylesheet\n\n            $(\"#emailBodyModal .body-content a.btn\").addClass(\"btn-tnth-primary\");\n            $(\"#emailBodyModal .body-content td.btn, #emailBodyModal .body-content td.btn a\").addClass(\"btn-tnth-primary\").removeAttr(\"width\").removeAttr(\"style\");\n            $(\"#emailBodyModal\").modal(\"show\"); //remove inline style in email body, style here is already applied via css\n          });\n          callback(data);\n        });\n      },\n      getEmailLog: function getEmailLog(userId, data) {\n        if (!data.error) {\n          var self = this;\n\n          if (data.messages && data.messages.length > 0) {\n            data.messages.forEach(function (item) {\n              item.sent_at = self.modules.tnthDates.formatDateString(item.sent_at, \"iso\");\n              item.subject = \"<i id=\\\"messageLoader_\".concat(item.id, \"\\\" class=\\\"message-loader fa fa-spinner fa-spin tnth-hide\\\"></i>\\n                                           <a id=\\\"messageLink_\").concat(item.id, \"\\\" class=\\\"item-link\\\" data-user-id=\\\"\").concat(userId, \"\\\" data-item-id=\\\"\").concat(item.id, \"\\\"><u>\").concat(item.subject, \"</u></a>\");\n            });\n            $(\"#emailLogContent\").html(\"<table id='profileEmailLogTable'></table>\");\n            $(\"#profileEmailLogTable\").bootstrapTable(this.setBootstrapTableConfig({\n              data: data.messages,\n              classes: \"table table-responsive profile-email-log\",\n              sortName: \"sent_at\",\n              sortOrder: \"desc\",\n              toolbar: \"#emailLogTableToolBar\",\n              columns: [{\n                field: \"sent_at\",\n                title: i18next.t(\"Date (GMT), Y-M-D\"),\n                searchable: true,\n                sortable: true\n              }, {\n                field: \"subject\",\n                title: i18next.t(\"Subject\"),\n                class: \"message-subject\",\n                searchable: true,\n                sortable: true\n              }, {\n                field: \"recipients\",\n                title: i18next.t(\"Email\"),\n                sortable: true,\n                searchable: true,\n                width: \"20%\"\n              }]\n            }));\n            setTimeout(function () {\n              $(\"#lbEmailLog\").addClass(\"active\");\n              $(\"#profileEmailLogTable a.item-link\").on(\"click\", function () {\n                self.getEmailContent($(this).attr(\"data-user-id\"), $(this).attr(\"data-item-id\"));\n              });\n            }, 150);\n          } else {\n            $(\"#emailLogContent\").html(\"<span class='text-muted'>\" + i18next.t(\"No email log entry found.\") + \"</span>\");\n          }\n        } else {\n          $(\"#emailLogMessage\").text(data.error);\n        }\n      },\n      initPatientEmailFormSection: function initPatientEmailFormSection() {\n        var self = this;\n\n        if ($(\"#profileassessmentSendEmailContainer.active\").length > 0) {\n          self.assessmentStatus(self.subjectId);\n        }\n\n        $(\".email-selector\").off(\"change\").on(\"change\", function () {\n          self.messages.userInviteEmailErrorMessage = \"\";\n          self.messages.userInviteEmailInfoMessage = \"\";\n          var emailType = $(this).closest(\".profile-email-container\").attr(\"data-email-type\");\n          $(\".profilePatientEmail__btn-msg-wrapper\").addClass(\"tnth-hide\");\n\n          if ($(this).val() === \"\") {\n            $(\"#profile\" + emailType + \"EmailBtnMsgWrapper\").addClass(\"tnth-hide\");\n          } else {\n            $(\"#profile\" + emailType + \"EmailBtnMsgWrapper\").removeClass(\"tnth-hide\");\n          }\n\n          var btnEmail = $(\"#btnProfileSend\" + emailType + \"Email\");\n\n          if (String(this.value) !== \"\" && $(\"#email\").val() !== \"\" && $(\"#erroremail\").text() === \"\") {\n            var message = i18next.t(\"{emailType} email will be sent to {email}\");\n            message = message.replace(\"{emailType}\", $(this).children(\"option:selected\").text()).replace(\"{email}\", $(\"#email\").val());\n            self.messages.userInviteEmailInfoMessage = message;\n            btnEmail.attr(\"disabled\", false).removeClass(\"disabled\");\n          } else {\n            self.messages.userInviteEmailInfoMessage = \"\";\n            btnEmail.attr(\"disabled\", true).addClass(\"disabled\");\n          }\n        });\n        $(\"#email\").on(\"change\", function () {\n          self.messages.userInviteEmailInfoMessage = \"\";\n          self.messages.userInviteEmailErrorMessage = \"\";\n        });\n        $(\".btn-send-email\").off(\"click\").on(\"click\", function (event) {\n          event.preventDefault();\n          event.stopPropagation();\n          var emailType = $(this).closest(\".profile-email-container\").attr(\"data-email-type\");\n          var emailTypeElem = $(\"#profile\" + emailType + \"EmailSelect\"),\n              selectedOption = emailTypeElem.children(\"option:selected\");\n          var btnSelf = $(this);\n\n          if (selectedOption.val() === \"\") {\n            return false;\n          }\n\n          var emailUrl = selectedOption.attr(\"data-url\"),\n              email = $(\"#email\").val(),\n              subject = \"\",\n              body = \"\",\n              returnUrl = \"\";\n          var accessUrlError = \"\";\n\n          if (!emailUrl) {\n            self.messages.userInviteEmailErrorMessage = i18next.t(\"Url for email content is unavailable.\");\n            return false;\n          }\n\n          var resetBtn = function resetBtn(disabled, showLoading) {\n            disabled = disabled || false;\n            btnSelf.attr(\"disabled\", disabled).show();\n            self.patientEmailForm.loading = showLoading;\n\n            if (!disabled) {\n              btnSelf.removeClass(\"disabled\");\n            } else {\n              btnSelf.addClass(\"disabled\");\n            }\n          };\n\n          resetBtn(true, true);\n          btnSelf.hide();\n          $.ajax({\n            //get email content via API\n            type: \"GET\",\n            url: emailUrl,\n            cache: false,\n            async: true\n          }).done(function (data) {\n            if (!data || !data.subject || !data.body) {\n              self.messages.userInviteEmailErrorMessage = \"<div>\" + i18next.t(\"Unable to send email. Missing content.\") + \"</div>\";\n              ;\n              resetBtn();\n              return false;\n            }\n\n            subject = data.subject;\n            body = data.body;\n\n            if (selectedOption.val() === \"invite\" && emailType === \"registration\") {\n              returnUrl = self.getAccessUrl();\n\n              if (returnUrl) {\n                body = body.replace(/url_placeholder/g, decodeURIComponent(returnUrl));\n              } else {\n                accessUrlError = i18next.t(\"failed request to get email invite url\");\n              }\n            }\n\n            self.messages.userInviteEmailErrorMessage = \"\";\n\n            if (accessUrlError) {\n              self.messages.userInviteEmailErrorMessage = accessUrlError;\n              resetBtn();\n              return false;\n            }\n\n            self.modules.tnthAjax.invite(self.subjectId, {\n              \"subject\": subject,\n              \"recipients\": email,\n              \"body\": body\n            }, function (data) {\n              if (data.error) {\n                self.messages.userInviteEmailErrorMessage = i18next.t(\"Error occurred while sending invite email.\");\n                resetBtn();\n                return false;\n              }\n\n              self.messages.userInviteEmailInfoMessage = \"<strong class='text-success'>\" + i18next.t(\"{emailType} email sent to {emailAddress}\").replace(\"{emailType}\", selectedOption.text()).replace(\"{emailAddress}\", email) + \"</strong>\";\n              emailTypeElem.val(\"\");\n              self.modules.tnthAjax.emailLog(self.subjectId, {\n                useWorker: true\n              }, function (data) {\n                //reload email audit log\n                setTimeout(function () {\n                  self.getEmailLog(self.subjectId, data);\n                }, 100);\n              });\n              resetBtn(true);\n            });\n          }).fail(function (xhr) {\n            //report error\n            self.messages.userInviteEmailErrorMessage = i18next.t(\"Error occurred retreving email content via API.\");\n            resetBtn();\n            self.modules.tnthAjax.reportError(self.subjectId, emailUrl, xhr.responseText);\n          });\n        });\n      },\n      initStaffRegistrationEmailSection: function initStaffRegistrationEmailSection() {\n        var self = this;\n        $(\"#btnProfileSendEmail\").on(\"click\", function (event) {\n          event.preventDefault();\n          var email = $(\"#email\").val(),\n              subject = \"\",\n              body = \"\",\n              return_url = \"\";\n\n          var clinicName = function () {\n            var orgs = $(\"#userOrgs input[name='organization']:checked\"),\n                parentName = \"\";\n\n            if (orgs.length > 0) {\n              orgs.each(function () {\n                if (!parentName) {\n                  parentName = $(this).attr(\"data-parent-name\") || $(this).closest(\".org-container[data-parent-id]\").attr(\"data-parent-name\");\n                }\n              });\n            }\n\n            return parentName ? parentName : i18next.t(\"your clinic\");\n          }();\n\n          $(this).addClass(\"disabled\").attr(\"disabled\", true);\n          $(\"#sendRegistrationEmailForm .loading-indicator\").show();\n          $(\"#profileEmailErrorMessage\").html(\"\");\n          var btnRef = $(this);\n          $.ajax({\n            type: \"GET\",\n            url: $(\"#staffRegistrationEmailUrl\").val(),\n            cache: false,\n            async: false\n          }).done(function (data) {\n            if (data) {\n              subject = data.subject;\n              body = data.body;\n            }\n          }).fail(function () {});\n\n          if (!body) {\n            ////provide default body content if no body content was returned from ajax call\n            body = \"<p>\" + i18next.t(\"Hello, this is an invitation to complete your registration.\") + \"</p>\";\n            return_url = self.getAccessUrl();\n\n            if (return_url) {\n              body += \"<a href='\" + decodeURIComponent(return_url) + \"'>\" + i18next.t(\"Verify your account to complete registration\") + \"</a>\";\n            }\n          }\n\n          if (!subject) {\n            subject = i18next.t(\"Registration invite from {clinicName}\").replace(\"{clinicName}\", clinicName);\n          }\n\n          self.modules.tnthAjax.invite(self.subjectId, {\n            \"subject\": subject,\n            \"recipients\": email,\n            \"body\": body\n          }, function (data) {\n            if (!data.error) {\n              $(\"#profileEmailMessage\").text(i18next.t(\"invite email sent to {email}\").replace(\"{email}\", email));\n              $(\"#btnProfileSendEmail\").attr(\"disabled\", true);\n            } else {\n              if (data.error) {\n                $(\"#profileEmailErrorMessage\").text(i18next.t(\"Error occurred while sending invite email.\"));\n              }\n            }\n\n            $(\"#sendRegistrationEmailForm .loading-indicator\").hide();\n            btnRef.removeClass(\"disabled\").attr(\"disabled\", false);\n          });\n        });\n      },\n      initCommunicationSection: function initCommunicationSection() {\n        $(\"#communicationsContainer .tab-label\").on(\"click\", function () {\n          $(\"#communicationsContainer .tab-label\").removeClass(\"active\");\n          $(this).addClass(\"active\");\n        });\n        $(\"#emailBodyModal\").modal({\n          \"show\": false\n        });\n        var subjectId = this.subjectId,\n            self = this;\n        this.modules.tnthAjax.emailLog(subjectId, {\n          useWorker: true\n        }, function (data) {\n          setTimeout(function () {\n            self.getEmailLog(subjectId, data);\n          }, 100);\n        });\n      },\n      initResetPasswordSection: function initResetPasswordSection() {\n        var self = this;\n        $(\"#btnPasswordResetEmail\").on(\"click\", function (event) {\n          event.preventDefault();\n          event.stopImmediatePropagation(); //stop bubbling of events\n\n          var email = $(\"#email\").val();\n          self.modules.tnthAjax.passwordReset(self.subjectId, function (data) {\n            if (!data.error) {\n              $(\"#passwordResetMessage\").text(i18next.t(\"Password reset email sent to {email}\").replace(\"{email}\", email));\n            } else {\n              $(\"#passwordResetMessage\").text(i18next.t(\"Unable to send email.\"));\n            }\n          });\n        });\n      },\n      updateDeceasedSection: function updateDeceasedSection(targetField) {\n        var data = {},\n            isChecked = $(\"#boolDeath\").is(\":checked\");\n        var hasSuspendedConsent = $(\"#consentListTable .withdrawn-label\").length;\n        var confirmationRequired = isChecked && !hasSuspendedConsent && this.settings.LOCALIZED_AFFILIATE_ORG && this.topLevelOrgs.indexOf(this.settings.LOCALIZED_AFFILIATE_ORG) !== -1;\n        $(\"#deceasedInfo\").html(\"\");\n\n        if ($(\"#deathDate\").val()) {\n          data.deceasedDateTime = $(\"#deathDate\").val();\n        }\n\n        data.deceasedBoolean = isChecked;\n\n        if (!confirmationRequired) {\n          this.postDemoData(targetField, data);\n          return;\n        }\n\n        var self = this,\n            subjectId = this.subjectId;\n\n        var setDisabledFields = function setDisabledFields(disabledFlag) {\n          $(\"#boolDeath, #deathDate, #deathDay, #deathYear, #deathMonth\").attr(\"disabled\", disabledFlag);\n        };\n\n        var hidePopover = function hidePopover() {\n          $(\"#deceasedConsentPopover\").popover(\"hide\");\n        };\n\n        var showPopover = function showPopover() {\n          if (!$(\"#deceasedConsentPopover\").attr(\"aria-describedby\")) {\n            $(\"#deceasedConsentPopover\").popover(\"show\");\n          }\n        };\n\n        var clearFields = function clearFields() {\n          if (!self.demo.data.deceasedDateTime) {\n            $(\"#deathDate, #deathDay, #deathYear, #deathMonth\").val(\"\");\n          }\n\n          if (!(String(self.demo.data.deceasedBoolean).toLowerCase() === \"true\")) {\n            $(\"#boolDeath\").prop(\"checked\", false);\n          }\n\n          hidePopover();\n        };\n\n        showPopover();\n        $(\"#btnDeceasedConsentYes\").off(\"click\").on(\"click\", function (e) {\n          //selecting yes in the confirmation popover\n          e.stopPropagation();\n          setDisabledFields(true);\n          self.postDemoData(targetField, data, function (data) {\n            if (!data || data.error) {\n              setDisabledFields(false);\n              return false;\n            }\n\n            var orgTool = self.getOrgTool(),\n                selectedOrgElement = orgTool.getSelectedOrg();\n\n            if (!selectedOrgElement.length) {\n              //no need to continue if no affiliated org\n              setDisabledFields(false);\n              return;\n            }\n\n            self.modules.tnthAjax.withdrawConsent(subjectId, selectedOrgElement.val(), \"\", function (data) {\n              setDisabledFields(false);\n\n              if (data.error) {\n                $(\"#deceasedInfo\").html(i18next.t(\"Error occurred suspending consent for subject.\"));\n                return;\n              }\n\n              hidePopover();\n              self.reloadConsentList(subjectId);\n            });\n          });\n        });\n        $(\"#btnDeceasedConsentNo\").off(\"click\").on(\"click\", function (e) {\n          //selecting no in the confirmation popover\n          e.stopPropagation();\n          clearFields();\n        });\n        $(\"#profileDeceasedSection .profile-item-edit-btn\").on(\"click\", function (e) {\n          e.stopPropagation();\n          clearFields();\n        });\n      },\n      initDeceasedSection: function initDeceasedSection() {\n        var self = this;\n        $(\"#deathYear\").val(\"\");\n        $(\"#deathMonth\").val(\"\");\n        $(\"#deathDay\").val(\"\");\n        $(\"#deathDate\").val(\"\");\n        $(\"#boolDeath\").prop(\"checked\", false);\n\n        if (this.demo.data.deceasedDateTime) {\n          $(\"#deathYear\").val(this.demo.data.deceasedYear);\n          $(\"#deathMonth\").val(this.demo.data.deceasedMonth);\n          $(\"#deathDay\").val(this.demo.data.deceasedDay);\n          $(\"#deathDate\").val(this.demo.data.deceasedMonth + \"-\" + this.demo.data.deceasedDay + \"-\" + this.demo.data.deceasedYear);\n          $(\"#boolDeath\").prop(\"checked\", true);\n        }\n\n        if (String(this.demo.data.deceasedBoolean).toLowerCase() === \"true\") {\n          $(\"#boolDeath\").prop(\"checked\", true);\n        }\n\n        this.__convertToNumericField($(\"#deathDay, #deathYear\"));\n\n        $(\"#boolDeath\").on(\"click\", function () {\n          if (!$(this).is(\":checked\")) {\n            $(\"#deathYear\").val(\"\");\n            $(\"#deathDay\").val(\"\");\n            $(\"#deathMonth\").val(\"\");\n            $(\"#deathDate\").val(\"\");\n          }\n\n          self.updateDeceasedSection($(\"#boolDeathGroup\"));\n        });\n        [\"deathDay\", \"deathMonth\", \"deathYear\"].forEach(function (fn) {\n          var fd = $(\"#\" + fn);\n          var triggerEvent = fd.attr(\"type\") === \"text\" ? \"blur\" : \"change\";\n          fd.on(triggerEvent, function () {\n            var d = $(\"#deathDay\"),\n                m = $(\"#deathMonth\"),\n                y = $(\"#deathYear\");\n\n            if (d.val() && m.val() && y.val() && d.get(0).validity.valid && m.get(0).validity.valid && y.get(0).validity.valid) {\n              var errorMsg = self.modules.tnthDates.dateValidator(d.val(), m.val(), y.val(), true);\n\n              if (errorMsg === \"\") {\n                $(\"#deathDate\").val(y.val() + \"-\" + m.val() + \"-\" + d.val());\n                $(\"#boolDeath\").prop(\"checked\", true);\n                $(\"#errorDeathDate\").text(\"\");\n                self.updateDeceasedSection($(\"#deceasedDateContainer\"));\n              } else {\n                $(\"#errorDeathDate\").text(errorMsg);\n              }\n            }\n          });\n        });\n      },\n      initPatientReportSection: function initPatientReportSection() {\n        var self = this;\n        this.modules.tnthAjax.patientReport(self.subjectId, {\n          useWorker: true\n        }, function (data) {\n          if (!data.error) {\n            if (data.user_documents && data.user_documents.length > 0) {\n              var fData = [];\n              data.user_documents.forEach(function (item) {\n                item.filename = self.escapeHtml(item.filename);\n                item.document_type = self.escapeHtml(item.document_type);\n                item.uploaded_at = self.modules.tnthDates.formatDateString(item.uploaded_at, \"iso\");\n                item.actions = \"<a title=\\\"\".concat(i18next.t(\"Download\"), \"\\\" href=\\\"\").concat('/api/user/' + String(item.user_id) + '/user_documents/' + String(item.id), \"\\\"><i class=\\\"fa fa-download\\\"></i></a>\");\n                fData.push(item);\n              });\n              self.patientReport.data = fData;\n              $(\"#profilePatientReportTable\").bootstrapTable(self.setBootstrapTableConfig({\n                data: fData,\n                classes: \"table table-responsive profile-patient-reports\",\n                sortName: \"uploaded_at\",\n                sortOrder: \"desc\",\n                toolbar: \"#prTableToolBar\",\n                columns: [{\n                  field: \"contributor\",\n                  title: i18next.t(\"Type\"),\n                  searchable: true,\n                  sortable: true\n                }, {\n                  field: \"filename\",\n                  title: i18next.t(\"Report Name\"),\n                  searchable: true,\n                  sortable: true\n                }, {\n                  field: \"uploaded_at\",\n                  title: i18next.t(\"Generated (GMT)\"),\n                  sortable: true,\n                  searchable: true,\n                  width: \"20%\"\n                }, {\n                  field: \"document_type\",\n                  title: i18next.t(\"Document Type\"),\n                  sortable: true,\n                  visible: false\n                }, {\n                  field: \"actions\",\n                  title: i18next.t(\"Download\"),\n                  sortable: false,\n                  searchable: false,\n                  visible: true,\n                  class: \"text-center\"\n                }]\n              }));\n            } else {\n              $(\"#patientReportErrorMessage\").text(i18next.t(\"No reports available.\")).removeClass(\"error-message\");\n            }\n          } else {\n            $(\"#profilePatientReportTable\").closest(\"div.profile-item-container\").hide();\n            $(\"#patientReportErrorMessage\").text(i18next.t(\"Problem retrieving reports from server.\")).addClass(\"error-message\");\n          }\n        });\n      },\n      initAssessmentListSection: function initAssessmentListSection() {\n        var self = this;\n        $(\"#assessmentListMessage\").text(i18next.t(\"No questionnaire data found.\"));\n        self.modules.tnthAjax.assessmentList(self.subjectId, {\n          useWorker: true\n        }, function (data) {\n          if (data.error) {\n            self.assessment.assessmentListError = i18next.t(\"Problem retrieving session data from server.\");\n            return false;\n          }\n\n          self.assessment.assessmentListError = \"\";\n          var sessionUserId = $(\"#_session_user_id\").val();\n          var entries = data.entry ? data.entry : null;\n\n          if (!entries || entries.length === 0) {\n            return false;\n          }\n\n          entries.forEach(function (entry, index) {\n            var reference = entry.questionnaire.reference;\n            var arrRefs = String(reference).split(\"/\");\n            var instrumentId = arrRefs.length > 0 ? arrRefs[arrRefs.length - 1] : \"\";\n\n            if (!instrumentId) {\n              return false;\n            }\n\n            var authoredDate = String(entry.authored);\n            var reportLink = \"/patients/session-report/\" + sessionUserId + \"/\" + instrumentId + \"/\" + authoredDate;\n            self.assessment.assessmentListItems.push({\n              title: i18next.t(\"Click to view report\"),\n              link: reportLink,\n              display: i18next.t(entry.questionnaire.display),\n              status: i18next.t(entry.status),\n              class: index % 2 !== 0 ? \"class='odd'\" : \"class='even'\",\n              date: self.modules.tnthDates.formatDateString(entry.authored, \"iso\")\n            });\n          });\n        });\n      },\n      handleSelectedState: function handleSelectedState(event) {\n        var newValue = event.target.value;\n        this.orgsSelector.selectedState = newValue;\n      },\n      isAcceptOnNextOrg: function isAcceptOnNextOrg(orgName) {\n        if (!this.settings) {\n          return false;\n        }\n\n        return orgName === this.settings.ACCEPT_TERMS_ON_NEXT_ORG;\n      },\n      initOrgsStateSelectorSection: function initOrgsStateSelectorSection() {\n        var self = this,\n            orgTool = this.getOrgTool(),\n            subjectId = this.subjectId;\n        var stateDict = {\n          AL: i18next.t(\"Alabama\"),\n          AK: i18next.t(\"Alaska\"),\n          AS: i18next.t(\"American Samoa\"),\n          AZ: i18next.t(\"Arizona\"),\n          AR: i18next.t(\"Arkansas\"),\n          CA: i18next.t(\"California\"),\n          CO: i18next.t(\"Colorado\"),\n          CT: i18next.t(\"Connecticut\"),\n          DE: i18next.t(\"Delaware\"),\n          DC: i18next.t(\"District Of Columbia\"),\n          FM: i18next.t(\"Federated States Of Micronesia\"),\n          FL: i18next.t(\"Florida\"),\n          GA: i18next.t(\"Georgia\"),\n          GU: i18next.t(\"Guam\"),\n          HI: i18next.t(\"Hawaii\"),\n          ID: i18next.t(\"Idaho\"),\n          IL: i18next.t(\"Illinois\"),\n          IN: i18next.t(\"Indiana\"),\n          IA: i18next.t(\"Iowa\"),\n          KS: i18next.t(\"Kansas\"),\n          KY: i18next.t(\"Kentucky\"),\n          LA: i18next.t(\"Louisiana\"),\n          ME: i18next.t(\"Maine\"),\n          MH: i18next.t(\"Marshall Islands\"),\n          MD: i18next.t(\"Maryland\"),\n          MA: i18next.t(\"Massachusetts\"),\n          MI: i18next.t(\"Michigan\"),\n          MN: i18next.t(\"Minnesota\"),\n          MS: i18next.t(\"Mississippi\"),\n          MO: i18next.t(\"Missouri\"),\n          MT: i18next.t(\"Montana\"),\n          NE: i18next.t(\"Nebraska\"),\n          NV: i18next.t(\"Nevada\"),\n          NH: i18next.t(\"New Hampshire\"),\n          NJ: i18next.t(\"New Jersey\"),\n          NM: i18next.t(\"New Mexico\"),\n          NY: i18next.t(\"New York\"),\n          NC: i18next.t(\"North Carolina\"),\n          ND: i18next.t(\"North Dakota\"),\n          MP: i18next.t(\"Northern Mariana Islands\"),\n          OH: i18next.t(\"Ohio\"),\n          OK: i18next.t(\"Oklahoma\"),\n          OR: i18next.t(\"Oregon\"),\n          PW: i18next.t(\"Palau\"),\n          PA: i18next.t(\"Pennsylvania\"),\n          PR: i18next.t(\"Puerto Rico\"),\n          RI: i18next.t(\"Rhode Island\"),\n          SC: i18next.t(\"South Carolina\"),\n          SD: i18next.t(\"South Dakota\"),\n          TN: i18next.t(\"Tennessee\"),\n          TX: i18next.t(\"Texas\"),\n          UT: i18next.t(\"Utah\"),\n          VT: i18next.t(\"Vermont\"),\n          VI: i18next.t(\"Virgin Islands\"),\n          VA: i18next.t(\"Virginia\"),\n          WA: i18next.t(\"Washington\"),\n          WV: i18next.t(\"West Virginia\"),\n          WI: i18next.t(\"Wisconsin\"),\n          WY: i18next.t(\"Wyoming\")\n        };\n\n        var getParentState = function getParentState(o, states) {\n          if (!o) {\n            return \"\";\n          }\n\n          var s = \"\",\n              found = false;\n\n          for (var state in states) {\n            if (!found) {\n              states[state].forEach(function (i) {\n                if (String(i) === String(o)) {\n                  s = state;\n                  found = true;\n                }\n              });\n            }\n          }\n\n          return s;\n        };\n\n        $(\"#stateSelector\").on(\"change\", function () {\n          var selectedState = $(this).find(\"option:selected\");\n          var container = $(\"#\" + selectedState.val() + \"_container\");\n          var defaultPrompt = i18next.t(\"What is your main clinic for prostate cancer care\");\n          $(\"#userOrgsInfo\").hide();\n\n          if (selectedState.val() !== \"\") {\n            if (selectedState.val() === \"none\") {\n              $(\".state-container, .noOrg-container\").hide();\n              $(\".clinic-prompt\").text(\"\").hide();\n              $(\"#noOrgs\").prop(\"checked\", true).trigger(\"click\"); //send of ajax to update org to 0 here\n            } else {\n              if (container.length > 0) {\n                $(\".state-container\").hide();\n                $(\".clinic-prompt\").text(defaultPrompt + \" in \" + selectedState.text() + \"?\").show();\n                $(\".noOrg-container\").show();\n                $(\"#noOrgs\").prop(\"checked\", false);\n                container.show();\n              } else {\n                $(\".state-container, .clinic-prompt, .noOrg-container\").hide();\n                $(\"#userOrgsInfo\").show();\n              }\n            }\n          } else {\n            $(\".state-container, .noOrg-container\").hide();\n            $(\".clinic-prompt\").text(\"\").hide();\n          }\n        });\n        var orgsList = this.orgsList,\n            states = {},\n            contentHTML = \"\";\n        /**** draw state select element first to gather all states - assign orgs to each state in array ***/\n\n        self.orgsData.forEach(function (item) {\n          var __state = \"\";\n\n          if (!item.identifier) {\n            return false;\n          }\n\n          item.identifier.forEach(function (region) {\n            if (String(region.system) === String(self.modules.SYSTEM_IDENTIFIER_ENUM.practice_region) && region.value) {\n              __state = region.value.split(\":\")[1];\n              __state = region.value.split(\":\")[1];\n\n              if (!states.hasOwnProperty(__state)) {\n                states[__state] = [item.id];\n                $(\"#userOrgs .main-state-container\").prepend(\"<div id='\" + __state + \"_container' state='\" + __state + \"' class='state-container'></div>\");\n              } else {\n                states[__state].push(item.id);\n              }\n\n              if ($(\"#stateSelector option[value='\" + __state + \"']\").length === 0) {\n                $(\"#stateSelector\").append(\"<option value='\" + __state + \"'>\" + stateDict[__state] + \"</option>\");\n              }\n\n              orgsList[item.id].state = __state; //assign state for each item\n            }\n          });\n        });\n        /*\n         * If an organization is a top level org and has child orgs, we render legend for it.  This will prevent the organization from being selected by the user.\n         * Note: a hidden input field is rendered for the organization so it can still be referenced by the child orgs if necessary.\n         */\n\n        var parentOrgs = $.grep(this.orgsData, function (item) {\n          return parseInt(item.id) !== 0 && !item.partOf;\n        });\n        parentOrgs = parentOrgs.sort(function (a, b) {\n          //sort parent orgs so ones with children displayed first\n          var oo_1 = orgsList[a.id];\n          var oo_2 = orgsList[b.id];\n\n          if (oo_1 && oo_2) {\n            if (oo_1.children.length > 0 && oo_2.children.length > 0) {\n              if (a.name < b.name) {\n                return -1;\n              }\n\n              if (a.name > b.name) {\n                return 1;\n              }\n\n              return 0;\n            } else if (oo_1.children.length > 0 && oo_2.children.length === 0) {\n              return -1;\n            } else if (oo_2.children.length > 0 && oo_1.children.length === 0) {\n              return 1;\n            } else {\n              if (a.name < b.name) {\n                return -1;\n              }\n\n              if (a.name > b.name) {\n                return 1;\n              }\n\n              return 0;\n            }\n          } else {\n            return 0;\n          }\n        });\n        parentOrgs.forEach(function (item) {\n          var state = orgsList[item.id].state;\n\n          if ($(\"#\" + state + \"_container\").length > 0) {\n            var oo = orgsList[item.id];\n\n            if (!self.isAcceptOnNextOrg(item.name) && oo.children.length > 0) {\n              contentHTML = \"<legend orgId=\\\"\".concat(item.id, \"\\\">\").concat(i18next.t(item.name), \"</legend><input class=\\\"tnth-hide\\\" type=\\\"checkbox\\\" name=\\\"organization\\\" parent_org=\\\"true\\\" data-org-name=\\\"\").concat(item.name, \"\\\"  id=\\\"\").concat(item.id, \"_org\\\" value=\\\"\").concat(item.id, \"\\\" />\");\n            } else {\n              //also need to check for top level orgs that do not have children and render those\n              contentHTML = \"<div class=\\\"radio parent-singleton\\\"><label><input class=\\\"clinic\\\" type=\\\"radio\\\" id=\\\"\".concat(item.id, \"_org\\\" value=\\\"\").concat(item.id, \"\\\" state=\\\"\").concat(state, \"\\\" name=\\\"organization\\\" data-parent-name=\\\"\").concat(item.name, \"\\\" data-parent-id=\\\"\").concat(item.id, \"\\\">\").concat(i18next.t(item.name), \"</label></div>\");\n            }\n\n            $(\"#\" + state + \"_container\").append(contentHTML);\n          }\n        });\n        var childOrgs = $.grep(this.orgsData, function (item) {\n          //draw input element(s) that belongs to each state based on parent organization id\n          return parseInt(item.id) !== 0 && item.partOf;\n        });\n        childOrgs = childOrgs.sort(function (a, b) {\n          //// sort child clinics in alphabetical order\n          if (a.name < b.name) {\n            return 1;\n          }\n\n          if (a.name > b.name) {\n            return -1;\n          }\n\n          return 0;\n        });\n        childOrgs.forEach(function (item) {\n          var parentId = item.partOf.reference.split(\"/\")[2];\n\n          if (parentId) {\n            if (self.isAcceptOnNextOrg(orgTool.getOrgName(parentId))) {\n              return true;\n            }\n\n            var parentState = getParentState(parentId, states);\n            contentHTML = \"<div class=\\\"radio\\\"><label class=\\\"indent\\\"><input class=\\\"clinic\\\" type=\\\"radio\\\" id=\\\"\".concat(item.id, \"_org\\\" value=\\\"\").concat(item.id, \"\\\" state=\\\"\").concat(parentState, \"\\\" name=\\\"organization\\\" data-parent-name=\\\"\").concat(item.name, \"\\\" data-parent-id=\\\"\").concat(parentId, \"\\\">\").concat(i18next.t(item.name), \"</label></div>\");\n\n            if ($(\"#\" + parentState + \"_container legend[orgId='\" + parentId + \"']\").length > 0) {\n              $(\"#\" + parentState + \"_container legend[orgId='\" + parentId + \"']\").after(contentHTML);\n            } else {\n              $(\"#\" + parentState + \"_container\").append(contentHTML);\n            }\n          }\n        }); //var selectOptions = $(\"#stateSelector\").sortOptions();\n\n        var selectOptions = $(\"#stateSelector option\");\n\n        if (selectOptions.length > 0) {\n          var selectSortedOptions = $(\"#stateSelector\").sortOptions();\n\n          if (selectSortedOptions && selectSortedOptions.length > 0) {\n            $(\"#stateSelector\").empty().append(selectOptions).append(\"<option value=\\\"none\\\">\".concat(i18next.t(\"Other\"), \"</option>\")).prepend(\"<option value=\\\"\\\" selected>\".concat(i18next.t(\"Select\"), \"</option>\")).val(\"\");\n          }\n\n          $(\".state-container, .clinic-prompt\").hide();\n          setTimeout(function () {\n            //case of pre-selected clinic, need to check if any clinic has prechecked\n            var o = $(\"#userOrgs input[name='organization']:checked\");\n\n            if (o.length > 0 && parseInt(o.val()) !== 0) {\n              o.closest(\".state-container\").show();\n              $(\".clinic-prompt\").show();\n            }\n          }, 150);\n          $(\"#userOrgs input[name='organization']\").each(function () {\n            if (parseInt($(this).val()) !== 0) {\n              self.getDefaultModal(this);\n            }\n          });\n          orgTool.onLoaded(subjectId, false);\n          self.handleOrgsEvent();\n          self.setOrgsVis();\n        } else {\n          // if no states found, then need to draw the orgs UI\n          $(\"#userOrgs .selector-show\").hide();\n          orgTool.onLoaded(subjectId, true);\n          self.handleOrgsEvent();\n          self.setOrgsVis(function () {\n            orgTool.filterOrgs(orgTool.getHereBelowOrgs());\n            orgTool.morphPatientOrgs();\n            $(\".noOrg-container, .noOrg-container *\").show();\n          });\n        }\n\n        if ($(\"#mainDiv.profile\").length > 0) {\n          self.modules.tnthAjax.getConsent(subjectId, {\n            useWorker: true\n          }, function (data) {\n            self.getConsentList(data);\n          });\n        }\n\n        $(\"#clinics\").attr(\"loaded\", true);\n      },\n      initDefaultOrgsSection: function initDefaultOrgsSection() {\n        var subjectId = this.subjectId,\n            orgTool = this.getOrgTool(),\n            self = this;\n        orgTool.onLoaded(subjectId, true);\n        this.setOrgsVis(function () {\n          if (typeof leafOrgs !== \"undefined\" && leafOrgs) {\n            /*global leafOrgs*/\n            orgTool.filterOrgs(leafOrgs);\n          }\n\n          if ($(\"#requireMorph\").val()) {\n            orgTool.morphPatientOrgs();\n          }\n\n          self.handleOrgsEvent();\n          self.modules.tnthAjax.getConsent(subjectId, {\n            useWorker: true\n          }, function (data) {\n            self.getConsentList(data);\n          });\n          $(\"#clinics\").attr(\"loaded\", true);\n        });\n      },\n      setOrgsVis: function setOrgsVis(callback) {\n        callback = callback || function () {};\n\n        var data = this.demo.data ? this.demo.data : null;\n\n        if (!data || !data.careProvider) {\n          callback();\n          return false;\n        }\n\n        for (var i = 0; i < data.careProvider.length; i++) {\n          var val = data.careProvider[i];\n          var orgID = val.reference.split(\"/\").pop();\n\n          if (parseInt(orgID) === 0) {\n            $(\"#userOrgs #noOrgs\").prop(\"checked\", true);\n\n            if ($(\"#stateSelector\").length > 0) {\n              $(\"#stateSelector\").find(\"option[value='none']\").prop(\"selected\", true).val(\"none\");\n            }\n          } else {\n            var ckOrg = $(\"#userOrgs input.clinic[value=\" + orgID + \"]\");\n\n            if ($(\".state-container\").length > 0) {\n              if (ckOrg.length > 0) {\n                ckOrg.prop(\"checked\", true);\n                var state = ckOrg.attr(\"state\");\n\n                if (state) {\n                  $(\"#stateSelector\").find(\"option[value='\" + state + \"']\").prop(\"selected\", true).val(i18next.t(state));\n                }\n\n                $(\"#clinics .state-selector-container\").show();\n                $(\"#stateSelector\").trigger(\"change\");\n              }\n\n              $(\".noOrg-container\").show();\n            } else {\n              if (ckOrg.length > 0) {\n                ckOrg.prop(\"checked\", true);\n              } else {\n                var topLevelOrg = $(\"#fillOrgs\").find(\"legend[orgid='\" + orgID + \"']\");\n\n                if (topLevelOrg.length > 0) {\n                  topLevelOrg.attr(\"data-checked\", \"true\");\n                }\n              }\n            }\n          }\n        }\n\n        callback(data);\n      },\n      handleOrgsEvent: function handleOrgsEvent() {\n        var self = this,\n            orgTool = this.getOrgTool();\n        $(\"#userOrgs input[name='organization']\").each(function () {\n          $(this).attr(\"data-save-container-id\", \"userOrgs\");\n          $(this).on(\"click\", function () {\n            var userId = self.subjectId,\n                parentOrg = orgTool.getElementParentOrg(this);\n            var orgsElements = $(\"#userOrgs input[name='organization']\").not(\"[id='noOrgs']\");\n\n            if ($(this).prop(\"checked\")) {\n              if ($(this).attr(\"id\") !== \"noOrgs\") {\n                $(\"#noOrgs\").prop(\"checked\", false);\n              } else {\n                orgsElements.prop(\"checked\", false);\n              }\n            }\n\n            if (sessionStorage.getItem(\"noOrgModalViewed\")) {\n              sessionStorage.removeItem(\"noOrgModalViewed\");\n            }\n\n            $(\"#userOrgs .help-block\").removeClass(\"error-message\").text(\"\");\n\n            if ($(this).attr(\"id\") !== \"noOrgs\" && $(\"#fillOrgs\").attr(\"patient_view\")) {\n              if (self.modules.tnthAjax.hasConsent(userId, parentOrg)) {\n                self.updateOrgs($(\"#clinics\"), true);\n              } else {\n                var __modal = self.getConsentModal(parentOrg);\n\n                if (__modal && __modal.length > 0) {\n                  setTimeout(function () {\n                    __modal.modal(\"show\");\n                  }, 50);\n                } else {\n                  self.updateOrgs($(\"#clinics\"), true);\n                  setTimeout(function () {\n                    self.setDefaultConsent(userId, parentOrg);\n                  }, 500);\n                }\n              }\n            } else {\n              self.updateOrgs($(\"#clinics\"), true);\n              var thisElement = $(this);\n              setTimeout(function () {\n                self.handleConsent(thisElement);\n              }, 500);\n              self.reloadConsentList(userId);\n            }\n\n            self.handlePcaLocalized();\n\n            if ($(\"#locale\").length > 0) {\n              self.modules.tnthAjax.getLocale(userId);\n            }\n\n            if ($(\"#profileassessmentSendEmailContainer\").length > 0) {\n              setTimeout(function () {\n                self.reloadSendPatientEmailForm(self.subjectId);\n              }, 150);\n            }\n          });\n        });\n      },\n      getNoOrgDisplay: function getNoOrgDisplay() {\n        return \"<p class='text-muted'>\" + this.modules.i18next.t(\"No affiliated clinic\") + \"</p>\";\n      },\n      getOrgsDisplay: function getOrgsDisplay() {\n        if (!this.demo.data.careProvider || this.demo.data.careProvider.length === 0) {\n          return this.getNoOrgDisplay();\n        }\n        /* example return from api demographics: [{ display: Duke, reference: \"api/organization/1301\"}, {\"display\":\"Arvin George\",\"reference\":\"api/practitioner/1851648521?system=http://hl7.org/fhir/sid/us-npi\"}]\n         * NOTE: need to exclude displays other than organization */\n\n\n        var self = this;\n        var arrDisplay = this.demo.data.careProvider.map(function (item) {\n          if (String(item.reference) === \"api/organization/0\") {\n            //organization id = 0\n            return self.getNoOrgDisplay();\n          }\n\n          return item.reference.match(/^api\\/organization/gi) ? \"<p>\" + item.display + \"</p>\" : \"\";\n        });\n        return arrDisplay.join(\"\");\n      },\n      updateOrgs: function updateOrgs(targetField, sync) {\n        var demoArray = {\n          \"resourceType\": \"Patient\"\n        },\n            preselectClinic = $(\"#preselectClinic\").val(),\n            userId = this.subjectId;\n        var self = this;\n\n        if (preselectClinic) {\n          var parentOrg = $(\"#userOrgs input[name='organization'][value='\" + preselectClinic + \"']\").attr(\"data-parent-id\") || preselectClinic;\n\n          if (self.modules.tnthAjax.hasConsent(userId, parentOrg)) {\n            demoArray.careProvider = [{\n              reference: \"api/organization/\" + preselectClinic\n            }];\n          }\n        } else {\n          var orgIDs = $(\"#userOrgs input[name='organization']:checked\").map(function () {\n            return {\n              reference: \"api/organization/\" + $(this).val()\n            };\n          }).get();\n\n          if (orgIDs && orgIDs.length > 0) {\n            demoArray.careProvider = orgIDs;\n          }\n          /**** dealing with the scenario where user can be affiliated with top level org e.g. TrueNTH Global Registry, IRONMAN, via direct database addition **/\n\n\n          $(\"#fillOrgs legend[data-checked]\").each(function () {\n            var tOrg = $(this).attr(\"orgid\");\n\n            if (tOrg) {\n              demoArray.careProvider = demoArray.careProvider || [];\n              demoArray.careProvider.push({\n                reference: \"api/organization/\" + tOrg\n              });\n            }\n          });\n        }\n\n        if ($(\"#aboutForm\").length === 0 && !demoArray.careProvider) {\n          //don't update org to none if there are top level org affiliation above\n          demoArray.careProvider = [{\n            reference: \"api/organization/\" + 0\n          }];\n        }\n\n        this.modules.tnthAjax.putDemo(userId, demoArray, targetField, sync, this.setDemoData);\n      },\n      getConsentModal: function getConsentModal(parentOrg) {\n        var orgTool = this.getOrgTool();\n        parentOrg = parentOrg || orgTool.getElementParentOrg(orgTool.getSelectedOrg());\n\n        if (!parentOrg) {\n          return false;\n        }\n\n        var __modal = $(\"#\" + parentOrg + \"_consentModal\");\n\n        if (__modal.length > 0) {\n          return __modal;\n        } else {\n          var __defaultModal = this.getDefaultModal(orgTool.getSelectedOrg());\n\n          if (__defaultModal && __defaultModal.length > 0) {\n            return __defaultModal;\n          }\n        }\n\n        return false;\n      },\n      \"getDefaultAgreementUrl\": function getDefaultAgreementUrl(orgId) {\n        var stockConsentUrl = $(\"#stock_consent_url\").val(),\n            agreementUrl = \"\",\n            orgElement = $(\"#\" + orgId + \"_org\");\n\n        if (stockConsentUrl && orgElement.length > 0) {\n          var orgName = orgElement.attr(\"data-parent-name\") || orgElement.attr(\"data-org-name\");\n          agreementUrl = stockConsentUrl.replace(\"placeholder\", encodeURIComponent(orgName));\n        }\n\n        return agreementUrl;\n      },\n      \"setDefaultConsent\": function setDefaultConsent(userId, orgId) {\n        if (!userId) {\n          return false;\n        }\n\n        var agreementUrl = this.getDefaultAgreementUrl(orgId),\n            self = this;\n\n        if (!agreementUrl) {\n          $($(\"#consentContainer .error-message\").get(0)).text(i18next.t(\"Unable to set default consent agreement\"));\n          return false;\n        }\n\n        var params = self.modules.tnthAjax.consentParams;\n        params.org = orgId;\n        params.agreementUrl = agreementUrl;\n        self.modules.tnthAjax.setConsent(userId, params, \"default\");\n        setTimeout(function () {\n          //need to remove all other consents associated w un-selected org(s)\n          self.removeObsoleteConsent();\n        }, 100);\n        self.reloadConsentList(userId);\n        $($(\"#consentContainer .error-message\").get(0)).text(\"\");\n      },\n      removeObsoleteConsent: function removeObsoleteConsent() {\n        var userId = this.subjectId,\n            co = [],\n            OT = this.getOrgTool();\n        $(\"#userOrgs input[name='organization']\").each(function () {\n          if ($(this).is(\":checked\")) {\n            co.push($(this).val());\n            var po = OT.getElementParentOrg(this);\n\n            if (po) {\n              co.push(po);\n            }\n          }\n        });\n        this.modules.tnthAjax.deleteConsent(userId, {\n          org: \"all\",\n          exclude: co.join(\",\")\n        }); //exclude currently selected orgs\n      },\n      \"handleConsent\": function handleConsent(obj) {\n        var self = this,\n            OT = this.getOrgTool(),\n            userId = this.subjectId,\n            cto = this.isConsentWithTopLevelOrg(),\n            tnthAjax = self.modules.tnthAjax;\n        $(obj).each(function () {\n          var parentOrg = OT.getElementParentOrg(this),\n              orgId = $(this).val();\n\n          if ($(this).prop(\"checked\")) {\n            if ($(this).attr(\"id\") !== \"noOrgs\") {\n              var agreementUrl = $(\"#\" + parentOrg + \"_agreement_url\").val();\n\n              if (String(agreementUrl) !== \"\") {\n                var params = self.CONSENT_ENUM.consented;\n                params.org = cto ? parentOrg : orgId;\n                params.agreementUrl = agreementUrl;\n                setTimeout(function () {\n                  tnthAjax.setConsent(userId, params, \"all\", true, function () {\n                    self.removeObsoleteConsent();\n                  });\n                }, 350);\n              } else {\n                self.setDefaultConsent(userId, parentOrg);\n              }\n            } else {\n              //remove all valid consent if no org is selected\n              setTimeout(function () {\n                tnthAjax.deleteConsent(userId, {\n                  \"org\": \"all\"\n                });\n              }, 350);\n            }\n          } else {\n            if (cto) {\n              var childOrgs = $(\"#userOrgs input[data-parent-id='\" + parentOrg + \"']\");\n\n              if ($(\"#fillOrgs\").attr(\"patient_view\")) {\n                childOrgs = $(\"#userOrgs div.org-container[data-parent-id='\" + parentOrg + \"']\").find(\"input[name='organization']\");\n              }\n\n              var allUnchecked = !childOrgs.is(\":checked\");\n\n              if (allUnchecked) {\n                setTimeout(function () {\n                  tnthAjax.deleteConsent(userId, {\n                    \"org\": parentOrg\n                  });\n                }, 350);\n              }\n            } else {\n              setTimeout(function () {\n                tnthAjax.deleteConsent(userId, {\n                  \"org\": orgId\n                });\n              }, 350);\n            }\n          }\n        });\n      },\n      getDefaultModal: function getDefaultModal(o) {\n        if (!o) {\n          return false;\n        }\n\n        var orgTool = this.getOrgTool();\n        var orgId = orgTool.getElementParentOrg(o),\n            orgModalId = orgId + \"_defaultConsentModal\",\n            orgElement = $(\"#\" + orgModalId);\n\n        if (orgElement.length > 0) {\n          return orgElement;\n        }\n\n        var orgsList = orgTool.getOrgsList(),\n            orgItem = orgsList.hasOwnProperty(orgId) ? orgsList[orgId] : null,\n            orgName = orgItem && orgItem.shortname ? orgItem.shortname : $(o).attr(\"data-parent-name\") || $(o).closest(\"label\").text();\n        var title = i18next.t(\"Consent to share information\");\n        var consentText = i18next.t(\"I consent to sharing information with <span class='consent-clinic-name'>{orgName}</span>.\".replace(\"{orgName}\", orgName));\n        var orgModalElement = $(\"#defaultConsentModal\").clone(true);\n        var tempHTML = orgModalElement.html();\n        tempHTML = tempHTML.replace(/\\{orgId\\}/g, orgId).replace(/\\{close\\}/g, i18next.t(\"Close\")).replace(/\\{yes\\}/g, i18next.t(\"Yes\")).replace(/\\{no\\}/g, i18next.t(\"No\")).replace(/\\{title\\}/g, title).replace(/\\{consentText\\}/g, consentText);\n        orgModalElement.html(tempHTML);\n        orgModalElement.attr(\"id\", orgModalId);\n        $(\"#defaultConsentContainer\").append(orgModalElement);\n        return orgElement;\n      },\n      initConsentSection: function initConsentSection() {\n        var __self = this,\n            orgTool = this.getOrgTool(),\n            modalElements = $(\"#consentContainer .modal, #defaultConsentContainer .modal\");\n\n        var closeButtons = modalElements.find(\"button.btn-consent-close, button[data-dismiss]\");\n        $(\"#consentHistoryModal\").modal({\n          \"show\": false\n        });\n        modalElements.each(function () {\n          var agreemntUrl = $(this).find(\".agreement-url\").val();\n\n          if (/stock\\-org\\-consent/.test(agreemntUrl)) {\n            $(this).find(\".terms-wrapper\").hide();\n          }\n        });\n        modalElements.find(\"input[name='toConsent']\").off(\"click\").on(\"click\", function (e) {\n          e.stopPropagation();\n          closeButtons.attr(\"disabled\", true);\n          var orgId = $(this).attr(\"data-org\"),\n              userId = __self.subjectId;\n\n          var postUpdate = function postUpdate(orgId, errorMessage) {\n            if (errorMessage) {\n              $(\"#\" + orgId + \"_consentAgreementMessage\").html(errorMessage);\n            } else {\n              $(\"#\" + orgId + \"_consentAgreementMessage\").html(\"\");\n              setTimeout(function () {\n                modalElements.modal(\"hide\");\n\n                __self.removeObsoleteConsent();\n              }, 250);\n              setTimeout(function () {\n                __self.reloadConsentList(userId);\n              }, 500);\n            }\n\n            $(\"#\" + orgId + \"_loader.loading-message-indicator\").hide();\n            closeButtons.attr(\"disabled\", false);\n          };\n\n          $(\"#\" + orgId + \"_loader.loading-message-indicator\").show();\n\n          if ($(this).val() === \"yes\") {\n            var params = __self.CONSENT_ENUM.consented;\n            params.org = orgId;\n            params.agreementUrl = $(\"#\" + orgId + \"_agreement_url\").val() || __self.getDefaultAgreementUrl(orgId);\n            setTimeout(function () {\n              __self.modules.tnthAjax.setConsent(userId, params, \"\", false, function (data) {\n                postUpdate(orgId, data.error);\n              });\n            }, 50);\n          } else {\n            __self.modules.tnthAjax.deleteConsent(userId, {\n              \"org\": orgId\n            });\n\n            postUpdate(orgId);\n          }\n        });\n        closeButtons.off(\"click\").on(\"click\", function (e) {\n          e.preventDefault();\n          e.stopPropagation();\n          setTimeout(function () {\n            location.reload();\n          }, 10);\n        });\n        modalElements.each(function () {\n          $(this).on(\"hidden.bs.modal\", function () {\n            if ($(this).find(\"input[name='toConsent']:checked\").length > 0) {\n              $(\"#userOrgs input[name='organization']\").each(function () {\n                $(this).removeAttr(\"data-require-validate\");\n              });\n\n              __self.updateOrgs($(\"#clinics\"), true);\n            }\n          });\n          $(this).on(\"show.bs.modal\", function () {\n            var checkedOrg = $(\"#userOrgs input[name='organization']:checked\");\n            var shortName = checkedOrg.attr(\"data-short-name\") || checkedOrg.attr(\"data-org-name\");\n\n            if (!shortName) {\n              shortName = orgTool.getShortName(checkedOrg.val());\n            }\n\n            if (shortName) {\n              $(this).find(\".consent-clinic-name\").text(i18next.t(shortName));\n            }\n\n            $(\"#consentContainer input[name='toConsent']\").each(function () {\n              $(this).prop(\"checked\", false);\n            });\n            var o = $(this);\n            $(this).find(\"button.btn-consent-close, button[data-dismiss]\").attr(\"disabled\", false).show();\n            $(this).find(\".content-loading-message-indicator\").fadeOut(50, function () {\n              o.find(\".main-content\").removeClass(\"tnth-hide\");\n            });\n          });\n        });\n      },\n      handlePcaLocalized: function handlePcaLocalized() {\n        if (!this.subjectId || !this.isSubjectPatient()) {\n          return false;\n        }\n\n        var parentOrg = this.orgTool.getSelectedOrgTopLevelParentOrg();\n\n        if (!this.settings.LOCALIZED_AFFILIATE_ORG) {\n          return false; //don't set at all if config is not present, i.e. Truenth does not have this config\n        }\n\n        this.modules.tnthAjax.postClinical(this.subjectId, \"pca_localized\", this.isLocalizedAffiliatedOrg());\n      },\n      isLocalizedAffiliatedOrg: function isLocalizedAffiliatedOrg() {\n        var parentOrg = this.orgTool.getSelectedOrgTopLevelParentOrg();\n\n        if (!parentOrg) {\n          return false;\n        }\n\n        return this.orgTool.getOrgName(parentOrg) === this.settings.LOCALIZED_AFFILIATE_ORG;\n      },\n      onBeforeInitClinicalQuestionsSection: function onBeforeInitClinicalQuestionsSection() {\n        if (this.mode !== \"profile\") {\n          return false;\n        }\n\n        if (!this.isProxy()) {\n          $(\"#clinicalQuestionsContainer .profile-item-edit-btn\").removeClass(\"tnth-hide\");\n        }\n\n        $(\"#patientQ\").show();\n        $(\"#patTx\").remove(); //don't show treatment\n\n        $(\"#patientQ hr\").hide();\n        $(\".pat-q input:radio\").off(\"click\").on(\"click\", function () {\n          var thisItem = $(this),\n              toCall = thisItem.attr(\"name\"),\n              toSend = thisItem.val(); // Get value from div - either true or false\n\n          if (String(toSend) === \"true\" || String(toCall) === \"pca_localized\") {\n            thisItem.parents(\".pat-q\").nextAll().fadeIn();\n          } else {\n            thisItem.parents(\".pat-q\").nextAll().fadeOut();\n          }\n        });\n        var diag = $(\"#pca_diag_yes\");\n\n        if (diag.is(\":checked\")) {\n          diag.parents(\".pat-q\").nextAll().fadeIn();\n        } else {\n          diag.parents(\".pat-q\").nextAll().fadeOut();\n        }\n\n        this.fillSectionView(\"clinical\");\n      },\n      initClinicalQuestionsSection: function initClinicalQuestionsSection() {\n        if (!this.subjectId) {\n          return false;\n        }\n\n        var self = this;\n        _modules_ClinicalQuestions_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].update(this.subjectId, function () {\n          self.onBeforeInitClinicalQuestionsSection();\n          _modules_ClinicalQuestions_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].initFieldEvents(self.subjectId);\n        });\n      },\n      initProcedureSection: function initProcedureSection() {\n        _modules_Procedures_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].initViaTemplate();\n      },\n      manualEntryModalVis: function manualEntryModalVis(hide) {\n        if (hide) {\n          this.manualEntry.loading = true;\n        } else {\n          this.manualEntry.loading = false;\n        }\n      },\n      continueToAssessment: function continueToAssessment(method, completionDate, assessment_url) {\n        if (!assessment_url) {\n          this.manualEntry.errorMessage = i18next.t(\"The user does not have a valid assessment link.\");\n          return false;\n        }\n\n        var self = this,\n            still_needed = false,\n            subjectId = this.subjectId;\n        this.modules.tnthAjax.getStillNeededCoreData(subjectId, true, function (data) {\n          still_needed = data && data.still_needed && data.still_needed.length;\n        }, method);\n\n        if (/\\?/.test(assessment_url)) {\n          //passing additional query params\n          assessment_url += \"&entry_method=\" + method;\n        } else {\n          assessment_url += \"?entry_method=\" + method;\n        }\n\n        if (method === \"paper\") {\n          assessment_url += \"&authored=\" + completionDate;\n        }\n\n        var winLocation = assessment_url;\n\n        if (still_needed) {\n          winLocation = \"/website-consent-script/\" + $(\"#manualEntrySubjectId\").val() + \"?entry_method=\" + method + \"&subject_id=\" + $(\"#manualEntrySubjectId\").val() + \"&redirect_url=\" + encodeURIComponent(assessment_url);\n        }\n\n        this.manualEntryModalVis(true);\n        window.location = winLocation;\n        setTimeout(function (callback) {\n          callback = callback || function () {};\n\n          if (callback) {\n            callback();\n          }\n        }, 1000, self.manualEntryModalVis);\n      },\n      initCustomPatientDetailSection: function initCustomPatientDetailSection() {\n        var subjectId = this.subjectId,\n            self = this;\n        $(window).on(\"beforeunload\", function () {\n          //fix for safari\n          if (navigator.userAgent.indexOf(\"Safari\") !== -1 && navigator.userAgent.indexOf(\"Chrome\") === -1) {\n            self.manualEntry.loading = false;\n            $(\"#manualEntryModal\").modal(\"hide\");\n          }\n        });\n        $(\"#manualEntryModal\").on(\"show.bs.modal\", function () {\n          self.manualEntry.initloading = true;\n        });\n        $(\"#manualEntryModal\").on(\"shown.bs.modal\", function () {\n          self.manualEntry.errorMessage = \"\";\n          self.manualEntry.method = \"\";\n          self.manualEntry.todayObj = self.modules.tnthDates.getTodayDateObj(); //get GMT date/time for today\n\n          self.manualEntry.completionDate = self.manualEntry.todayObj.gmtDate;\n          self.modules.tnthAjax.getConsent(subjectId, {\n            sync: true\n          }, function (data) {\n            //get consent date\n            var dataArray = [];\n\n            if (!data || !data.consent_agreements || data.consent_agreements.length === 0) {\n              return false;\n            }\n\n            dataArray = data.consent_agreements.sort(function (a, b) {\n              return new Date(b.acceptance_date) - new Date(a.acceptance_date);\n            });\n            var items = $.grep(dataArray, function (item) {\n              //filtered out non-deleted items from all consents\n              return !item.deleted && String(item.status) === \"consented\";\n            });\n\n            if (items.length > 0) {\n              //consent date in GMT\n              self.manualEntry.consentDate = items[0].acceptance_date;\n            }\n          });\n          setTimeout(function () {\n            self.manualEntry.initloading = false;\n          }, 10);\n        });\n        $(\"input[name='entryMethod']\").on(\"click\", function () {\n          self.manualEntry.errorMessage = \"\";\n          self.manualEntry.method = $(this).val();\n\n          if ($(this).val() === \"interview_assisted\") {\n            self.manualEntry.todayObj = self.modules.tnthDates.getTodayDateObj(); //if method is interview assisted, reset completion date to GMT date/time for today\n\n            self.manualEntry.completionDate = self.manualEntry.todayObj.gmtDate;\n          }\n        });\n\n        self.__convertToNumericField($(\"#qCompletionDay, #qCompletionYear\"));\n\n        [\"qCompletionDay\", \"qCompletionMonth\", \"qCompletionYear\"].forEach(function (fn) {\n          var fd = $(\"#\" + fn),\n              tnthDates = self.modules.tnthDates;\n          fd.on(\"change\", function () {\n            var d = $(\"#qCompletionDay\");\n            var m = $(\"#qCompletionMonth\");\n            var y = $(\"#qCompletionYear\");\n            var todayObj = tnthDates.getTodayDateObj();\n            var td = todayObj.displayDay,\n                tm = todayObj.displayMonth,\n                ty = todayObj.displayYear;\n            var isValid = d.val() !== \"\" && m.val() !== \"\" && y.val() !== \"\" && d.get(0).validity.valid && m.get(0).validity.valid && y.get(0).validity.valid;\n\n            if (!isValid) {\n              $(\"#meSubmit\").attr(\"disabled\", true);\n            }\n\n            if (isValid) {\n              var errorMsg = tnthDates.dateValidator(d.val(), m.val(), y.val());\n              var consentDate = $(\"#manualEntryConsentDate\").val();\n\n              if (errorMsg || !consentDate) {\n                self.manualEntry.errorMessage = i18next.t(\"All date fields are required\");\n                return false;\n              }\n\n              var gmtDateObj = tnthDates.getDateObj(y.val(), m.val(), d.val(), 12, 0, 0); //noon UTC date\n\n              self.manualEntry.completionDate = self.modules.tnthDates.getDateWithTimeZone(gmtDateObj); //time zone based on user's\n              //all date/time should be in GMT date/time\n\n              var completionDate = new Date(self.manualEntry.completionDate);\n              var cConsentDate = new Date(self.manualEntry.consentDate);\n              var cToday = new Date(self.manualEntry.todayObj.gmtDate);\n              var nCompletionDate = completionDate.setHours(0, 0, 0, 0);\n              var nConsentDate = cConsentDate.setHours(0, 0, 0, 0);\n              var nToday = cToday.setHours(0, 0, 0, 0);\n\n              if (nCompletionDate < nConsentDate) {\n                errorMsg = i18next.t(\"Completion date cannot be before consent date.\");\n              }\n\n              if (nConsentDate >= nToday) {\n                if (nCompletionDate > nConsentDate) {\n                  errorMsg = i18next.t(\"Completion date cannot be in the future.\");\n                }\n              } else {\n                if (nCompletionDate > nToday) {\n                  errorMsg = i18next.t(\"Completion date cannot be in the future.\");\n                }\n              }\n\n              self.manualEntry.errorMessage = errorMsg;\n            }\n          });\n        });\n        $(document).delegate(\"#meSubmit\", \"click\", function () {\n          var method = String(self.manualEntry.method),\n              completionDate = self.modules.tnthDates.formatDateString(self.manualEntry.completionDate, \"system\"); //note completion date has both date and time info\n\n          var linkUrl = \"/api/present-needed?subject_id=\" + $(\"#manualEntrySubjectId\").val();\n\n          if (method === \"\") {\n            return false;\n          }\n\n          if (method !== \"paper\") {\n            self.continueToAssessment(method, completionDate, linkUrl);\n            return false;\n          }\n\n          self.manualEntryModalVis(true);\n          self.modules.tnthAjax.getCurrentQB(subjectId, completionDate, null, function (data) {\n            if (data.error) {\n              self.manualEntry.errorMessage = i18next.t(\"Server error occurred checking questionnaire window\");\n              self.manualEntryModalVis();\n              return false;\n            } //check questionnaire time windows\n\n\n            if (!(data.questionnaire_bank && Object.keys(data.questionnaire_bank).length > 0)) {\n              self.manualEntry.errorMessage = i18next.t(\"Invalid completion date. Date of completion is outside the days allowed.\");\n              self.manualEntryModalVis();\n            } else {\n              self.manualEntry.errorMessage = \"\";\n              self.continueToAssessment(method, completionDate, linkUrl);\n            }\n          });\n        });\n        self.modules.tnthAjax.assessmentStatus(subjectId, function (data) {\n          if (!data.error && data.assessment_status.toUpperCase() === \"COMPLETED\" && parseInt(data.outstanding_indefinite_work) === 0) {\n            $(\"#assessmentLink\").attr(\"disabled\", true);\n            $(\"#enterManualInfoContainer\").text(i18next.t(\"All available questionnaires have been completed.\"));\n          }\n        });\n      },\n      updateRolesData: function updateRolesData(event) {\n        var roles = $(\"#rolesGroup input:checkbox:checked\").map(function () {\n          return {\n            name: $(this).val()\n          };\n        }).get();\n        this.modules.tnthAjax.putRoles(this.subjectId, {\n          \"roles\": roles\n        }, $(event.target));\n      },\n      initUserRoles: function initUserRoles(params) {\n        if (!this.subjectId) {\n          return false;\n        }\n\n        var self = this;\n        this.modules.tnthAjax.getRoles(this.subjectId, function (data) {\n          if (data.roles) {\n            self.userRoles = data.roles.map(function (role) {\n              return role.name;\n            });\n          }\n        }, params);\n      },\n      initRolesListSection: function initRolesListSection() {\n        var self = this;\n        this.modules.tnthAjax.getRoleList({\n          useWorker: true\n        }, function (data) {\n          if (!data.roles) {\n            return false;\n          }\n\n          self.roles.data = data.roles;\n        });\n        self.initUserRoles();\n      },\n      initAuditLogSection: function initAuditLogSection() {\n        var self = this;\n        this.modules.tnthAjax.auditLog(this.subjectId, {\n          useWorker: true\n        }, function (data) {\n          if (data.error) {\n            $(\"#profileAuditLogErrorMessage\").text(i18next.t(\"Problem retrieving audit log from server.\"));\n            return false;\n          }\n\n          if (!data.audits || data.audits.length === 0) {\n            $(\"#profileAuditLogErrorMessage\").text(i18next.t(\"No audit log item found.\"));\n            return false;\n          }\n\n          var ww = $(window).width(),\n              fData = [],\n              len = ww < 650 ? 20 : ww < 800 ? 40 : 80;\n          data.audits.forEach(function (item) {\n            item.by = item.by.reference || \"-\";\n            var r = /\\d+/g;\n            var m = r.exec(String(item.by));\n\n            if (m) {\n              item.by = m[0];\n            }\n\n            item.lastUpdated = self.modules.tnthDates.formatDateString(item.lastUpdated, \"iso\");\n            item.comment = item.comment ? self.escapeHtml(item.comment) : \"\";\n            var c = String(item.comment);\n            item.comment = c.length > len ? c.substring(0, len + 1) + \"<span class='second hide'>\" + c.substr(len + 1) + \"</span><br/><sub onclick='{showText}' class='pointer text-muted'>\" + i18next.t(\"More...\") + \"</sub>\" : item.comment;\n            item.comment = item.comment.replace(\"{showText}\", \"(function (obj) {\" + \"if (obj) {\" + 'var f = $(obj).parent().find(\".second\"); ' + 'f.toggleClass(\"hide\"); ' + '$(obj).text($(obj).text() === i18next.t(\"More...\") ? i18next.t(\"Less...\"): i18next.t(\"More...\")); ' + \"}  \" + \"})(this) \");\n            fData.push(item);\n          });\n          $(\"#profileAuditLogTable\").bootstrapTable(self.setBootstrapTableConfig({\n            data: fData,\n            classes: \"table table-responsive profile-audit-log\",\n            sortName: \"lastUpdated\",\n            sortOrder: \"desc\",\n            toolbar: \"#auditTableToolBar\",\n            columns: [{\n              field: \"by\",\n              title: i18next.t(\"User\"),\n              width: \"5%\",\n              sortable: true,\n              searchable: true\n            }, {\n              field: \"comment\",\n              title: i18next.t(\"Comment\"),\n              searchable: true,\n              sortable: true\n            }, {\n              field: \"lastUpdated\",\n              title: i18next.t(\"Date/Time <span class='gmt'>{gmt}</span>\").replace(\"{gmt}\", \"(GMT), Y-M-D\"),\n              sortable: true,\n              searchable: true,\n              width: \"20%\"\n            }, {\n              field: \"version\",\n              title: i18next.t(\"Version\"),\n              sortable: true,\n              visible: false\n            }]\n          }));\n        });\n      },\n      getConsentHeaderRow: function getConsentHeaderRow(header) {\n        var content = \"\",\n            h = header || this.consent.consentHeaderArray;\n        h.forEach(function (title) {\n          if (String(title) !== \"n/a\") {\n            content += \"<TH class='consentlist-header'>\" + title + \"</TH>\";\n          }\n        });\n        return content;\n      },\n      getConsentEditDisplayIconHTML: function getConsentEditDisplayIconHTML() {\n        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        var targetElementId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n        return \"&nbsp;&nbsp;<a data-toggle=\\\"modal\\\" data-target=\\\"#\".concat(targetElementId, \"\\\" data-orgId=\\\"\").concat(item.organization_id, \"\\\" data-agreementUrl=\\\"\").concat(item.agreement_url, \"\\\" data-userId=\\\"\").concat(this.subjectId, \"\\\" data-status=\\\"\").concat(this.getConsentStatusHTMLObj(item).statusText, \"\\\" data-signed-date=\\\"\").concat(this.modules.tnthDates.formatDateString(item.acceptance_date, \"system\"), \"\\\"><span class=\\\"glyphicon glyphicon-pencil edit-icon\\\" aria-hidden=\\\"true\\\"></span></a>\");\n      },\n      getLREditIconHTML: function getLREditIconHTML(item) {\n        var LROrgId = this.getOrgTool().getTopLevelParentOrg(item.organization_id);\n        var editorUrlEl = $(\"#\" + LROrgId + \"_editor_url\");\n\n        if (!editorUrlEl.val()) {\n          return \"\";\n        }\n\n        var dataShow = String(editorUrlEl.attr(\"data-show\")) === \"true\";\n        return \"<div class=\\\"button--LR\\\" data-show=\\\"\".concat(dataShow, \"\\\"><a href=\\\"\").concat(editorUrlEl.val(), \"\\\" target=\\\"_blank\\\">\").concat(i18next.t(\"Edit in Liferay\"), \"</a></div>\");\n      },\n      isConsentStatusEditable: function isConsentStatusEditable(item) {\n        return this.isConsentEditable() && String(this.getConsentStatus(item)) === \"active\";\n      },\n      isConsentDateEditable: function isConsentDateEditable(item) {\n        //consent date is editable only if the field is not disabled (e.g. as related to MedidataRave), consent is editable (e.g., Eproms), current user is a staff and subject is a patient\n        return this.isTestEnvironment() && !this.isSubjectPatient() || this.isConsentStatusEditable(item) && this.isSubjectPatient() && this.isStaff();\n      },\n      getConsentRow: function getConsentRow(item) {\n        if (!item) {\n          return false;\n        }\n\n        var self = this,\n            sDisplay = self.getConsentStatusHTMLObj(item).statusHTML;\n        var contentArray = [{\n          content: self.getConsentOrgDisplayName(item)\n        }, {\n          content: sDisplay + (self.isConsentStatusEditable(item) ? self.getConsentEditDisplayIconHTML(item, \"profileConsentListModal\") : \"\"),\n          \"_class\": \"indent\"\n        }, {\n          content: function (item) {\n            var viewLinkHTML = \"<span class=\\\"agreement\\\">&nbsp;&nbsp;<a href=\\\"\".concat(decodeURIComponent(item.agreement_url), \"\\\" target=\\\"_blank\\\"><em>\").concat(i18next.t(\"View\"), \"</em></a></span>\");\n            var s = viewLinkHTML + self.getLREditIconHTML(item);\n\n            if (self.isDefaultConsent(item)) {\n              s = i18next.t(\"Sharing information with clinics\") + viewLinkHTML;\n            }\n\n            return s;\n          }(item)\n        }, {\n          content: self.modules.tnthDates.formatDateString(item.acceptance_date) + (self.isConsentDateEditable(item) ? self.getConsentEditDisplayIconHTML(item, \"consentDateModal\") : \"\")\n        }];\n        this.consent.consentDisplayRows.push(contentArray);\n      },\n      getConsentHistoryRow: function getConsentHistoryRow(item) {\n        var self = this,\n            sDisplay = self.getConsentStatusHTMLObj(item).statusHTML;\n        var content = \"<tr \".concat(item.deleted ? \"class='history'\" : \"\", \">\");\n        var contentArray = [{\n          content: \"\".concat(self.getConsentOrgDisplayName(item), \"<div class=\\\"smaller-text text-muted\\\">\").concat(this.orgTool.getOrgName(item.organization_id), \"</div>\")\n        }, {\n          content: sDisplay\n        }, {\n          content: self.modules.tnthDates.formatDateString(item.acceptance_date)\n        }, {\n          content: \"<span class=\\\"text-danger\\\">\".concat(self.getRecordedDisplayDate(item) || '<span class=\"text-muted\">--</span>', \"</span>\")\n        }, {\n          content: item.recorded && item.recorded.by && item.recorded.by.display ? item.recorded.by.display : \"<span class='text-muted'>--</span>\"\n        }];\n        contentArray.forEach(function (cell) {\n          content += \"<td class=\\\"consentlist-cell\\\">\".concat(cell.content, \"</td>\");\n        });\n        content += \"</tr>\";\n        return content;\n      },\n      getConsentOrgDisplayName: function getConsentOrgDisplayName(item) {\n        if (!item) {\n          return \"\";\n        }\n\n        var orgId = item.organization_id,\n            OT = this.getOrgTool(),\n            currentOrg = OT.orgsList[orgId],\n            orgName = currentOrg ? currentOrg.name : item.organization_id;\n\n        if (!this.isConsentWithTopLevelOrg()) {\n          var topOrgID = OT.getTopLevelParentOrg(orgId),\n              topOrg = OT.orgsList[topOrgID];\n\n          if (topOrg && topOrg.name) {\n            orgName = topOrg.name;\n          }\n        }\n\n        return orgName;\n      },\n      getConsentStatus: function getConsentStatus(item) {\n        item = item || {};\n\n        if (item.deleted || String(item.status) === \"deleted\") {\n          return \"deleted\";\n        }\n\n        if (item.expired && this.modules.tnthDates.getDateDiff(String(item.expires)) > 0) {\n          return \"expired\";\n        }\n\n        return \"active\";\n      },\n      getRecordedDisplayDate: function getRecordedDisplayDate(item) {\n        if (!item) {\n          return \"\";\n        }\n\n        var recordedDate = item.recorded ? item.recorded.lastUpdated : \"\";\n        return this.modules.tnthDates.formatDateString(recordedDate, \"yyyy-mm-dd hh:mm:ss\");\n      },\n      isDefaultConsent: function isDefaultConsent(item) {\n        return item && /stock\\-org\\-consent/.test(item.agreement_url);\n      },\n      getConsentStatusHTMLObj: function getConsentStatusHTMLObj(item) {\n        var consentStatus = this.getConsentStatus(item),\n            sDisplay = \"\",\n            cflag = \"\";\n        var se = item.staff_editable,\n            sr = item.send_reminders,\n            ir = item.include_in_reports;\n        var consentLabels = this.consent.consentLabels;\n        var oDisplayText = {\n          \"default\": \"<span class='text-success small-text'>\".concat(consentLabels.default, \"</span>\"),\n          \"consented\": \"<span class='text-success small-text'>\".concat(consentLabels.consented, \"</span>\"),\n          \"withdrawn\": \"<span class='text-warning small-text withdrawn-label'>\".concat(consentLabels.withdrawn, \"</span>\"),\n          \"deleted\": \"<span class='text-danger small-text'>\".concat(consentLabels.deleted, \"</span>\"),\n          \"purged\": \"<span class='text-danger small-text'>\".concat(consentLabels.purged, \"</span>\"),\n          \"expired\": \"<span class='text-warning'>&#10007; <br><span>(\".concat(i18next.t(\"expired\"), \"</span>\")\n        };\n\n        switch (consentStatus) {\n          case \"deleted\":\n            if (se && sr && ir) {\n              sDisplay = oDisplayText.consented;\n            } else if (se && ir && !sr || !se && ir && !sr) {\n              sDisplay = oDisplayText.withdrawn;\n            } else if (!se && !ir && !sr) {\n              sDisplay = oDisplayText.purged;\n            } else {\n              sDisplay = oDisplayText.consented;\n            }\n\n            if (String(item.status) === \"deleted\") {\n              sDisplay += \"<span class=\\\"text-danger\\\"> (</span>\".concat(oDisplayText.deleted, \"<span class=\\\"text-danger\\\">)</span>\");\n            }\n\n            break;\n\n          case \"expired\":\n            sDisplay = oDisplayText.expired;\n            break;\n\n          case \"active\":\n            switch (item.status) {\n              case \"consented\":\n                if (this.isDefaultConsent(item)) {\n                  sDisplay = oDisplayText.default;\n                } else {\n                  sDisplay = oDisplayText.consented;\n                }\n\n                cflag = \"consented\";\n                break;\n\n              case \"suspended\":\n                sDisplay = oDisplayText.withdrawn;\n                cflag = \"suspended\";\n                break;\n\n              case \"deleted\":\n                sDisplay = oDisplayText.purged;\n                cflag = \"purged\";\n                break;\n\n              default:\n                sDisplay = oDisplayText.consented;\n                cflag = \"consented\";\n            }\n\n            break;\n        }\n\n        return {\n          \"statusText\": cflag || consentStatus,\n          \"statusHTML\": sDisplay\n        };\n      },\n      getTerms: function getTerms() {\n        if (this.consent.touObj.length > 0) {\n          return this.consent.touObj;\n        } else {\n          var self = this;\n          var orgTool = this.getOrgTool();\n          var orgsList = orgTool.getOrgsList();\n          var i18next = self.modules.i18next;\n\n          var capitalize = function capitalize(str) {\n            return str.replace(/\\w\\S*/g, function (txt) {\n              return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            });\n          };\n\n          self.modules.tnthAjax.getTerms(this.subjectId, \"\", true, function (data) {\n            if (data && data.tous) {\n              data.tous.forEach(function (item) {\n                var fType = $.trim(item.type).toLowerCase();\n                var org = orgsList[item.organization_id];\n\n                if ([\"subject website consent\", \"website terms of use\"].indexOf(String(fType)) !== -1) {\n                  item.name = org && org.name ? i18next.t(org.name) : \"--\";\n                  item.truenth_name = i18next.t(\"TrueNTH USA\");\n                  item.accepted = self.modules.tnthDates.formatDateString(item.accepted); //format to accepted format D m y\n\n                  item.display_type = capitalize($.trim(item.type.toLowerCase().replace(\"subject\", \"\"))); //for displaying consent type, note: this will remove text 'subject' from being displayed\n\n                  item.eproms_agreement_text = String(i18next.t(\"Agreed to {documentType}\")).replace(\"{documentType}\", capitalize(item.display_type));\n                  item.truenth_agreement_text = i18next.t(\"Agreed to terms\");\n                  item.eproms_url_text = i18next.t(item.display_type);\n                  item.truenth_url_text = String(i18next.t(\"{projectName} Terms of Use\")).replace(\"{projectName}\", \"TrueNTH USA\");\n                  item.view = i18next.t(\"View\");\n                  item.type = fType;\n                  self.consent.touObj.push(item);\n                }\n              });\n            }\n          });\n        }\n\n        self.consent.showInitialConsentTerms = self.consent.touObj.length > 0; //NEED TO CHECK THAT USER HAS ACTUALLY CONSENTED TO TERMS of USE\n      },\n      initConsentItemEvent: function initConsentItemEvent() {\n        var __self = this;\n\n        $(\"#profileConsentListModal\").on(\"show.bs.modal\", function (e) {\n          var relatedTarget = $(e.relatedTarget),\n              orgId = $(e.relatedTarget).attr(\"data-orgId\"),\n              agreementUrl = relatedTarget.attr(\"data-agreementUrl\");\n          var userId = relatedTarget.attr(\"data-userId\"),\n              status = relatedTarget.attr(\"data-status\");\n          $(this).find(\"input[class='radio_consent_input']\").each(function () {\n            $(this).attr({\n              \"data-agreementUrl\": agreementUrl,\n              \"data-userId\": userId,\n              \"data-orgId\": orgId\n            });\n\n            if (String($(this).val()) === String(status)) {\n              $(this).prop(\"checked\", true);\n            }\n          });\n\n          if (__self.isAdmin()) {\n            $(this).find(\".admin-radio\").show();\n          }\n        });\n        $(\"#profileConsentListModal input[class='radio_consent_input']\").each(function () {\n          $(this).off(\"click\").on(\"click\", function () {\n            //remove pre-existing events as when consent list is re-drawn\n            var o = __self.CONSENT_ENUM[$(this).val()];\n\n            __self.consent.saveLoading = true;\n\n            if (o) {\n              o.org = $(this).attr(\"data-orgId\");\n              o.agreementUrl = $(this).attr(\"data-agreementUrl\");\n            }\n\n            if (String($(this).val()) === \"purged\") {\n              __self.modules.tnthAjax.deleteConsent($(this).attr(\"data-userId\"), {\n                org: $(this).attr(\"data-orgId\")\n              });\n\n              __self.consent.saveLoading = false;\n\n              __self.reloadConsentList($(this).attr(\"data-userId\"));\n            } else if (String($(this).val()) === \"suspended\") {\n              var modalElement = $(\"#profileConsentListModal\"),\n                  self = $(this);\n\n              __self.modules.tnthAjax.withdrawConsent($(this).attr(\"data-userId\"), $(this).attr(\"data-orgId\"), null, function (data) {\n                modalElement.removeClass(\"fade\").modal(\"hide\");\n                __self.consent.saveLoading = false;\n\n                __self.reloadConsentList(self.attr(\"data-userId\"));\n              });\n            } else {\n              var self = $(this);\n\n              __self.modules.tnthAjax.setConsent($(this).attr(\"data-userId\"), o, $(this).val(), false, function (data) {\n                $(\"#profileConsentListModal\").removeClass(\"fade\").modal(\"hide\");\n                __self.consent.saveLoading = false;\n\n                __self.reloadConsentList(self.attr(\"data-userId\"));\n              });\n            }\n          });\n        });\n      },\n      initConsentDateEvents: function initConsentDateEvents() {\n        var today = new Date(),\n            __self = this;\n\n        $(\"#consentDateModal\").on(\"shown.bs.modal\", function (e) {\n          $(this).find(\".consent-date\").focus();\n          $(this).addClass(\"active\");\n          var relatedTarget = $(e.relatedTarget),\n              orgId = relatedTarget.attr(\"data-orgId\");\n          var agreementUrl = relatedTarget.attr(\"data-agreementUrl\"),\n              userId = relatedTarget.attr(\"data-userId\"),\n              status = relatedTarget.attr(\"data-status\");\n          $(this).find(\".data-current-consent-date\").text(__self.modules.tnthDates.formatDateString(relatedTarget.attr(\"data-signed-date\"), \"d M y hh:mm:ss\")); //display user friendly date\n\n          $(this).find(\"input.form-control\").each(function () {\n            $(this).attr({\n              \"data-agreementUrl\": agreementUrl,\n              \"data-userId\": userId,\n              \"data-orgId\": orgId,\n              \"data-status\": status\n            });\n\n            if ($(this).attr(\"data-default-value\")) {\n              $(this).val($(this).attr(\"data-default-value\"));\n            } else {\n              $(this).val(\"\");\n            }\n          });\n          $(\"#consentDateModal [data-dismiss]\").on(\"click\", function () {\n            $(this).modal(\"hide\");\n          });\n          $(\"#consentDateContainer\").show();\n          $(\"#consentDateLoader\").hide();\n          $(\"#consentDateModalError\").html(\"\");\n        });\n        $(\"#consentDateModal\").on(\"hidden.bs.modal\", function () {\n          $(this).removeClass(\"active\");\n        });\n        $(\"#consentDateModal .consent-date\").datepicker({\n          \"format\": \"d M yyyy\",\n          \"forceParse\": false,\n          \"endDate\": today,\n          \"autoclose\": true\n        });\n        $(\"#consentDateModal .consent-hour, #consentDateModal .consent-minute, #consentDateModal .consent-second\").each(function () {\n          __self.__convertToNumericField($(this));\n        });\n        $(\"#consentDateModal .consent-date, #consentDateModal .consent-hour, #consentDateModal .consent-minute, #consentDateModal .consent-second\").each(function () {\n          $(this).on(\"change\", function () {\n            var d = $(\"#consentDateModal_date\"),\n                h = $(\"#consentDateModal_hour\").val(),\n                m = $(\"#consentDateModal_minute\").val(),\n                s = $(\"#consentDateModal_second\").val();\n            var errorMessage = \"\";\n\n            var isValid = __self.modules.tnthDates.isValidDefaultDateFormat(d.val());\n\n            if (d.val() && !isValid) {\n              errorMessage += (errorMessage ? \"<br/>\" : \"\") + i18next.t(\"Date must in the valid format.\");\n              d.datepicker(\"hide\");\n            }\n\n            if (h && !/^([1-9]|0[0-9]|1\\d|2[0-3])$/.test(h)) {\n              //validate hour [0]0\n              errorMessage += (errorMessage ? \"<br/>\" : \"\") + i18next.t(\"Hour must be in valid format, range 0 to 23.\");\n            }\n\n            if (m && !/^(0[0-9]|[1-9]|[1-5]\\d)$/.test(m)) {\n              errorMessage += (errorMessage ? \"<br/>\" : \"\") + i18next.t(\"Minute must be in valid format, range 0 to 59.\");\n            }\n\n            if (s && !/^(0[0-9]|[1-9]|[1-5]\\d)$/.test(s)) {\n              errorMessage += (errorMessage ? \"<br/>\" : \"\") + i18next.t(\"Second must be in valid format, range 0 to 59.\");\n            }\n\n            $(\"#consentDateModalError\").html(errorMessage);\n          });\n        });\n        $(\"#consentDateModal .btn-submit\").on(\"click\", function () {\n          var ct = $(\"#consentDateModal_date\"),\n              o = __self.CONSENT_ENUM[ct.attr(\"data-status\")];\n\n          if (!ct.val()) {\n            $(\"#consentDateModalError\").text(i18next.t(\"You must enter a date/time\"));\n            return false;\n          }\n\n          var h = $(\"#consentDateModal_hour\").val() || \"00\",\n              m = $(\"#consentDateModal_minute\").val() || \"00\",\n              s = $(\"#consentDateModal_second\").val() || \"00\";\n          var dt = new Date(ct.val()); //2017-07-06T22:04:50 format\n\n          var cDate = dt.getFullYear() + \"-\" + (dt.getMonth() + 1) + \"-\" + dt.getDate() + \"T\" + __self.pad(h) + \":\" + __self.pad(m) + \":\" + __self.pad(s);\n\n          o.org = ct.attr(\"data-orgId\");\n          o.agreementUrl = ct.attr(\"data-agreementUrl\");\n          o.acceptance_date = cDate;\n          o.testPatient = true;\n          setTimeout(function () {\n            $(\"#consentDateContainer\").hide();\n          }(), 200);\n          setTimeout(function () {\n            $(\"#consentDateLoader\").show();\n          }(), 450);\n          $(\"#consentDateModal button[data-dismiss]\").attr(\"disabled\", true); //disable close buttons while processing reques\n\n          setTimeout(__self.modules.tnthAjax.setConsent(ct.attr(\"data-userId\"), o, ct.attr(\"data-status\"), true, function (data) {\n            if (!data || data.error) {\n              $(\"#consentDateModalError\").text(i18next.t(\"Error processing data.  Make sure the date is in the correct format.\"));\n              setTimeout(function () {\n                $(\"#consentDateContainer\").show();\n                $(\"#consentDateModal button[data-dismiss]\").attr(\"disabled\", false);\n                $(\"#consentDateLoader\").hide();\n              }, 450);\n              return false;\n            }\n\n            $(\"#consentDateModal button[data-dismiss]\").attr(\"disabled\", false);\n            $(\"#consentDateModal\").removeClass(\"fade\").modal(\"hide\");\n\n            __self.reloadConsentList(ct.attr(\"data-userId\"));\n          }), 100);\n        });\n      },\n      showConsentHistory: function showConsentHistory() {\n        return !this.consent.consentLoading && this.isConsentEditable() && this.hasConsentHistory();\n      },\n      hasConsentHistory: function hasConsentHistory() {\n        return this.consent.historyItems.length > 0;\n      },\n      hasCurrentConsent: function hasCurrentConsent() {\n        return this.consent.currentItems.length > 0;\n      },\n      getConsentHistory: function getConsentHistory(options) {\n        if (!options) {\n          options = {};\n        }\n\n        var self = this,\n            content = \"\";\n        content = \"<div id='consentHistoryWrapper'><table id='consentHistoryTable' class='table-bordered table-condensed table-responsive' style='width: 100%; max-width:100%'>\";\n        content += this.getConsentHeaderRow(this.consent.consentHistoryHeaderArray);\n        var items = this.consent.historyItems.sort(function (a, b) {\n          //sort items by last updated date in descending order\n          return new Date(b.deleted.lastUpdated) - new Date(a.deleted.lastUpdated);\n        });\n        items = this.consent.currentItems.concat(this.consent.historyItems); //combine both current and history items and display current items first;\n\n        items.forEach(function (item, index) {\n          content += self.getConsentHistoryRow(item, index);\n        });\n        content += \"</table></div>\";\n        $(\"#consentHistoryModal .modal-body\").html(content);\n        $(\"#consentHistoryModal\").modal(\"show\");\n      },\n\n      /**** this function is used when this section becomes editable, note: this is called after the user has edited the consent list; this will refresh the list ****/\n      reloadConsentList: function reloadConsentList(userId) {\n        var self = this;\n        $(\"#consentListTable\").animate({\n          opacity: 0\n        }, function () {\n          self.consent.consentLoading = true;\n          setTimeout(function () {\n            // Set a one second delay before getting updated list. Mostly to give user sense of progress/make it\n            self.modules.tnthAjax.getConsent(userId || self.subjectId, {\n              sync: true\n            }, function (data) {\n              self.getConsentList(data);\n            });\n          }, 1500);\n        });\n      },\n      getConsentList: function getConsentList(data) {\n        if (!data) {\n          return false;\n        }\n\n        if (data.error) {\n          this.consent.consentListErrorMessage = i18next.t(\"Error occurred retrieving consent list content.\");\n          this.consent.consentLoading = false;\n          return false;\n        }\n\n        this.getTerms(); //get terms of use if any\n\n        var self = this,\n            dataArray = [];\n\n        if (data.consent_agreements && data.consent_agreements.length > 0) {\n          dataArray = data.consent_agreements;\n        }\n\n        this.consent.consentItems = dataArray;\n        this.consent.consentDisplayRows = [];\n\n        if (this.consent.consentItems.length === 0) {\n          clearInterval(self.consentListReadyIntervalId);\n          $(\"#consentListTable\").animate({\n            opacity: 1\n          });\n          this.consent.consentLoading = false;\n          return false;\n        }\n\n        var existingOrgs = {};\n        this.consent.currentItems = $.grep(this.consent.consentItems, function (item) {\n          return self.getConsentStatus(item) === \"active\";\n        });\n        this.consent.historyItems = $.grep(this.consent.consentItems, function (item) {\n          //iltered out deleted items from all consents\n          return self.getConsentStatus(item) !== \"active\";\n        });\n        this.consent.currentItems.forEach(function (item, index) {\n          if (!existingOrgs[item.organization_id] && !/null/.test(item.agreement_url)) {\n            self.getConsentRow(item, index);\n            existingOrgs[item.organization_id] = true;\n          }\n        });\n        clearInterval(this.consentListReadyIntervalId);\n        this.consentListReadyIntervalId = setInterval(function () {\n          if ($(\"#consentListTable .consentlist-cell\").length > 0) {\n            $(\"#consentListTable .button--LR[show='true']\").addClass(\"show\");\n            $(\"#consentListTable tbody tr\").each(function (index) {\n              $(this).addClass(index % 2 !== 0 ? \"even\" : \"odd\");\n            });\n\n            if (!self.isConsentWithTopLevelOrg()) {\n              $(\"#consentListTable .agreement\").each(function () {\n                $(this).parent().hide();\n              });\n            }\n\n            if (self.isConsentEditable()) {\n              self.initConsentItemEvent();\n              self.initConsentDateEvents();\n            }\n\n            $(\"#consentListTable\").animate({\n              opacity: 1\n            }, 1500);\n            clearInterval(self.consentListReadyIntervalId);\n          }\n\n          if (self.showConsentHistory()) {\n            $(\"#viewConsentHistoryButton\").on(\"click\", function (e) {\n              e.preventDefault();\n              e.stopImmediatePropagation();\n              self.getConsentHistory();\n            });\n            setTimeout(function () {\n              $(\"#viewConsentHistoryButton\").removeClass(\"tnth-hide\");\n            }, 550);\n          }\n        }, 50);\n        this.consent.consentLoading = false;\n      },\n      pad: function pad(n) {\n        n = parseInt(n);\n        return n < 10 ? \"0\" + n : n;\n      },\n      __convertToNumericField: function __convertToNumericField(field) {\n        if (field && (\"ontouchstart\" in window || typeof window.DocumentTouch !== \"undefined\" && document instanceof window.DocumentTouch)) {\n          field.each(function () {\n            $(this).prop(\"type\", \"tel\");\n          });\n        }\n      },\n      escapeHtml: function escapeHtml(text) {\n        if (text === null || text !== \"undefined\" || String(text).length === 0) {\n          return text;\n        }\n\n        return text.replace(/[\\\"&'\\/<>]/g, function (a) {\n          return {\n            '\"': \"&quot;\",\n            \"&\": \"&amp;\",\n            \"'\": \"&#39;\",\n            \"/\": \"&#47;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\"\n          }[a];\n        });\n      }\n    }\n  });\n  return ProfileObj;\n})());\n\n//# sourceURL=webpack:///./static/js/src/profile.js?");

/***/ })

/******/ });
//# sourceMappingURL=../../maps/profile.bundle.js.map