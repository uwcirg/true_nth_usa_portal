"""SitePersistence Module"""
from collections import namedtuple

from flask import current_app

from ..database import db
from ..models.app_text import AppText
from ..models.coding import Coding
from ..models.communication_request import CommunicationRequest
from ..models.intervention import Intervention
from ..models.intervention_strategies import AccessStrategy
from ..models.notification import Notification
from ..models.organization import Organization
from ..models.questionnaire import Questionnaire
from ..models.questionnaire_bank import QuestionnaireBank
from ..models.research_protocol import ResearchProtocol
from ..models.scheduled_job import ScheduledJob
from .config_persistence import export_config, import_config
from .exclusion_persistence import (
    ExclusionPersistence,
    preflight,
    staging_exclusions,
)
from .model_persistence import ModelPersistence

# NB - order MATTERS, as any type depending on another must find
# the dependent bits in place on import, such as the known:
#   ResearchProtocols before Orgs (Orgs point to RPs)
#   Coding before Orgs (Orgs reference language codings)
#   Orgs before all else
#   CommunicationRequest depends on QuestionnaireBanks

ModelDetails = namedtuple(
    'ModelDetails', ['cls', 'sequence_name', 'lookup_field'])
models = (
    ModelDetails(ResearchProtocol, 'research_protocols_id_seq', 'name'),
    ModelDetails(Coding, 'codings_id_seq', ('system', 'code')),
    ModelDetails(Organization, 'organizations_id_seq', 'id'),
    ModelDetails(Questionnaire, 'questionnaires_id_seq', 'identifier'),
    ModelDetails(QuestionnaireBank, 'questionnaire_banks_id_seq', 'name'),
    ModelDetails(Intervention, 'interventions_id_seq', 'name'),
    ModelDetails(AccessStrategy, 'access_strategies_id_seq', 'id'),
    ModelDetails(CommunicationRequest, 'communication_requests_id_seq',
                 'identifier'),
    ModelDetails(AppText, 'apptext_id_seq', 'name'),
    ModelDetails(Notification, 'notifications_id_seq', 'name'),
    ModelDetails(ScheduledJob, 'scheduled_jobs_id_seq', 'name'))


class SitePersistence(object):
    """Manage import and export of dynamic site data"""

    VERSION = '0.1'

    def __init__(self, target_dir):
        """Initialize SitePersistence instance

        :param target_dir: assign filesystem path to use non-default

        """
        self.dir = target_dir

    def export(self, staging_exclusion=False):
        """Generate JSON files defining dynamic site objects

        :param staging_exclusion: set only if persisting exclusions to retain
          on staging when pulling over production data

        Export dynamic data, such as Organizations and Access Strategies for
        import into other sites.  This does NOT export values expected
        to live in the site config file or the static set generated by the seed
        managment command.

        To import the data, use the seed command as defined in manage.py
        """

        def default_export():
            # The following model classes write to independent files
            for model in models:
                model_persistence = ModelPersistence(
                    model.cls, lookup_field=model.lookup_field,
                    target_dir=self.dir)
                model_persistence.export()

            # Add site.cfg
            export_config(target_dir=self.dir)

        def exclusive_export():
            for model in staging_exclusions:
                ep = ExclusionPersistence(
                    model_class=model.cls, lookup_field=model.lookup_field,
                    limit_to_attributes=model.limit_to_attributes,
                    filter_query=model.filter_query, target_dir=self.dir)
                ep.export()

        if staging_exclusion:
            exclusive_export()
        else:
            default_export()

    def import_(self, keep_unmentioned, staging_exclusion=False):
        """If persistence file is found, import the data

        :param keep_unmentioned: if True, unmentioned data, such as
            an organization or intervention in the current database
            but not in the persistence file, will be left in place.
            if False, any unmentioned data will be purged as part of
            the import process.
        :param staging_exclusion: set only if persisting exclusions to retain
          on staging when pulling over production data

        """

        def default_import():
            for model in models:
                model_persistence = ModelPersistence(
                    model.cls, lookup_field=model.lookup_field,
                    sequence_name=model.sequence_name,
                    target_dir=self.dir)
                model_persistence.import_(keep_unmentioned=keep_unmentioned)

            # Config isn't a model - separate function
            import_config(target_dir=self.dir)

        def exclusive_import():
            # Requires a pre-flight check, to confirm we don't overwrite, etc.
            preflight(target_dir=self.dir)

            for model in staging_exclusions:
                ep = ExclusionPersistence(
                    model_class=model.cls, lookup_field=model.lookup_field,
                    limit_to_attributes=model.limit_to_attributes,
                    filter_query=model.filter_query, target_dir=self.dir)
                ep.import_(keep_unmentioned=keep_unmentioned)

        if staging_exclusion:
            exclusive_import()
        else:
            default_import()

        db.session.commit()
        current_app.logger.info("SitePersistence import complete")
