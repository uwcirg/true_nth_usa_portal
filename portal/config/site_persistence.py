"""SitePersistence Module"""
from collections import namedtuple
from flask import current_app

from .config_persistence import export_config, import_config
from ..database import db
from ..models.app_text import AppText
from ..models.communication_request import CommunicationRequest
from ..models.fhir import Coding
from ..models.intervention import Intervention
from ..models.intervention_strategies import AccessStrategy
from ..models.organization import Organization
from ..models.questionnaire import Questionnaire
from ..models.questionnaire_bank import QuestionnaireBank
from ..models.research_protocol import ResearchProtocol
from ..models.scheduled_job import ScheduledJob
from .model_persistence import export_model, import_model


# NB - order MATTERS, as any type depending on another must find
# the dependent bits in place on import, such as the known:
#   ResearchProtocols before Orgs (Orgs point to RPs)
#   Orgs before all else
#   CommunicationRequest depends on QuestionnaireBanks

ModelDetails = namedtuple(
    'ModelDetails', ['cls', 'sequence_name', 'lookup_field'])
models = (
    ModelDetails(ResearchProtocol, 'research_protocols_id_seq', 'name'),
    ModelDetails(Organization, 'organizations_id_seq', 'id'),
    ModelDetails(Questionnaire, 'questionnaires_id_seq', 'name'),
    ModelDetails(QuestionnaireBank, 'questionnaire_banks_id_seq', 'name'),
    ModelDetails(Intervention, 'interventions_id_seq', 'name'),
    ModelDetails(Coding, 'codings_id_seq', ('system', 'code')),
    ModelDetails(AccessStrategy, 'access_strategies_id_seq', 'id'),
    ModelDetails(CommunicationRequest, 'communication_requests_id_seq', 'identifier'),
    ModelDetails(AppText, 'apptext_id_seq', 'name'),
    ModelDetails(ScheduledJob, 'scheduled_jobs_id_seq', 'name'))


class SitePersistence(object):
    """Manage import and export of dynamic site data"""

    VERSION = '0.1'

    def export(self, dir):
        """Generate JSON files defining dynamic site objects

        :param dir: used to name a non-default target directory for export files

        Export dynamic data, such as Organizations and Access Strategies for
        import into other sites.  This does NOT export values expected
        to live in the site config file or the static set generated by the seed
        managment command.

        To import the data, use the seed command as defined in manage.py
        """

        # The following model classes write to independent files
        for model in models:
            export_model(cls=model.cls, lookup_field=model.lookup_field, target_dir=dir)

        # Add site.cfg
        export_config(target_dir=dir)

    def import_(self, keep_unmentioned):
        """If persistence file is found, import the data

        :param keep_unmentioned: if True, unmentioned data, such as
            an organization or intervention in the current database
            but not in the persistence file, will be left in place.
            if False, any unmentioned data will be purged as part of
            the import process.

        """
        for model in models:
            import_model(
                cls=model.cls,
                sequence_name=model.sequence_name,
                lookup_field=model.lookup_field,
                keep_unmentioned=keep_unmentioned)

        # Config isn't a model - separate function
        import_config()

        db.session.commit()
        current_app.logger.info("SitePersistence import complete")
