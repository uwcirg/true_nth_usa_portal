import logging

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import sessionmaker

from portal.models.audit import Audit
from portal.models.user_consent import UserConsent

"""consent audit & acceptance_date cleanup

Revision ID: c49b7f7944a7
Revises: 0f1576a4e220
Create Date: 2018-06-21 14:37:20.145030

"""

# revision identifiers, used by Alembic.
revision = 'c49b7f7944a7'
down_revision = '0f1576a4e220'
Session = sessionmaker()

log = logging.getLogger("alembic")
log.setLevel(logging.INFO)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_consents', sa.Column(
        'acceptance_date', sa.DateTime(), nullable=True))

    bind = op.get_bind()
    session = Session(bind=bind)

    # Whip through every user_consent, migrating data...
    delete_em = []
    for uc in session.query(UserConsent):
        uc.acceptance_date = uc.audit.timestamp

        # look for `recorded` audit that may have different
        # timestamp
        comment = "Consent agreement {} recorded".format(
            uc.id)
        recorded = session.query(Audit).filter(
            Audit.comment == comment)
        recorded = recorded.first()
        if recorded:
            assert(uc.audit.user_id == recorded.user_id)
            assert(uc.audit.context == 'consent')
            uc.audit.timestamp = recorded.timestamp
            delete_em.append(recorded)

    # Purge the now obsolete recorded audit rows
    [session.delete(r) for r in delete_em]
    session.commit()

    # Add nullable constraint to `acceptance_date` now that it's populated
    op.alter_column('user_consents', 'acceptance_date', nullable=False)


def downgrade():
    # Don't see much value in supporting downgrade, simply log the fact
    # that we'll lose data.
    #
    # Those consents w/ differing values in their audit rows from
    # `acceptance_date` would need recreation of "recorded" audits
    # in the downgrade.
    log.error(
        "DATA LOSS: "
        "Can't downgrade w/o coding up reanimation of `recorded` audits")
    op.drop_column('user_consents', 'acceptance_date')
