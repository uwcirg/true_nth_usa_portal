[tox]
envlist = py27,translations,docs,ui,build-artifacts,py3
skip_missing_interpreters = True

[testenv]
description = Default testing environment, run unit test suite
deps =
    --requirement=requirements.dev.txt
    pytest-cov
passenv =
    FLASK_APP
    LANG
    PERSISTENCE_DIR
    PG*
    SECRET_KEY
    SQLALCHEMY_DATABASE_TEST_URI
    TRAVIS*
commands =
    py.test \
        --ignore tests/integration_tests \
        --cov portal \
        --cov-report xml:"{toxinidir}/coverage.xml" \
    []
whitelist_externals = /bin/sh

[testenv:docs]
description = Test documentation generation
changedir = docs
commands =
    sphinx-build \
        -W \
        -n \
        -b html \
        -d {envtmpdir}/doctrees \
    source {envtmpdir}/html

[testenv:ui]
description = Run selenium tests
passenv =
    {[testenv]passenv}
    DISPLAY
    SAUCE_*
commands =
    sh -c "{toxinidir}/bin/build-frontend-files.sh"
    py.test tests/integration_tests/ []

[testenv:build-artifacts]
description = Build docker artifacts and prerequisites (debian package) test deploy and check health
deps = docker-compose>=1.19
skip_install = True
changedir = docker
passenv =
    DOCKER_IMAGE_TAG
    DOCKER_REPOSITORY
setenv =
    SECRET_KEY = {env:PYTHONHASHSEED}
    SERVER_NAME = localhost:8008
    EXTERNAL_PORT = 8008
    PORT = 8008
    PORTAL_ENV_FILE = {envtmpdir}/portal.env
    COMPOSE_PROJECT_NAME = tox-{envname}
# wait until after first healthcheck occurs
# check health and cleanup
commands =
    sh -c 'env | grep -e SECRET_KEY -e SERVER_NAME > "$PORTAL_ENV_FILE"'

    sh -c "{toxinidir}/bin/docker-build.sh"
    sh -c " \
        COMPOSE_FILE=docker-compose.yaml:docker-compose.prod.yaml \
        {toxinidir}/bin/deploy-docker.sh -n \
    "

    sh -c 'sleep 6m'
    sh -c 'docker-compose logs web'

    sh -c ' \
        health="$(docker inspect --format "\{\{ .State.Health.Status \}\}" $(docker-compose ps -q web))"; \
        test "$health" = "healthy"; \
        exit_code=$?; \
        docker-compose down --volumes; \
        exit $exit_code \
    '

[testenv:backend-translations]
description = Upload backend strings to Smartling
# Todo: unify string and artifact upload logic
commands =
    flask sync
    sh -c 'if [ "$TRAVIS_BRANCH" = "develop" ] && [ "$TRAVIS_PULL_REQUEST" = "false" ]; then flask translation-upload ;fi'

[testenv:translations]
description = Upload frontend and backend strings to Smartling
passenv =
    {[testenv]passenv}
    SMARTLING_*
commands =
    sh -c "{toxinidir}/bin/extract-frontend-strings.sh"
    {[testenv:backend-translations]commands}
