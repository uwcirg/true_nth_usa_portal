[tox]
envlist = py27,translations,docs,ui,build-artifacts,py3
skip_missing_interpreters = True

[testenv]
description = Default testing environment, run unit test suite
deps =
    --requirement=requirements.dev.txt
    pytest-cov
setenv =
    TESTING = true
passenv =
    FLASK_APP
    LANG
    PERSISTENCE_DIR
    PG*
    REDIS*
    SECRET_KEY
    SQLALCHEMY_DATABASE_TEST_URI
    TRAVIS*
    CI
commands =
    # run celery, only on continuous integration
    # Todo: switch to py.test celery fixtures or start celery via fixture
    sh -c ' \
        if [ "$CI" = true ]; then \
            celery worker \
                --detach \
                --app portal.celery_worker.celery \
                --queues celery,low_priority \
                --loglevel info ; \
        fi \
    '
    py.test \
        --ignore tests/integration_tests \
        --cov portal \
        --cov-report xml:"{toxinidir}/coverage.xml" \
    []
whitelist_externals = /bin/sh

[testenv:docs]
description = Test documentation generation
changedir = docs
commands =
    sphinx-build \
        -W \
        -n \
        -b html \
        -d {envtmpdir}/doctrees \
    source {envtmpdir}/html

[testenv:ui]
description = Run selenium tests
passenv =
    {[testenv]passenv}
    DISPLAY
    SAUCE_*
commands =
    sh -c "{toxinidir}/bin/build-frontend-files.sh"
    py.test tests/integration_tests/ []

[testenv:build-artifacts]
description = Build docker artifacts and prerequisites (debian package) test deploy and check health
deps = docker-compose>=1.19
skip_install = True
passenv =
    DOCKER_IMAGE_TAG
    DOCKER_REPOSITORY
setenv =
    SECRET_KEY = {env:PYTHONHASHSEED}
    SERVER_NAME = localhost:8008
    EXTERNAL_PORT = 8008
    PORTAL_ENV_FILE = {envtmpdir}/portal.env
    COMPOSE_PROJECT_NAME = tox-{envname}
# wait until after first healthcheck occurs
# check health and cleanup
commands =
    sh -c "{toxinidir}/tests/test_deploy.sh"

[testenv:translations]
description = Extract frontend and backend strings
setenv =
    {[testenv]setenv}
    FLASK_APP = {toxinidir}/manage.py
commands =
    sh -c "{toxinidir}/bin/extract-frontend-strings.sh"
    flask sync
    flask extract-i18n
